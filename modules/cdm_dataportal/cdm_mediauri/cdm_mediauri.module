<?php
// $Id$

/*
 * @file
 * cdm_mediauri.module
 *
 * Copyright (C) 2007 EDIT
 * European Distributed Institute of Taxonomy
 * http://www.e-taxonomy.eu
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * See LICENSE.TXT at the top of this package for the full license terms.
 */


/**
 * Implementation of hook_menu()
 */
function cdm_mediauri_menu($may_cache) {
  
  $items = array();
  if ($may_cache) {
    
   $items[] = array(
      'path' => 'admin/settings/cdm_mediauri',
      'title' => t('CDM Media URI Conversion'),
      'description' => t('Media URI Conversion Rules'),
      'access' => user_access('administer cdm_dataportal'),
      'callback' => 'cdm_mediauri_overview',
      'type' => MENU_NORMAL_ITEM,
    );

  $items[] = array(
      'path' => 'admin/settings/cdm_mediauri/list',
      'title' => t('List'),
      'description' => t('Media URI Conversion Rules'),
      'access' => user_access('administer cdm_dataportal'),
      'callback' => 'cdm_mediauri_overview',
      'weight' => 1,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    
    $items[] = array(
      'path' => 'admin/settings/cdm_mediauri/add',
      'title' => t('Add Rule'),
      'description' => t('Add Media URI Conversion Rule'),
      'access' => user_access('administer cdm_dataportal'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('cdm_mediauri_rule_add'),
      'weight' => 2,
      'type' => MENU_LOCAL_TASK,
    );
    
     $items[] = array(
      'path' => 'admin/settings/cdm_mediauri/edit',
      'access' => user_access('administer cdm_dataportal'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('cdm_mediauri_rule_edit'),
      'type' => MENU_CALLBACK,
    );
    
     $items[] = array(
      'path' => 'admin/settings/cdm_mediauri/delete',
      'access' => user_access('administer cdm_dataportal'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('cdm_mediauri_rule_delete'),
      'type' => MENU_CALLBACK,
    );

  }
  return $items;
}


/**
 * Returns an overview list of existing media uri rules
 */
function cdm_mediauri_overview($rules = false) {
  

  if(!$rules){
    $rules = cdm_mediauri_rules();
  }

  $header = array(t('Pattern'), t('Replacement'), t('Operations'));
  $rid = -1;
  if(count($rules)){
  foreach ($rules as $rule) {
      $rid++;
      $rows[] = array($rule['pattern'], $rule['replace'], l('edit', 'admin/settings/cdm_mediauri/edit/'. $rid).' | '.l('delete', 'admin/settings/cdm_mediauri/delete/'. $rid));
    }
  }
  else {
     $rows[] = array(array('data' => '<em>' 
     . t('There are no existing media uri conversion rules. You may add some rule: <a href="@add">add rule</a>', array('@add' => url('admin/settings/cdm_mediauri/add'))) . '</em>', 'colspan' => 3) );
  }
  return theme('table', $header, $rows);
}


/**
 * Menu callback; add new mediauri rule.
 */
function cdm_mediauri_rule_add() {
  
 
  $form = cdm_mediauri_rule_edit_form('new');
  return system_settings_form($form);
}

function cdm_mediauri_rule_edit($rid) {
  
  $form = cdm_mediauri_rule_edit_form($rid);
  return system_settings_form($form);
}


function cdm_mediauri_rule_add_submit($form_id, $form_values) {
  
  if($form_values['rid'] == 'new'){
    $rules = cdm_mediauri_rules();
    $rules[] = $form_values['rule'];
    variable_set('cdm_mediauri_rules', $rules);
       drupal_set_message('Rule added');
  }else {
    drupal_set_message('Cannot add rule', 'error');
  }
  return 'admin/settings/cdm_mediauri';
}

function cdm_mediauri_rule_edit_submit($form_id, $form_values) {
  
  if(is_numeric($form_values['rid'])){
    $rules = cdm_mediauri_rules();
    $rules[$form_values['rid']] = $form_values['rule'];
    variable_set('cdm_mediauri_rules', $rules);
     drupal_set_message('Rule saved');
  }else {
    drupal_set_message('Cannot save rule (invalid rule id)', 'error');
  }
  return 'admin/settings/cdm_mediauri';
}

function cdm_mediauri_rule_delete_submit($form_id, $form_values) {
  
  if(is_numeric($form_values['rid'])){
    $rules = cdm_mediauri_rules();
    unset($rules[$form_values['rid']]);
    variable_set('cdm_mediauri_rules', $rules);
    drupal_set_message('Rule deleted');
  } else {
    drupal_set_message('Cannot delete rule (invalid rule id)', 'error');
  }
  return 'admin/settings/cdm_mediauri';
}

/**
 * Menu callback; confirm deletion of mediauri rule.
 */
function cdm_mediauri_rule_delete($rid = 0) {
  $rules = cdm_mediauri_rules();
  $form['rid'] = array('#type' => 'hidden', '#value' => $rid);

  return confirm_form($form, t('Are you sure you want to delete the following rule:'.cdm_mediauri_overview(array($rules[$rid]))), 'admin/settings/cdm_mediauri', '', t('Delete'), t('Cancel'));
}



function cdm_mediauri_rule_edit_form($rid = 'new'){

  if($rid == 'new'){
    // ---- little code snipped used to import default rules during development 
    $default_rule_id = FALSE; // 0 or 1 or FALSE
    
    if($default_rule_id !== false){
      $default_rules = cdm_mediauri_rules(true);
      $rule = $default_rules[$default_rule_id];
    }
    // --- END
  
    if(!$rule) {
      $rule = array();
      $rule['type'] = 'empty';
      $rule['pattern'] = '';
      $rule['replace'] = '';
      $rule['prefix'] = ''; 
      $rule['affix'] = '';
      $rule['url_encode'] = 0; 
      $rule['embed_html'] = 0;
    }
  } else {
    $rules = cdm_mediauri_rules(); 
    $rule = $rules[$rid];
  }
  
  $form = array();

  /*
   * rule
   * 
   *  ['type']: values(preview, webapp, media)
   *  ['size_x'], ['size_y']: dimensions of preview image in px
   *  ['pattern']: php PCRE regex pattern (see: http://www.php.net/manual/reference.pcre.pattern.syntax.php)
   *  ['replace']: replacement string 
   *  ['prefix']: string by which the converted url is to be prefixed
   *  ['affix']: string by which the converted url is to be affixed
   *  ['url_encode']: values(TRUE, FALSE) if the converted url is to be url encoded
   *  ['embed_html']: embes the construct of prefix + url + affix into the page as plain html
   * 
   */
  $form['rid'] = array(
    '#type' => 'hidden',
    '#value' => $rid,
   );
  
  $form['rule'] = array(
    '#type' => 'fieldset',
    '#title' => ($rule['type'] == 'empty' ? t('New Rule') : t('Rule '.$rid)),
    '#tree' => TRUE,
  );
  
  $form['rule']['type'] =  array(
    '#type'  => 'select',
    '#title' => t('Type'),
    '#default_value' => $rule['type'],
    '#options' => array(
        'preview' => t('Preview Quality'),
        'webapp' => t('Web Application'),
        ),
    '#description'   => t('The type media representation.'),
  );
  
   $form['rule']['pattern'] =  array(
    '#type' => 'textarea',
    '#title'         => t('Pattern'),
    '#description'   => t('php PCRE regex pattern (see: ').l('php manual', 'http://www.php.net/manual/reference.pcre.pattern.syntax.php').')',
    '#default_value' => $rule['pattern'],
    '#rows' => 1
  );
  
  $form['rule']['replace'] =  array(
    '#type' => 'textarea',
    '#title'         => t('Replacement'),
    '#default_value' => $rule['replace'],
    '#rows' => 1,
   );
  
  $form['rule']['url_encode'] =  array(
    '#type' => 'checkbox',
    '#title'         => t('Url Encode'),
    '#default_value' => $rule['url_encode'],
    '#description'   => t('Whether the converted url is to be url encoded')
   );
  
  //  ['embed_html'] = 1;
  
  $form['rule']['embed_html'] =  array(
    '#type' => 'checkbox',
    '#title'         => t('Embed'),
    '#default_value' => $rule['embed_html'],
    '#description'   => t('Embed the construct of prefix + url + affix into the page as plain html')
   );
  
   
  $form['rule']['prefix'] =  array(
    '#type' => 'textarea',
    '#title'   => t('Prefix'),
    '#default_value' => $rule['prefix'],
    '#rows' => 1,
  );
  
    $form['rule']['affix'] =  array(
    '#type' => 'textarea',
    '#title'   => t('Affix'),
    '#default_value' => $rule['affix'],
    '#rows' => 1,
  );
  
   $form['rule']['size_x'] =  array(
    '#type' => 'textfield',
    '#title'         => t('Preview Image Width'),
    '#default_value' => $rule['size_x'],
    '#disabled' => $rule['type'] != 'preview',
    '#description'   => t('Width of preview image in px'),
    '#size' => 4, 
  );
  
  $form['rule']['size_y'] =  array(
    '#type' => 'textfield',
    '#title'         => t('Preview Image Height'),
    '#default_value' => $rule['size_y'],
    '#disabled' => $rule['type'] != 'preview',
    '#description'   => t('Height of preview image in px'),
    '#size' => 4, 
  );
    
  return $form;
}



function cdm_mediauri_rules($default = false){
  /*
   * rules
   * 
   *  ['type']: values(preview, webapp, media)
   *  ['size_x'], ['size_y']: dimensions of preview image in px
   *  ['pattern']: php PCRE regex pattern (see: http://www.php.net/manual/reference.pcre.pattern.syntax.php)
   *  ['replace']: replacement string 
   *  ['prefix']: string by which the converted url is to be prefixed
   *  ['affix']: string by which the converted url is to be affixed
   *  ['url_encode']: values(TRUE, FALSE) if the converted url to be url encoded
   *  ['embed_html']: embes the construct of prefix + url + affix into the page as plain html
   * 
   */
  if($default){
  // default rules
  $rule1 = array();
  $rule1['type'] = 'preview';
  $rule1['pattern'] = '/^(http:\/\/ww2.bgbm.org\/herbarium\/images(?:\/\w+)(?:\/\d+){4})(\/)(.*)$/';
  $rule1['replace'] = '$1/thumbs/$3';
  $rule1['size_x'] = 125;
  $rule1['size_Y'] = 200;
  
  $rule2 = array();
  $rule2['type'] = 'webapp';
  $rule2['pattern'] = '/^http:\/\/ww2.bgbm.org\/herbarium\/images\/((?:\w+\/)(?:\d+\/){4}[\w_]+?\.)(.*)$/';
  $rule2['replace'] = '$1fpx';
  $rule2['prefix'] = '<embed width="490" height="700" align="middle" type="application/x-shockwave-flash" 
       pluginspage="http://www.macromedia.com/go/getflashplayer" name="FSIViewer" 
       bgcolor="black" quality="high" play="true" 
       src="http://ww2.bgbm.org/fsi/fsi.swf?cfg=plugin2&FPXSrc='; 
  $rule2['affix'] = '&FPXWidth=2801&FPXHeight=4478&Effects=qlt%3D85&InitialView=&Measure_ImageWidth=270.0&Measure_Suffix=%20mm"/>';
  $rule2['url_encode'] = 1; 
  $rule2['embed_html'] = 1;
    return array($rule1, $rule2);
  
  } else {
    return variable_get('cdm_mediauri_rules', array());
  }
  
}

/**
 * Converts a media uri according to all matching conversion rules which are currently defined.
 * 
 * Format of a returned array element:
 * 
 *  $return_array[{type}] { // values for {type}:(preview, webapp, media, original)
 *      ['size_x'],         // dimensions of preview image in px
 *      ['size_y'],         // dimensions of preview image in px
 *      ['uri']             //the uri 
 *  }
 * 
 * @return returns an associative array of the original media uri and all convered 
 *    whereas the rule type becomes the array key of the array entries.
 *    All uris are again packed into associative arrays by means to submit 
 *    additional information as defined in the rules applied. 
 */
function cdm_mediauri_conversion($mediaUri){
  
  $rules = cdm_mediauri_rules();
  
  $muris = array();
  $muris['original'] = array('uri' => $mediaUri, 'size_x'=>null, 'size_y'=>null);
  
  foreach($rules as $rule){
      $uri_converted = preg_replace($rule['pattern'], $rule['replace'], $mediaUri);
      if($uri_converted != $mediaUri){
        if(isset($rule['url_encode']) && $rule['url_encode']){
          $uri_converted = urlencode($uri_converted);
        }
        $muris[$rule['type']] = array('uri'=>$uri_converted, 'size_x'=>$rule['size_x'], 'size_y'=>$rule['size_y']);
      }
  }
  return $muris;
}

<?php
// $Id$

/**
 * Copyright (C) 2007 EDIT
 * European Distributed Institute of Taxonomy
 * http://www.e-taxonomy.eu
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * See http://www.mozilla.org/MPL/MPL-1.1.html for the full license terms.
 */

function theme_cdm_search_results($pager, $path, $parameters){


	$showThumbnails = $_SESSION['pageoptions']['searchtaxa']['showThumbnails'];
	if( !is_numeric($showThumbnails)){
		$showThumbnails = 1;
	}
	$setSessionUri = url('cdm_api/setvalue/session', "var=[pageoption][searchtaxa][showThumbnails]&val=");
	drupal_add_js('$(document).ready(function() {

        // init
        if('.$showThumbnails.' == 1){
              $(\'.media_gallery\').show(20);
        } else {
          $(\'.media_gallery\').hide(20);
        }
        // add change hander
        $(\'#showThumbnails\').change(
          function(event){
            var state = 0;
            if($(this).is(\':checked\')){
              $(\'.media_gallery\').show(20);
              state = 1;
            } else {
              $(\'.media_gallery\').hide(20);
            }
            // store state in session variable
            var uri = \''.$setSessionUri.'\' + state;
            jQuery.get(uri);
          });
        });', "inline");

	drupal_set_title(t('Search results'));

	$out = ''; //l('Advanced Search', '/cdm_dataportal/search');

	$out = '<div class="page_options"><form name="pageoptions"><input id="showThumbnails" type="checkbox" name="showThumbnails" '.($showThumbnails == 1? 'checked="checked"': '').'> '.t('Show Thumbnails').'</form></div>';
	if(count($pager->records) > 0){
		$out .= theme('cdm_list_of_taxa', $pager->records);
		$out .= theme('cdm_pager', $pager, $path, $parameters);
	} else {
		$out = '<h4 class="error">Sorry, no matching entries found.</h4>';
	}
	return $out;
}


/**
 * renders misapplied names and invalid designations.
 * Both relation types are currently treated the same!
 *
 * @param unknown_type $taxonRelationships
 * @return unknown
 */
function theme_cdm_taxonRelationships($taxonRelationships){

	if(!$taxonRelationships){
		return;
	}

	RenderHints::pushToRenderStack('taxonRelationships');
	$footnoteListKey = 'taxonRelationships';
	RenderHints::setFootnoteListKey($footnoteListKey);

	$misapplied = array();
	$joinedAuthorTeams = array();

	// aggregate misapplied names having the same fullname:
	foreach($taxonRelationships as $taxonRelation){
		if(true || $taxonRelation->type->uuid == UUID_MISAPPLIED_NAME_FOR || $taxonRelation->type->uuid == UUID_INVALID_DESIGNATION_FOR ){

			$name = $taxonRelation->fromTaxon->name->titleCache;

			$author_team = cdm_ws_get(CDM_WS_REFERENCE_AUTHORTEAM, $taxonRelation->fromTaxon->sec->uuid);
			$authorteam = $author_team->titleCache;

			if(!isset($misapplied[$name])){
				$misapplied[$name]['out'] =
				  '<span class="misapplied">'
				  .theme('cdm_related_taxon',$taxonRelation->fromTaxon, UUID_MISAPPLIED_NAME_FOR, false).
				  '</span>';
			}

			// collect all authors for this fullname
			if(isset($authorteam)){
				$misapplied[$name]['authorteam'][$authorteam] = '';
				$joinedAuthorTeams[$authorteam] = 'sensu '.theme('cdm_reference', $taxonRelation->fromTaxon->sec);
			}

		}
	}

	// sort the joinedAuthorTeams and create footnotes and footnotekeys
	ksort($joinedAuthorTeams);
	foreach($joinedAuthorTeams as $authorteam=>$sensuCitation){
		$footnoteKey = FootnoteManager::addNewFootnote($footnoteListKey, $sensuCitation);
		$joinedAuthorTeams[$authorteam] = '<span class="sensu">sensu '.$authorteam. theme('cdm_footnote_key', $footnoteKey).'</span>';
	}

	// generate output
	$out = '<ul class="misapplied">';

	foreach($misapplied as $misapplied_name){

		$out .= '<li class="synonym">'.$misapplied_name['out'] . " ";
		if(isset($misapplied_name['authorteam'])){
			// fill authors with the renderedFootnoteKey and sorting 'em
			foreach($misapplied_name['authorteam'] as $authorteam=>&$renderedFootnoteKey) {
				$renderedFootnoteKey = $joinedAuthorTeams[$authorteam];
			}
				ksort($misapplied_name['authorteam']);
				$out .= join('; ', $misapplied_name['authorteam']);
		}
		$out .= '</li>';

	}
	$out .= '</ul>';

	$tr_footnotes = theme('cdm_footnotes', $footnoteListKey, 'li');
	$tr_footnotes_exploded = explode('sensu', $tr_footnotes);
	$tr_footnotes_aux = '';
	foreach ($tr_footnotes_exploded as $element){
		$tr_footnotes_aux .= $element;
	}
	$out .= '<ul>' . $tr_footnotes_aux . '</ul>';
	//$out .= '</ul>';
	RenderHints::popFromRenderStack();
	return $out;
}

function theme_cdm_acceptedFor(){
	RenderHints::pushToRenderStack('acceptedFor');

	$out = '';
	if(isset($_REQUEST['acceptedFor'])){

		$synonym = cdm_ws_get(CDM_WS_PORTAL_TAXON, $_REQUEST['acceptedFor']);

		if($synonym){
			$out .= '<span class="acceptedFor">';
			$out .= t('is accepted for ');
			if(isset($synonym->name->nomenclaturalReference)){
				$referenceUri = url(path_to_reference($synonym->name->nomenclaturalReference->uuid));
			}
			$out .= theme('cdm_taxonName', $synonym->name, null, $referenceUri);
			$out .= theme('cdm_annotations_as_footnotekeys', $synonym);
			$out .= '</span>';
		}
	}
	RenderHints::popFromRenderStack();
	return $out;
}

function theme_cdm_list_of_taxa($records, $showMedia = false){

	RenderHints::pushToRenderStack('list_of_taxa');

	$form_name = 'search_gallery';
	//$default_values = unserialize(CDM_DATAPORTAL_GALLERY_SETTINGS);
    //$gallery_settings = variable_get($form_name, $default_values);

    $gallery_settings = getGallerySettings(CDM_DATAPORTAL_SEARCH_GALLERY_NAME);

	$showMedia_taxa = $gallery_settings['cdm_dataportal_show_taxon_thumbnails'];
	$showMedia_synonyms = $gallery_settings['cdm_dataportal_show_synonym_thumbnails'];
	//$showMedia_taxa = variable_get('cdm_dataportal_findtaxa_show_taxon_thumbnails', 1);
	//$showMedia_synonyms = variable_get('cdm_dataportal_findtaxa_show_synonym_thumbnails', 0);

	$classification_uuid = get_taxonomictree_uuid_selected();

	// .. well, for sure not as performant as before, but better than nothing.
	$synonym_uuids = array();
	foreach($records as $taxon){
		if($taxon->class != "Taxon"){
			if(!array_key_exists($taxon->uuid, $synonym_uuids)){
				$synonym_uuids[$taxon->uuid] = $taxon->uuid;
			}
		}
	}
	// batch service not jet implemented:
	// $table_of_accepted = cdm_ws_property(CDM_WS_PORTAL_TAXON_ACCEPTED, join(',', $synonym_uuids));
	// thus ...
	$table_of_accepted = array();

	foreach($synonym_uuids as $synUuid){
		$table_of_accepted[$synUuid] = cdm_ws_get(CDM_WS_PORTAL_TAXON_ACCEPTED, array($synUuid, $classification_uuid));
	}

	$out = '<ul class="cdm_names" style="background-image: none;">';

	foreach($records as $taxon){
		// its a Taxon
		if($taxon->class == "Taxon"){
			$taxonUri = url(path_to_taxon($taxon->uuid));
			if(isset($taxon->name->nomenclaturalReference)){
				$referenceUri = url(path_to_reference($taxon->name->nomenclaturalReference->uuid));
			}
			$out .= '<li class="Taxon">'.theme('cdm_taxonName', $taxon->name, $taxonUri, $referenceUri);
			$out .= theme('cdm_annotations_as_footnotekeys', $taxon);

			if($showMedia_taxa){
				$out .= theme('cdm_taxon_list_thumbnails', $taxon);
			}
			$out .= '</li>';
		} else {
			// its a synonym
			$uuid = $taxon->uuid;
			$acceptedTaxa = $table_of_accepted[$uuid];
			if(count($acceptedTaxa) == 1){
				$acceptedTaxon = $acceptedTaxa[0];
				$taxonUri = theme('cdm_uri_to_synonym', $taxon->uuid, $acceptedTaxon->uuid, 'synonymy');
				if(isset($acceptedTaxon->name->nomenclaturalReference)){
					$referenceUri = url(path_to_reference($acceptedTaxon->name->nomenclaturalReference->uuid));
				}
				$out .= '<li class="Synonym">'.theme('cdm_taxonName', $taxon->name, $taxonUri, $referenceUri);
				$out .= theme('cdm_annotations_as_footnotekeys', $taxon);
				if($showMedia_synonyms){
					$out .= theme('cdm_taxon_list_thumbnails', $acceptedTaxon);
				}
				$out .= '</li>';
			} else {
				//TODO avoid using Ajax in the cdm_dynabox .... why?
				//TODO add media
				$out .= cdm_dynabox(
				  theme('cdm_taxonName', $taxon->name, null, null, false),
				  cdm_compose_url(CDM_WS_PORTAL_TAXON_ACCEPTED, array($taxon->uuid, $classification_uuid)),
				  'cdm_list_of_taxa',
				  'Click for accepted taxon');
			}
		}
	}

	$out .= '</ul>';
	RenderHints::popFromRenderStack();
	return $out;
}


function theme_cdm_related_taxon($taxon, $reltype_uuid = false){

	static $relsign_homo = 'â‰¡';
	static $relsign_hetero = '=';
	static $relsign_invalid = '&ndash;';

  $relsign = '';
	$name_prefix = '';
	$name_postfix = '';

	$skiptags = array();

	switch ($reltype_uuid){
		case UUID_HETEROTYPIC_SYNONYM_OF:
		case UUID_SYNONYM_OF:
			$relsign = $relsign_hetero;
			break;
		case UUID_HOMOTYPIC_SYNONYM_OF:
			$relsign = $relsign_homo;
			break;
		case UUID_MISAPPLIED_NAME_FOR:
		case UUID_INVALID_DESIGNATION_FOR:
			$skiptags[] = 'authors';
			$relsign = $relsign_invalid;
			$name_prefix = '"';
			$name_postfix = '"';
			break;
		default :
			$relsign = $relsign_invalid;
	}
	/*
	 * names with status invalid or nudum are to be displayed with the $relsign_invalid,
	 * these names appear at the end of all names in their homotypic group
	 * (ordered correctly by the java cdm_lib)
	 */
	if ( is_array($taxon->name->status)) {
		foreach($taxon->name->status as $status){
			if ($status->type->uuid == UUID_NOMENCLATURALSTATUS_TYPE_INVALID || $status->type->uuid == UUID_NOMENCLATURALSTATUS_TYPE_NUDUM){
				$relsign = $relsign_invalid;
			}
		}
	}

	// now rendering starts ..

	RenderHints::pushToRenderStack('related_taxon');

	//$taxonUri = url(path_to_taxon($taxon->uuid));
	if($taxon->name->nomenclaturalReference){
		$referenceUri = url(path_to_reference($taxon->name->nomenclaturalReference->uuid));
	}
	//printing the taxonName and the handling the special case of annotations
	$nameHtml = theme('cdm_taxonName', $taxon->name, $taxonUri, $referenceUri, true, false, $skiptags);
	$special_annotations_array = array();
	$special_annotations_array[] = $taxon->name;
	$special_annotations_array[] = $taxon;
	$nameHtml .= theme('cdm_annotations_as_footnotekeys', $special_annotations_array);

	//later homonym or trated as later homonym AND bloking names
	$from_name_relations = cdm_ws_get(CDM_WS_PORTAL_TAXON_FROM_NAMERELATIONS, $taxon->uuid);
	$to_name_relations = cdm_ws_get(CDM_WS_PORTAL_TAXON_TO_NAMERELATIONS, $taxon->uuid);
	//first the FROM RELS
	if ($from_name_relations){
		foreach($from_name_relations as $element){
			switch ($element->type->representation_L10n){
				case 'later homonym for':
					if(isset($name_relations_html)){
						$name_relations_html .= ' nec ' . l($element->toName->titleCache . ' ' .  substr($element->toName->nomenclaturalReference->datePublished->start, 0, 4),
						    'cdm_dataportal/name/' . $element->toName->uuid . '/' . $taxon->uuid . '/' . $element->toName->taxonBases[0]->uuid);
					}else{
						$name_relations_html = ' non ' . l($element->toName->titleCache . ' ' .  substr($element->toName->nomenclaturalReference->datePublished->start, 0, 4),
                        'cdm_dataportal/name/' . $element->toName->uuid . '/' . $taxon->uuid . '/' . $element->toName->taxonBases[0]->uuid)
						. ' ' . $element->toName->datePublished->start;
					}
					break;
				case 'treated as later homonym for':
					if(isset($name_relations_html)){
						$name_relations_html = ' nec ' . l($element->toName->titleCache . ' ' .  substr($element->toName->nomenclaturalReference->datePublished->start, 0, 4),
                              'cdm_dataportal/name/' . $element->toName->uuid);
					}else{
						$name_relations_html = ' non ' . l($element->toName->titleCache . ' ' .  substr($element->toName->nomenclaturalReference->datePublished->start, 0, 4),
					                   'cdm_dataportal/name/' . $element->toName->uuid);
					}
					break;
			}
		}
		//second the TO RELS
		if ($to_name_relations){
			foreach($to_name_relations as $element){
				switch ($element->type->representation_L10n){
					case 'blocking name for':
						if(isset($name_relations_html) ){
							$name_relations_html .= ' nec ' . l($element->fromName->titleCache . ' ' .  substr($element->fromName->nomenclaturalReference->datePublished->start, 0, 4),
                'cdm_dataportal/name/' . $element->fromName->uuid . '/' . $taxon->uuid . '/' . $element->fromName->taxonBases[0]->uuid);
						}else{
							$name_relations_html = ' non ' . l($element->fromName->titleCache . ' ' .  substr($element->fromName->nomenclaturalReference->datePublished->start, 0, 4),
                        'cdm_dataportal/name/' . $element->fromName->uuid . '/' . $taxon->uuid . '/' . $element->fromName->taxonBases[0]->uuid)
							. ' ' . $element->fromName->datePublished->start;
						}
						break;
				}
			}
		}
    //rels output
		if(isset($name_relations_html)){
			$name_relations_html = '['. $name_relations_html .']';
		}
	}
  //geneal output
	$out = '<span class="relation_sign">'.$relsign.'</span>'.$name_prefix . $nameHtml . $name_postfix . $name_relations_html;
	$out = uuid_anchor($taxon->uuid, $out);

	RenderHints::popFromRenderStack();

	return $out;
}

/**
 */
function theme_cdm_taxon_list_thumbnails($taxon){


	$gallery_settings = getGallerySettings(CDM_DATAPORTAL_SEARCH_GALLERY_NAME);
	$showCaption = $gallery_settings['cdm_dataportal_show_thumbnail_captions'];

	if($showCaption){
		$captionElements = array('title', 'rights');
	}

	$gallery_name = $taxon->uuid;

 	$mediaQueryParameters = array("type"=>"ImageFile");
	$galleryLinkUri = path_to_taxon($taxon->uuid).'/images';
	
	// cdm_dataportal_show_media = ???? TODO
	$selectShowMedia = variable_get('cdm_dataportal_show_media', 0);
	if ($selectShowMedia == 0){
		$mediaList = cdm_ws_get(CDM_WS_PORTAL_TAXON_MEDIA, array($taxon->uuid), queryString( $mediaQueryParameters ));
	}else{
		$mediaList = cdm_ws_get(CDM_WS_PORTAL_TAXON_SUBTREE_MEDIA, array($taxon->uuid), queryString( $mediaQueryParameters ));
	}

	$out .= theme('cdm_media_gallerie', $mediaList, $gallery_name ,
    	$gallery_settings['cdm_dataportal_media_maxextend'],
    	$gallery_settings['cdm_dataportal_media_cols'],
    	$gallery_settings['cdm_dataportal_media_maxRows'],
    	$captionElements, 'LIGHTBOX', null, $galleryLinkUri);

	return $out;
}



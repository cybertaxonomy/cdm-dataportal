<?php
/**
 * @file
 * Reference theming functions.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 */


/**
 * Creates a HTML representations for a CDM Reference instance..
 *
 * Used by:
 * - theme_cdm_typedesignations
 * - cdm_reference_pager
 * - cdm_taxonRelationships
 *
 * @param array $variables
 *   An associative array containing:
 *   - reference
 *   - microReference
 *   - doLink:
 *      Whether to create a link to the reference page, links to the reference URI or DOI are always
 *      created when this data is available
 *   - referenceStyle: the value "zoology" will cause a specific rendeting of the
 *      reference suitable for zoological publications.
 *
 * @return string
 *    the markup for the reference
 *
 * @ingroup themeable
 */
function theme_cdm_reference($variables) {
  $reference = $variables['reference'];
  $microReference = $variables['microReference'];
  $doLink = $variables['doLink'];
  $referenceStyle = $variables['referenceStyle'];

  if (!isset($reference->authorship)) {
    $author_team = cdm_ws_get(CDM_WS_REFERENCE_AUTHORTEAM, $reference->uuid);
  }
  else {
    $author_team = $reference->authorship;
  }

  if ($referenceStyle == "zoology") {
    $year = '';
    if (isset($reference->datePublished)) {
      $year = timePeriodToString($reference->datePublished, true, 'YYYY');
    }
    $citation = $author_team->titleCache . (!empty($year) ? '. ' . $year : '');
  }
  else {
    $citation = $reference->titleCache;
  }

  if (isset($doLink) && $doLink === TRUE) {
    $out = '<span class="reference">';
    $out .= l($citation, path_to_reference($reference->uuid), array(
      'attributes' => array(
        "class" => "reference",
      ),
      'absolute' => TRUE,
      'html' => TRUE,
    ));
    $out .= '</span>';
  }
  else {
    $out = '<span class="reference">' . $citation . '</span>';
  }

  if (!empty($microReference)) {
    $out .= ": " . $microReference;
  }

  if(isset($reference->doi)){
    $out .= cdm_doi($reference->doi);
  }

  if (isset($reference->uri)){
    $out .= cdm_external_uri($reference->uri);
  }

  return $out;
}

/**
 * @param $reference
 * @param $out
 * @return string
 */
function cdm_external_uri($uri, $iconified = true)
{
  if (!empty($uri)) {
    if($iconified){
      return l(font_awesome_icon_markup('fa-external-link', array('class' => array('superscript'))), $uri, array('html' => TRUE));
    } else {
      return l($uri, $uri);
    }
  }
}

/**
 * Creates markup for a CDM Doi entity.
 *
 * @param $doi
 *  The CDM DOI
 *
 * @return string
 *  Markup
 */
function cdm_doi($doi, $iconified = true) {

  if (!empty($doi)) {

    $doi_resolve_uri = 'http://doi.org/' . $doi->prefix;
    if (isset($doi->suffix)) {
      $doi_resolve_uri .= '/' . $doi->suffix;
    }
    if($iconified){
      return l(font_awesome_icon_markup('fa-external-link-square', array('class' => array('superscript'))), $doi_resolve_uri, array('html' => TRUE));
    } else {
      return l($doi_resolve_uri, $doi_resolve_uri);
    }
  }

}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_OriginalSource($variables) {
  $out = '';
  $source = $variables['source'];
  $do_link_to_reference = $variables['doLink'];
  $do_link_to_name_used_in_source = $variables['do_link_to_name_used_in_source'];

  if (isset($source->citation)) {
    $out = theme('cdm_reference', array(
        'reference' => $source->citation,
        'microReference' => $source->citationMicroReference,
        'doLink' => $do_link_to_reference,
    ));

    $name_in_source_render_array = compose_name_in_source($source, $do_link_to_name_used_in_source);
    if(!empty($name_in_source_render_array)) {
      $out .=  ' <span class="nameUsedInSource">(' . t('as') . ' ' . $name_in_source_render_array['#markup'] . ')</span>';
    }

    $id_with_namespace = '';
    if( isset($source->idNamespace) && $source->idNamespace ) {
      $id_with_namespace = $source->idNamespace . '/';
    }
    if( isset($source->idInSource) && $source->idInSource ) {
      $id_with_namespace .= $source->idInSource;
    } else {
      $id_with_namespace = NULL;
    }

    if($id_with_namespace){
      $out .=  ' <span class="idInSource">[' . $id_with_namespace . ']</span>';
    }
  }
  return $out;
}

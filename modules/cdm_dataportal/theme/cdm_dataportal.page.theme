<?php
/**
 * @file
 * Page theming functions.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 */

/**
 * Returns HTML for the default title of a taxon page.
 *  * The returned title is a formatted taxon name.
 *
 * @param array $variables
 *   An associative array containing:
 *   - taxon: The taxon name being formatted for the title.
 *   - uuid: UUID for the taxon.
 *
 * @return string
 *  Markup for a taxon page title
 *
 * @ingroup themeable
 */
function theme_cdm_taxon_page_title($variables) {
  $taxon = $variables['taxon'];
  RenderHints::pushToRenderStack('taxon_page_title');
  $referenceUri = '';
  $out = '';
  if (isset($taxon->name->nomenclaturalSource->citation)) {
    $referenceUri = url(path_to_reference($taxon->name->nomenclaturalSource->citation->uuid));
  }

  $out .= render_taxon_or_name($taxon, NULL, $referenceUri, FALSE);
  RenderHints::popFromRenderStack();

  return '<span class="' . $taxon->class . '">' . $out . '</span>';
}

/**
 * Returns HTML for the default title for a name page.
 *
 * The returned title is a formatted name.
 *
 * @param array $variables
 *   An associative array containing:
 *   - taxon_name: The taxon name object.
 *
 * @return string
 *  Markup for the title of a name page
 *
 * @ingroup themeable
 */
function theme_cdm_name_page_title($variables) {
  $taxon_name = $variables['taxon_name'];
  RenderHints::pushToRenderStack('name_page_title');

  $referenceUri = NULL;
  if (isset($taxon_name->nomenclaturalSource->citation)) {
    $referenceUri = url(path_to_reference($taxon_name->nomenclaturalSource->citation->uuid));
  }

  $out = '<span class="' . html_class_attribute_ref($taxon_name) . '">'
    . render_taxon_or_name($taxon_name, NULL, $referenceUri, FALSE)
    . '</span>';
  RenderHints::popFromRenderStack();
  return $out;
}



/**
 * Returns HTML for the given result page including a pager.
 *
 * @param array $variables
 *   An associative array containing:
 *   - pager: The cdmlib pager object containing the result set of cdm base
 *     objects (currently this function can only handle taxon instances =>
 *     TODO)
 *   - path: The target path for the pager links, this will usually point to
 *     'cdm_dataportal/search/results/taxon'
 *
 * @return string
 *  Markup for the result page
 *
 * @throws Exception
 *
 * @ingroup themeable
 */
function theme_cdm_search_taxa_results($variables)
{
  $pager = $variables['pager'];
  $path = $variables['path'];

  $freetextSearchResults = array();

  // If the pager contains records of SearchResults, extract the taxa and use
  // them as records instead.
  if (isset($pager->records[0]) && $pager->records[0]->class == "SearchResult") {
    $freetextSearchResults = $pager->records;
    $taxa = array();
    // $highlightedFragments = array();
    foreach ($pager->records as $searchResult) {
      if($searchResult->entity != null){
        $taxa[] = &$searchResult->entity;
      } else {
        drupal_set_message("NULL entry in search results: The search index may not be up to date with the data base.", 'error');
      }
      /*
       if(!isset($searchResult->fieldHighlightMap)){
      $searchResult->fieldHighlightMap = NULL;
      }
      $fragmentHighlighting[] = $searchResult->fieldHighlightMap;
      */
    }
    $pager->records = $taxa;
  }


  // Add thumbnails checkbox and refine search link.
  $out = '<div class="page_options">';
  if (isset($_REQUEST['ws'])) {
    if (cdm_dataportal_search_form_path_for_ws($_REQUEST['ws'])) {
      $out .= '<div id="backButton">' . l(t('Modify search'), cdm_dataportal_search_form_path_for_ws($_REQUEST['ws'])) . '</div>';
    }
  }
  if (variable_get(SEARCH_RESULTS_SHOW_THUMBNAIL_CHECKBOX, SEARCH_RESULTS_SHOW_THUMBNAIL_CHECKBOX_DEFAULT)) {
    $out .= '<form name="pageoptions"><div id="showThumbnails"><input class="showThumbnails" type="checkbox" name="showThumbnails" ' . (do_showThumbnails() == 1 ? 'checked="checked"' : '') . '> ' . t('Display image thumbnails') . '</div></form>';
  }
  $out .= '</div>';

  $classification = cdm_dataportal_searched_in_classification();


  if (  count(cdm_ws_fetch_all(CDM_WS_PORTAL_TAXONOMY)) > 1 ) { // FIXME use a count REST method for this!!!
    $out .= '<div id="search-summary">' . t('results for') . ' ';
    if ($classification != NULL) {
      $out .=  $classification->titleCache ;
    } else {
     $out .= t('any classification');
    }
    $out .= ':</div>';
  }

  // List results.
  if (isset($pager->records) && count($pager->records) > 0) {
    $out .= '<div id="search_results">';
    $list_of_taxa = compose_list_of_taxa($pager->records, $freetextSearchResults, $classification === NULL);
    $out .= drupal_render($list_of_taxa);
    $out .= '</div>';
    $out .= theme('cdm_pager', array(
        'pager' => $pager,
        'path' => $path,
        'parameters' => $_REQUEST,
    ));
  } else {
    $out .= '<h4 class="error">' . t('Sorry, no matching entries found.') . '</h4>';
  }
  return $out;
}


/**
 * Returns HTML for the given result page including a pager.
 *
 * @param array $variables
 *   An associative array containing:
 *   - pager: TODO
 *   - path: The target path for the pager links, this will usually point to
 *     'cdm_dataportal/search/results/taxon'
 *
 * @return string
 *  Markup for the result page
 *
 * @throws Exception
 *
 * @ingroup themeable
 */
function theme_cdm_search_specimen_results($variables)
{
    $pager = $variables['pager'];
    $path = $variables['path'];



    // Add thumbnails checkbox and refine search link.
    $out = '<div class="page_options">';
    //if (isset($_REQUEST['ws'])) {
     //   if (cdm_dataportal_search_form_path_for_ws($_REQUEST['ws'])) {
     //       $out .= '<div id="backButton">' . l(t('Modify search'), cdm_dataportal_search_form_path_for_ws($_REQUEST['ws'])) . '</div>';
     //   }
    //}
    if (variable_get(SEARCH_RESULTS_SHOW_THUMBNAIL_CHECKBOX, SEARCH_RESULTS_SHOW_THUMBNAIL_CHECKBOX_DEFAULT)) {
        $out .= '<form name="pageoptions"><div id="showThumbnails"><input class="showThumbnails" type="checkbox" name="showThumbnails" ' . (do_showThumbnails() == 1 ? 'checked="checked"' : '') . '> ' . t('Display image thumbnails') . '</div></form>';
    }
    $out .= '</div>';






    // List results.
    if (isset($pager->data) ) {
        $data = json_decode($pager->data, true);
        $out .= '<div id="search_results">';
        $list_of_result = compose_table_of_blast_result($data);
        $out .= $list_of_result;
        $out .= '</div>';
       // $out .= theme('cdm_pager', array(
       //     'pager' => $pager,
       //     'path' => $path,
       //     'parameters' => $_REQUEST,
        //));
    } else {
        $out .= '<h4 class="error">' . t('Sorry, no matching entries found.') . '</h4>';
    }
    return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_page($variables) {

  $media = $variables['media'];
  $mediarepresentation_uuid = $variables['mediarepresentation_uuid'];
  $partId = $variables['partId'];
  $out = '';

  // Determine which representation and which part to show
  $active_representation_index = 0;

  if (!$mediarepresentation_uuid) {
    // no representation requested by the method parameters, find the best one
    $representations = cdm_preferred_media_representations($media, array('image/png', 'image/jpeg', 'image/gif'), null, null);
    if($representations  && count($representations) > 0){
      $preferred_representation = array_shift($representations);
      $mediarepresentation_uuid = $preferred_representation->uuid;
    }
  }

  if($mediarepresentation_uuid){
    foreach ($media->representations as $representation) {
      if ($representation->uuid == $mediarepresentation_uuid) {
        break;
      }
      $active_representation_index++;
    }
  }


  $active_part_index = 0;
  if (is_uuid($partId)) {
    foreach ($media->representations[$active_representation_index]->parts as $part) {
      if ($part->uuid == $partId) {
        break;
      }
      $active_part_index++;
    }
  }
  else if(is_numeric($partId)){
    $active_part_index = $partId;
  }

  $media_metadata = read_media_metadata($media);
  $title = 'Media';
  if($media_metadata['title']){
    $title .= ' ' .$media_metadata['title'];
  } else if(isset($media_metadata['filename'])){
    $title .= ' (' .$media_metadata['filename'] .')';
  }

  $imageMaxExtend = variable_get('image-page-maxextend', 400);

  drupal_set_title($title, PASS_THROUGH);

  $out .= '<div class="media cdm_media_viewer_image">';

  if(preg_match('/cdm_dataportal\/taxon\//', $_SERVER['HTTP_REFERER']) ){
    if(variable_get('cdm_dataportal_taxonpage_tabs', 1)){
      // taxon page with tabs
      $out .= '<div id="backToGalleryButton">' . l(t('Back to images'), $_SESSION['cdm']['last_gallery']) . '</div>';
    } else {
      // tabless mode
      $out .= '<div id="backToGalleryButton">' . l(t('Back to taxon page'), $_SESSION['cdm']['last_gallery']) . '</div>';
    }
  }
  $out .= '<div class="viewer">';
  $out .= cdm_openlayers_image($media->representations[$active_representation_index]->parts[$active_part_index], $imageMaxExtend);
  $out .= '</div>';

  // General media metadata.
  $metadataToPrint = theme('cdm_media_caption', array('media' => $media, 'sources_as_content' => true));
  $out .= $metadataToPrint;

  $cdm_standard_image_viewer_settings = get_array_variable_merged(CDM_STANDARD_IMAGE_VIEWER, CDM_STANDARD_IMAGE_VIEWER_DEFAULT);
  if ($cdm_standard_image_viewer_settings['media_representation_details_enabled'] == 1){
    // Tabs for the different representations.
    // Representation(-part) specific metadata.
    $thumbnailMaxExtend = 100;
    $out .= '<h3>' .t('Media representations') .'</h3><ul id="media-representations">';
    $r_i = 0;
    foreach ($media->representations as $representation) {
      $out .= '<li><strong>'. t('Representation') . ' ' . $r_i . "</strong> ($representation->mimeType)" ;
      // parts
      $active_part_index = 0;
      $table_class_attribute = '';
      if($partIdx == $active_part_index && $active_representation_index == $r_i ){
        $table_class_attribute = 'class="active"';
      }
      $out .= "<table $table_class_attribute>";
      foreach ($representation->parts as $part) {
        $out .= '<tr><th>' . t('Part') . ' ' . ($active_part_index + 1) . '</th></tr><tr><td>';
        switch ($part->class) {
          case 'ImageFile':
            $out .= $part->width . 'x' . $part->height . ' px - ' . $part->size . ' kB';
            break;
          case 'AudioFile':
          case 'MovieFile':
            $out .= t('Duration') . ': ' . $part->duration . 's - ' . $part->size . ' kB';
            break;
          default:
            $out .= $part->size . 'k';
        }

        $out .= '</td><td><a href="' . url(path_to_media($media->uuid, $representation->uuid, $active_part_index)) . '">'
          . cdm_media_gallerie_entry_image($part, $thumbnailMaxExtend, TRUE);
        $active_part_index++;
      }
      $out .= '</table>';
      $out .=  '</li>';
      $r_i++;
    }
    $out .= '</ul>';
  }

  $out .= '</div>';
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_polytomousKey_page($variables) {
  $polytomousKey = $variables['polytomousKey'];
  drupal_set_title($polytomousKey->titleCache, PASS_THROUGH);

  $out = theme("cdm_IdentificationKey", array(
    'identificationKey' => $polytomousKey,
    'doLinkToKeyPage' => FALSE,
    'showIdentificationKeyTitle' => FALSE,
    ));

  // Key nodes in linked style.
  $out .= theme('cdm_polytomousKey', array('polytomousKey' => $polytomousKey));
  /*
   * FIXME implement node type for keys !!!
   * (wrapping the content in the cdm_dataportal.node becomes obsolete then).
   */
  return '<div id="identificationKey">' . $out . '</div>';
}
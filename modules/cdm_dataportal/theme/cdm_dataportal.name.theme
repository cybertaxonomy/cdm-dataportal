<?php
/**
 * @file
 * Name theming functions.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_homotypicSynonymLine($variables) {
  $taxon = $variables['taxon'];
  $out = '';
  $out .= '<li class="synonym">' . cdm_related_taxon($taxon, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';

  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_heterotypicSynonymyGroup($variables) {
  $homotypical_group = $variables['homotypicalGroup'];
  RenderHints::pushToRenderStack('heterotypicSynonymyGroup');

  $out = '';
  $out = '<div class="heterotypic-synonymy-group"><ul class="heterotypicSynonymyGroup">';
  $footnoteListKey = (isset($homotypical_group[0]) ? $homotypical_group[0]->uuid : 'NULL');
  RenderHints::setFootnoteListKey($footnoteListKey);

  $type_designations= type_designations_for_synonymy_group($homotypical_group);

  $is_first_entry = TRUE;
  foreach ($homotypical_group as $synonym) {
    if ($is_first_entry) {
      $is_first_entry = FALSE;
      // Is first list entry.
      $out .= '<li class="firstentry synonym">' . cdm_related_taxon($synonym, UUID_HETEROTYPIC_SYNONYM_OF) . '</li>';
    }
    else {
      $out .= '<li class="synonym">' . cdm_related_taxon($synonym, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';
    }
  }

  if (count($type_designations) > 0) {
    $out .= render_type_designations($type_designations);
  }
  $out .= '</ul>';

  // ------- footnotes ------- //
  $out .= '<ul class="footnotes">';
  $out .= render_footnotes(RenderHints::getFootnoteListKey(), 'li');
  $out .= '</ul>';

  $out .= '</div>';

  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * Renders the homotypic synonymy group for the accepted taxon in the synonymy.
 *
 * Foonotes of the accepted taxon will also be rendered here in the
 * homotypic synonymy group even if the synonymList or prependedSynonyms are
 * empty. Therefore  the homotypic group and accepted taxon share the  same
 * footnote key.
 *
 * @param $variables
 *   an associative array:
 *   - synonymList: the list of cdm Synonym entities
 *   - accepted_taxon_uuid: the uuid of the accepted taxon
 *   - prependedSynonyms: further synonyms which should be prepended
 *      before the actual list of synonyms
 *
 * @return string the markup
 * @throws \Exception
 */
function theme_cdm_homotypicSynonymyGroup($variables) {
  $synonymList = $variables['synonymList'];
  $accepted_taxon_name_uuid = $variables['accepted_taxon_name_uuid'];
  $prependedSynonyms = $variables['prependedSynonyms'];

  RenderHints::pushToRenderStack('homotypicSynonymyGroup');

  $type_designations_in_group = NULL;

  $out = '<div class="homotypic-synonymy-group">';

  $type_designations = type_designations_for_synonymy_group($synonymList, $accepted_taxon_name_uuid);

  if (count($type_designations) > 0 || is_array($prependedSynonyms) || is_array($synonymList)) {
    $out .= '<ul class="homotypicSynonyms">';
    if (!empty($prependedSynonyms)) {
      foreach ($prependedSynonyms as $taxon) {
        $out .= '<li class="synonym">' . cdm_related_taxon($taxon, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';
      }
    }

    if (isset($synonymList[0])) {
      foreach ($synonymList as $synonym) {
        $out .= '<li class="synonym">' . cdm_related_taxon($synonym, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';
      }
    }

    if (count($type_designations) > 0) {
      $out .= render_type_designations($type_designations);
    }

  }

  $out .= '</ul>';

  // ------- footnotes ------- //

  // all foonotes of the homotypic group and also of the accepted taxon are
  // rendered here, both should have the same footnote key
  $out .= '<ul class="footnotes">';
  $out .= render_footnotes(RenderHints::getFootnoteListKey(), 'li');
  $out .= '</ul>';

  $out .= '</div>';


  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * TODO: This needs to be adapted to the new DTO implementation
 * Renders the homotypic synonymy group for the accepted taxon in the synonymy.
 *
 * Foonotes of the accepted taxon will also be rendered here in the
 * homotypic synonymy group even if the synonymList or prependedSynonyms are
 * empty. Therefore  the homotypic group and accepted taxon share the  same
 * footnote key.
 *
 * @param $variables
 *   an associative array:
 *   - synonymList: the list of cdm Synonym entities
 *   - accepted_taxon_uuid: the uuid of the accepted taxon
 *   - prependedSynonyms: further synonyms which should be prepended
 *      before the actual list of synonyms
 *
 * @return string the markup
 * @throws \Exception
 */
function theme_cdm_new_homotypicSynonymyGroup($variables) {
  $synonymGroup= $variables['synonyms'];
  $synonymList = $synonymGroup -> synonyms -> items;
  $accepted_taxon_name_uuid = $variables['accepted_taxon_name_uuid'];
  //$prependedSynonyms = $variables['prependedSynonyms'];

  RenderHints::pushToRenderStack('homotypicSynonymyGroup');

  $type_designations_in_group = NULL;

  $out = '<div class="homotypic-synonymy-group">';

  //$type_designations = type_designations_for_synonymy_group($synonymList, $accepted_taxon_name_uuid);
  $type_designations = $synonymGroup -> taggedText;
  if ((isset($type_designations) && count($type_designations) > 0)|| is_array($synonymList)) {
    $out .= '<ul class="homotypicSynonyms">';
    //if (!empty($prependedSynonyms)) {
    //  foreach ($prependedSynonyms as $taxon) {
    //    $out .= '<li class="synonym">' . cdm_related_taxon($taxon, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';
    //  }
    //}

    if (isset($synonymList[0])) {
      foreach ($synonymList as $synonym) {
        $out .= '<li class="synonym">' . cdm_related_taxon($synonym, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';
      }
    }

    if (isset($type_designations) && count($type_designations) > 0) {
      $out .= render_type_designations($type_designations);
    }

  }

  $out .= '</ul>';

  // ------- footnotes ------- //

  // all foonotes of the homotypic group and also of the accepted taxon are
  // rendered here, both should have the same footnote key
  $out .= '<ul class="footnotes">';
  $out .= render_footnotes(RenderHints::getFootnoteListKey(), 'li');
  $out .= '</ul>';

  $out .= '</div>';


  RenderHints::popFromRenderStack();
  return $out;
}
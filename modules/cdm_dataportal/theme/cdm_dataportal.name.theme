<?php
/**
 * @file
 * Name theming functions.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 */

/**
 * Return HTML for the lectotype citation with the correct layout.
 *
 * This function prints the lectotype citation with the correct layout.
 * Lectotypes are renderized in the synonymy tab of a taxon if they exist.
 *
 * @param mixed $typeDesignation
 *   Object containing the lectotype citation to print.
 *
 * @return string
 *   Valid html string.
 */
function type_designation_citation_layout($typeDesignation, $footnote_separator = ',') {
  $res = '';
  $citation = $typeDesignation->citation;
  $pages = $typeDesignation->citationMicroReference;
  if(isset($typeDesignation->typeStatus->uuid) && isset($typeDesignation->typeStatus->representation_L10n)) {
    if ( $typeDesignation->typeStatus->uuid == UUID_NTD_ORIGINAL_DESIGNATION || $typeDesignation->typeStatus->uuid == UUID_NTD_MONOTYPY) {
      $res = ' (' . $typeDesignation->typeStatus->representation_L10n . ')';
      return $res;
    }
  }

  if ($citation) {
    // $type = $typeDesignation_citation->type;
    $year = isset($citation->datePublished->start) ? substr($citation->datePublished->start, 0, 4) : '';
    $author = isset($citation->authorship->titleCache) ? $citation->authorship->titleCache : '';
    $res .= ' (designated by ';
    $res .= $author;
    $res .= ($year ? ' ' . $year : '');
    $res .= ($pages ? ': ' . $pages : '');
    // $res .= ')';

    // footnotes should be rendered in the parent element so we
    // are relying on the FootnoteListKey set there
    $fkey_typeDesignation = FootnoteManager::addNewFootnote(RenderHints::getFootnoteListKey(), $typeDesignation->citation->titleCache);
    $res .= theme('cdm_footnote_key', array(
      'footnoteKey' => $fkey_typeDesignation,
      'separator' => $footnote_separator,
      'highlightable' => TRUE,
      'separator_off' => TRUE,
    )) . ')';
  }
  return $res;
}


/**
 * Renders and array of CDM TypeDesignations
 *
 * @param array $variables
 *   - typeDesignations: an array of cdm TypeDesignation entities to render
 */
function theme_cdm_typedesignations($variables) {
  $type_designations = $variables['typeDesignations'];
  $enclosing_tag = $variables['enclosing_tag'];
  $element_tag = $variables['element_tag'];
  $link_to_specimen_page = $variables['link_to_specimen_page'];

  // need to add element to render path since type designations
  // need other name render template
  RenderHints::pushToRenderStack('typedesignations');

  $out = '<' . $enclosing_tag .' class="typeDesignations">';
  $typeDesignation_footnotes = FALSE;
  $is_lectotype = FALSE;
  $specimen_type_designations = array();
  $separator = ',';

  foreach ($type_designations as $type_designation) {
    if ($type_designation->class == 'SpecimenTypeDesignation') {
      // --> SpecimenTypeDesignations should be ordered. Collect theme here only.
      $specimen_type_designations[] = $type_designation;
    }
    else {
      // --> NameTypeDesignations
      // It is a lectotype?
      if (isset($type_designation->typeStatus->uuid) && $type_designation->typeStatus->uuid == UUID_NTD_LECTOTYPE) {
        $is_lectotype = TRUE;
      }
      if ($type_designation->notDesignated) {
        $out .= '<'. $element_tag .' class="' . html_class_attribute_ref($type_designation) . '"><span class="type-status">' . ($is_lectotype ? 'Lectotype' : 'Type') . '</span>: ' . t('not designated') . '</'. $element_tag .'>';
      }
      elseif ($type_designation->typeName) {
        $link_to_name_page = url(path_to_name($type_designation->typeName->uuid));
        $out .= '<'. $element_tag .' class="' . html_class_attribute_ref($type_designation) . '"><span class="type-status">' . ($is_lectotype ? 'Lectotype' : 'Type') . '</span>';

        if ($type_designation->citation) {
          $out .= type_designation_citation_layout($type_designation, $separator);

        }
        $referenceUri = '';
        if (isset($type_designation->typeName->nomenclaturalReference)) {
          $referenceUri = url(path_to_reference($type_designation->typeName->nomenclaturalReference->uuid));
        }
        $out .= ': ' . render_taxon_or_name($type_designation->typeName, $link_to_name_page, $referenceUri, TRUE, TRUE);
      }
    }
  }

  if (!empty($specimen_type_designations)) {
    // Sorting might be different for dataportals so this has to be
    // parameterized.
    usort($specimen_type_designations, "compare_specimen_type_designation");
    foreach ($specimen_type_designations as $type_designation) {
      $typeReference = '';

      if (!empty($type_designation->citation)) {

        $citation_footnote_str = theme('cdm_reference', array('reference' => $type_designation->citation, 'doIconLink' => true));
        $author_team = cdm_ws_get(CDM_WS_REFERENCE_AUTHORTEAM, $type_designation->citation->uuid);

        if (isset($author_team->titleCache)) {
          $year = @timePeriodToString($type_designation->citation->datePublished, true, 'YYYY');
          $authorteam_str = $author_team->titleCache . ($year ? ' ' : '') . $year;
          if ($authorteam_str == $type_designation->citation->titleCache) {
            $citation_footnote_str = '';
          }
        } else {
          $authorteam_str = $citation_footnote_str;
          // no need for a footnote in case in case it is used as replacement for missing author teams
          $citation_footnote_str = '';
        }

        // to be registered a typedesignation MUS HAVE a citation, so it is save to handle the
        // Registration output in if condition checking if the citation is present
        $registration_markup = render_registrations($type_designation->registrations);
        $citation_footnote_str .= ($citation_footnote_str ? ' ' : '') . $registration_markup;

        $footnote_key_markup = '';
        if ($citation_footnote_str) {
          // footnotes should be rendered in the parent element so we
          // are relying on the FootnoteListKey set there
          $_fkey2 = FootnoteManager::addNewFootnote(RenderHints::getFootnoteListKey(), $citation_footnote_str);
          $footnote_key_markup = theme('cdm_footnote_key', array(
            'footnoteKey' => $_fkey2,
            'separator' => $separator,
            'highlightable' => TRUE,
            'separator_off' => TRUE,
          ));

        }

        $typeReference .= '&nbsp;(' . t('designated by') . '&nbsp;<span class="typeReference">' . $authorteam_str . '</span>';
        if (!empty($type_designation->citationMicroReference)) {
          $typeReference .= ': ' . trim($type_designation->citationMicroReference);
        }
        $typeReference .= $footnote_key_markup . ')';

      }

      $out .= '<'. $element_tag .' class="' . html_class_attribute_ref($type_designation) . '">';
      $out .= '<span class="type-status">'
        . ((isset($type_designation->typeStatus->representation_L10n)) ? $type_designation->typeStatus->representation_L10n : t('Type')) . '</span>'
        . $typeReference;


      $derivedUnitFacadeInstance = null;
      if (isset($type_designation->typeSpecimen)) {
        $derivedUnitFacadeInstance = cdm_ws_get(CDM_WS_DERIVEDUNIT_FACADE, $type_designation->typeSpecimen->uuid);
      }

      if (isset($derivedUnitFacadeInstance)) {
        $specimen_markup = $derivedUnitFacadeInstance->titleCache;
        if($link_to_specimen_page && isset($derivedUnitFacadeInstance->specimenLabel) && $derivedUnitFacadeInstance->specimenLabel){
          $specimen_markup = str_replace($derivedUnitFacadeInstance->specimenLabel, l($derivedUnitFacadeInstance->specimenLabel, path_to_specimen($type_designation->typeSpecimen->uuid)), $specimen_markup);
        }
        $out .= ': <span class="' . html_class_attribute_ref($type_designation->typeSpecimen) . '">'
           . $specimen_markup
           . '</span>'; // . ': ' . theme('cdm_specimen', array('specimenTypeDesignation' => $derivedUnitFacadeInstance));
        if(isset($derivedUnitFacadeInstance->preferredStableUri)){
          $out .= ' ' . l($derivedUnitFacadeInstance->preferredStableUri, $derivedUnitFacadeInstance->preferredStableUri, array('absolute' => true));
        }
      }

      // Footnotes for collection acronyms.
      // footnotes should be rendered in the parent element so we
      // are relying on the FootnoteListKey set there
      $_fkey = FootnoteManager::addNewFootnote(
        RenderHints::getFootnoteListKey(),
        (isset($derivedUnitFacadeInstance->collection->titleCache) ? $derivedUnitFacadeInstance->collection->titleCache : FALSE)
      );
      $out .= theme('cdm_footnote_key', array('footnoteKey' => $_fkey, 'separator' => $separator));
      $out .= '</'. $element_tag .'>';

    }
  }

  $out .= '</' . $enclosing_tag .'>';

  RenderHints::popFromRenderStack();

  return $out;
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_homotypicSynonymLine($variables) {
  $taxon = $variables['taxon'];
  $out = '';
  $out .= '<li class="synonym">' . cdm_related_taxon($taxon, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';

  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_heterotypicSynonymyGroup($variables) {
  $homotypical_group = $variables['homotypicalGroup'];
  RenderHints::pushToRenderStack('heterotypicSynonymyGroup');

  $out = '';
  $out = '<div class="heterotypic-synonymy-group"><ul class="heterotypicSynonymyGroup">';
  $footnoteListKey = (isset($homotypical_group[0]) ? $homotypical_group[0]->uuid : 'NULL');
  RenderHints::setFootnoteListKey($footnoteListKey);

  $type_designations= type_designations_for_synonymy_group($homotypical_group);

  $is_first_entry = TRUE;
  foreach ($homotypical_group as $synonym) {
    if ($is_first_entry) {
      $is_first_entry = FALSE;
      // Is first list entry.
      $out .= '<li class="firstentry synonym">' . cdm_related_taxon($synonym, UUID_HETEROTYPIC_SYNONYM_OF) . '</li>';
    }
    else {
      $out .= '<li class="synonym">' . cdm_related_taxon($synonym, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';
    }
  }

  if (count($type_designations) > 0) {
    $out .= theme('cdm_typedesignations', array('typeDesignations' => $type_designations));
  }
  $out .= '</ul>';

  // ------- footnotes ------- //
  $out .= '<ul class="footnotes">';
  $out .= theme('cdm_annotation_footnotes', array('footnoteListKey' => RenderHints::getFootnoteListKey(), 'enclosingTag' => 'li'));
  $out .= theme('cdm_footnotes', array('footnoteListKey' => RenderHints::getFootnoteListKey(), 'enclosingTag' => 'li'));
  $out .= '</ul>';

  $out .= '</div>';

  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * Renders the homotypic synonymy group for the accepted taxon in the synonymy.
 *
 * Foonotes of the accepted taxon will also be rendered here in the
 * homotypic synonymy group even if the synonymList or prependedSynonyms are
 * empty. Therefore  the homotypic group and accepted taxon share the  same
 * footnote key.
 *
 * @param $variables
 *   an associative array:
 *   - synonymList: the list of cdm Synonym entities
 *   - accepted_taxon_uuid: the uuid of the accepted taxon
 *   - prependedSynonyms: further synonyms which should be prepended
 *      before the actual list of synonyms
 */
function theme_cdm_homotypicSynonymyGroup($variables) {
  $synonymList = $variables['synonymList'];
  $accepted_taxon_name_uuid = $variables['accepted_taxon_name_uuid'];
  $prependedSynonyms = $variables['prependedSynonyms'];

  RenderHints::pushToRenderStack('homotypicSynonymyGroup');

  $type_designations_in_group = NULL;

  $out = '<div class="homotypic-synonymy-group">';

  $type_designations = type_designations_for_synonymy_group($synonymList, $accepted_taxon_name_uuid);

  if (count($type_designations) > 0 || is_array($prependedSynonyms) || is_array($synonymList)) {
    $out .= '<ul class="homotypicSynonyms">';
  if (!empty($prependedSynonyms)) {
    foreach ($prependedSynonyms as $taxon) {
      $out .= '<li class="synonym">' . cdm_related_taxon($taxon, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';
    }
  }


  if (isset($synonymList[0])) {
    foreach ($synonymList as $synonym) {
      $out .= '<li class="synonym">' . cdm_related_taxon($synonym, UUID_HOMOTYPIC_SYNONYM_OF) . '</li>';
    }
  }

  if (count($type_designations) > 0) {
    $out .= theme('cdm_typedesignations', array('typeDesignations' => $type_designations));
  }

  }

  $out .= '</ul>';

  // ------- footnotes ------- //

  // all foonotes of the homotypic group and also of the accepted taxon are
  // rendered here, both should have the same footnote key
  $out .= '<ul class="footnotes">';
  $out .= theme('cdm_annotation_footnotes', array('footnoteListKey' => RenderHints::getFootnoteListKey(), 'enclosingTag' => 'li'));
  $out .= theme('cdm_footnotes', array('footnoteListKey' => RenderHints::getFootnoteListKey(), 'enclosingTag' => 'li'));
  $out .= '</ul>';

  $out .= '</div>';


  RenderHints::popFromRenderStack();
  return $out;
}

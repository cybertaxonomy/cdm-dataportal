<?php
/**
 * @file
 * Media theming functions.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function media_content_type_dir($media_representation, $default = FALSE) {
  if ($media_representation->mimeType) {
    return substr($media_representation->mimeType, 0, stripos($media_representation->mimeType, '/'));
  }
  else {
    return $default;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function getimagesize_remote($image_url) {
  $response = cdm_http_request($image_url);
  $contents = NULL;
  if (isset($response->data)) {
    $contents = $response->data;
  } else {
    return FALSE;
  }

  $im = @ImageCreateFromString($contents); // Using @ to avoid php warnings.
  if (!$im) {
    return FALSE;
  }
  $gis[0] = ImageSX($im);
  $gis[1] = ImageSY($im);
  // Array member 3 is used below to keep with current getimagesize standards.
  $gis[3] = "width={$gis[0]} height={$gis[1]}";
  ImageDestroy($im);
  return $gis;
}

/**
 * Creates the markup for the media associated a DescriptionElement instance.
 *
 * @param $descriptionElement
 *    the DescriptionElement instance
 * @param $mimeTypePreference array
 *    An array of mime type strings. the order of the mimetpes is the oerder of preference.
 *    E.g.: array('application/pdf','image/jpeg')
 *
 * @return string
 *    The markup
 */
function cdm_description_element_media($descriptionElement, $mimeTypePreference) {

  $out = '';

  _add_js_thickbox();

  $feature = $descriptionElement->feature;
  $medias = $descriptionElement->media;

  foreach ($medias as $media) {
    $prefRepresentations = cdm_preferred_media_representations($media, $mimeTypePreference, 300, 400);
    $mediaRepresentation = array_shift($prefRepresentations);
    if ($mediaRepresentation) {

      $contentTypeDirectory = media_content_type_dir($mediaRepresentation);

      $out .= theme('cdm_media_mime_' . $contentTypeDirectory, array('mediaRepresentation' => $mediaRepresentation, 'feature' => $feature));
    }
    else {
      // Media has empty or corrupt representation
      if(user_is_logged_in()){
        drupal_set_message('The media entity (' . l($media->uuid, path_to_media($media->uuid)) .') has empty or corrupt representation parts. Maybe the URI is empty.' , 'warning');
      }
    }
  }
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_mime_application($variables) {
  $mediaRepresentation = $variables['mediaRepresentation'];
  $feature = $variables['feature'];
  $out = '';
  foreach ($mediaRepresentation->parts as $part) {
    $attributes = array(
      'title' => theme('cdm_feature_name', array('feature_name' => $feature->representation_L10n)),
      'target' => '_blank',
    );
    /*
    $attributes = array('title'=>$feature->representation_L10n,'target'=>'_blank');
    $attributes = array('title'=>'original publication', 'target'=>'_blank');
    */
    $out .= l(media_feature_icon($feature, $part->uri), $part->uri, array(
      'attributes' => $attributes,
      'absolute' => TRUE,
      'html' => TRUE,
    ));
  }
  return $out;
}


/**
 * Creates the markup for a CDM Media instance.
 *
 * (This method is currently only called from within theme_cdm_media())
 *
 * @param $variables
 *    An associative array
 * @return string
 *    The markup
 */
function theme_cdm_media_mime_image($variables) {
  $media_representation = $variables['mediaRepresentation'];
  $feature = $variables['feature'];
  $out = '';
  // TODO thickbox is not used anymore -> delete?
  $attributes = array(
    'class' => 'thickbox',
    'rel' => 'representation-' . $media_representation->uuid,
    'title' => $feature->representation_L10n,
  );
  for ($i = 0; $part = $media_representation->parts[$i]; $i++) {
    if ($i == 0) {
      $out .= l(media_feature_icon($feature, $part->uri), $part->uri, array(
        'attributes' => $attributes,
        'absolute' => TRUE,
        'html' => TRUE,
      ));
    }
    else {
      $out .= l('', $part->uri, array(
        'attributes' => $attributes,
        'absolute' => TRUE,
      ));
    }
  }
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_mime_text($variables) {
  $representation = $variables['mediaRepresentation'];
  $feature = $variables['feature'];
  $out = '';
  if (!empty($representation->parts)) {
    foreach ($representation->parts as $part) {
      $attributes = array(
        'title' => theme('cdm_feature_name', array('feature_name' => $feature->representation_L10n)),
        'target' => '_blank',
      );
      // $attributes = array('title'=>t('original publication'),
      // 'target'=>'_blank');
      $out .= l(media_feature_icon($feature, $part->uri), $part->uri, array(
        'attributes' => $attributes,
        'absolute' => TRUE,
        'html' => TRUE,
      ));
    }
  }
  return $out;
}


/**
 * Theme function for captions of media elements. This method is usually called from
 * within the theme_cdm_media_gallerie() function or indirectly via AHAH.
 *
 * @param array $variables
 *   an associative array with the following elements:
 *   - 'media': the cdm media object to show the captions for
 *   - 'elements':
 *         an array which defining the caption elements to show up
 *         example:
 *          Show 'title', 'description', 'file', 'filename' in the caption:
 *          array('title', 'description', 'file', 'filename')
 *
 * @return string
 *   the themed html output
 *
 * TODO turn into compose method
 */
function theme_cdm_media_caption($variables) {
  $media = $variables['media'];
  $elements = $variables['elements'];
  $media_metadata = read_media_metadata($media);

  $doTitle = !$elements || array_search('title', $elements) !== FALSE;
  $doDescription = !$elements || array_search('description', $elements) !== FALSE;
  $doArtist = !$elements || array_search('artist', $elements) !== FALSE;
  $doLocation = !$elements || array_search('location', $elements) !== FALSE;
  $doRights = !$elements || array_search('rights', $elements) !== FALSE;

  $descriptionPrefix = "";

  $out = '<dl class="media-caption">';
  // Title.
  if ($doTitle) {
    if ($media_metadata['title']) {
      $out .= '<dt class = "title">' . t('Title')  . ':'. '</dt> <dd class = "title">' . $media_metadata['title'] . '</dd>';
      $descriptionPrefix = "- ";
    }
    elseif (!($doDescription && $media_metadata['description'])) {
      // Use filename as fallback option if no description will be shown.
      $out .= '<dt class = "title">' . t('Title') . '</dt> <dd class = "title">' . $media_metadata['filename'] . '</dd>';
      $descriptionPrefix = "- ";
    }
  }
  // Description.
  if ($media_metadata['description'] && $doDescription) {
    $out .= '<dt class = "description">' . t('Description')  . ':'. '</dt> <dd class = "description">' . $descriptionPrefix . $media_metadata['description'] . '</dd>';
  }
  // Artist.
  if ($media_metadata['artist'] && $doArtist) {
    $out .= '<dt class = "artist">' . t('Artist')  . ':' . '</dt> <dd class = "artist">' . $media_metadata['artist'] . '</dd>';
  }
  // Location.
  if ($doLocation) {
    $location = '';
    $location .= $media_metadata['location']['sublocation'];
    if ($location && $media_metadata['location']['city']) {
      $location .= ', ';
    }
    $location .= $media_metadata['location']['city'];
    if ($location && $media_metadata['location']['province']) {
      $location .= ', ';
    }
    $location .= $media_metadata['location']['province'];
    if ($location && $media_metadata['location']['country']) {
      $location .= ' (' . $media_metadata['location']['country'] . ')';
    }
    else {
      $location .= $media_metadata['location']['country'];
    }
    if ($location) {
      $out .= '<dt class = "location">' . t('Location') . ':' . '</dt> <dd class = "location">' . $location . '</dd>';
    }
  }
  // Rights.
  if ($doRights) {
    $rights_render_item = array(
      '#theme' => 'description_list',
      '#groups' => cdm_rights_as_dl_groups($media_metadata['rights'])
    );
   $out .= drupal_render($rights_render_item);
  }
  // TODO add all other metadata elements generically.
  $out .= '</dl>';
  // Return value,
  return $out;
}


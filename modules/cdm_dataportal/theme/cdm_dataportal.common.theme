<?php
/**
 * @file
 * Common Theming functions.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 */

define('FOOTNOTE_ANNOTATIONS', 'annotations');

/**
 * Get the true path to the root of the Drupal site.
 *
 * Better than using DOCUMENT_ROOT and base_path().
 */
function absolute_path_to_drupal() {
  static $absolute_path_to_drupal = NULL;

  if ($absolute_path_to_drupal === NULL) {
    // Get the absolute path to this file:
    $dir = rtrim(str_replace('\\', '/', dirname(__FILE__)), '/');
    $parts = explode('/', $dir);
    // Iterate up the directory hierarchy until we find the website root:
    $done = FALSE;
    do {
      // Check a couple of obvious things:
      $done = is_dir("$dir/sites") && is_dir("$dir/includes") && is_file("$dir/index.php");
      if (!$done) {
        // If there's no more path to examine, we didn't find the site root:
        if (empty($parts)) {
          $absolute_path_to_drupal = FALSE;
          break;
        }
        // Go up one level and look again:
        array_pop($parts);
        $dir = implode('/', $parts);
      }
    } while (!$done);

    $absolute_path_to_drupal = $dir;
  }
  return $absolute_path_to_drupal;
}

/**
 * Checks if the taxon specified by the uuid is contained in the currently focused classification.
 *
 * @param $taxon_uuid
 * @return bool
 */
function taxon_in_current_classification($taxon_uuid) {
  $taxon_nodes = cdm_ws_get(CDM_WS_PORTAL_TAXON_TAXONNODES, $taxon_uuid);
  $taxon_in_current_tree = FALSE;
  if (is_array($taxon_nodes)) {
    foreach ($taxon_nodes as $node) {
      if (get_current_classification_uuid() == $node->classificationUUID) {
        $taxon_in_current_tree = TRUE;
        break;
      }
    }
  }
  return $taxon_in_current_tree;
}

/**
 * TODO if getting fragment from request is possible remove
 * $_REQUEST['highlite'] HACK
 * NOT WORKING since fragments are not available to the server
 *
 * function fragment(){
 *    global $fragment;
 *    if(!$fragment){
 *       $fragment = substr($_SERVER['REQUEST_URI'], strrpos($_SERVER['REQUEST_URI'], '#'));
 *    }
 *   return $fragment;
 * }
 */
function uuid_anchor($uuid, $innerHTML) {
  $highlite = FALSE;
  $params = drupal_get_query_parameters();
  if (isset($params['highlite']) && $params['highlite'] == $uuid) {
    $highlite = TRUE;
  }

  return '<a name="' . $uuid . '" ></a><span class="' . ($highlite ? 'highlite' : '') . '">' . $innerHTML . '</span>';
}

/**
 * @todo Enter description here...
 * @deprecated looks like this is not used anymore
 */
/*
function tagNameParts($name, $numOfNameTokens) {
  $out = '<span class="name">';

  $token = strtok($name, " \n\t");
  $i = 0;
  $noSpace = TRUE;
  while ($token != FALSE) {
    if ($i == $numOfNameTokens) {
      $out .= '</span> <span class="authors">';
      $noSpace = TRUE;
    }
    $out .= ($noSpace ? '' : ' ') . $token;
    $noSpace = FALSE;
    $token = strtok(" \n\t");
    $i++;
  }
  return $out . '</span>';
}
*/

/* ============================ annotations ============================= */

/**
 * Returns HTML for annotations to cdm objects.
 *
 * Almost any cdmObject may be annotated. Therefore we provide a generic way to
 * display as well as create or update annotations. The following cdm classes
 * are annotatable:
 *
 * - DescriptionElementBase
 * - EventBase
 * - HomotypicalGroup
 * - IdentifiableEntity
 * - DescriptionBase
 * - IdentifiableMediaEntity
 * - Media
 * - Sequence
 * - TaxonBase
 * - TaxonName
 * - TaxonomicTree
 * - TermBase
 * - LanguageStringBase
 * - ReferencedEntityBase
 * - NomenclaturalStatus
 * - OriginalSourceBase
 * - RelationshipBase
 * - TypeDesignationBase
 * - TaxonNode
 * - WorkingSet
 *
 * @param array $cdm_entities
 *   An array of CdmBase instances.
 * @param $footnote_list_key_suggestion string
 *    optional parameter. If this parameter is left empty (null, 0, "") the
 *   footnote key will be determined be set to
 *   RenderHints::getFootnoteListKey().FOOTNOTE_KEY_SUFFIX_ANNOTATIONS otherwise the supplied
 *   key will be used.
 *
 * @return string
 *   The markup.
 */
function cdm_entities_annotations_as_footnotekeys($cdm_entities, $footnote_list_key =null){

  // check if footnotes for annotations are disabled completely
  if (variable_get('cdm_dataportal_annotations_footnotes', CDM_DATAPORTAL_ALL_FOOTNOTES)) {
    return '';
  }
  $out = '';
  if(is_array($cdm_entities)){
    // array of entities
    $footNoteKeys = cdm_entities_annotations_footnote_keys($cdm_entities, $footnote_list_key);
  } else {
    // single entity
    $footNoteKeys = cdm_entity_annotations_as_footnote_keys($cdm_entities, $footnote_list_key);
  }
  foreach ($footNoteKeys as $a) {
    $out .= cdm_footnote_key($a, ($out ? ',' : ''));
  }
  return $out;
}

/**
 * Created markup for the annotations
 * @param null $annotations
 * @param $enclosingTag
 *  Tag name of the DOM element to enclose the annotations.
 *
 * @return string
 */
function cdm_annotations($annotations = null, $enclosingTag = span) {

  if (!is_array($annotations)) {
    return '';
  }
  $out = '<' . $enclosingTag . ' class="annotations">';
  $i = 0;
  foreach ($annotations as $annotation) {
    $out .= ($i++ > 0 ? ', ' : '') . $annotation->text;
  }
  $out .= '</' . $enclosingTag . '>';
  return $out;
}



/**
 * Theme function for CDM marker instances
 *
 * @see compose_cdm_marker();
 * @param array $variables
 *   - markerType_representation_l10n: the localized representation of the marker.markerType field
 */
function theme_cdm_marker($variables) {
  $class_attribute = null;
  //TODO class attribute hacked?, use generic drupal way?
  if(isset($variables['attributes']['class'])){
    $class_attribute = $variables['attributes']['class'];
  }
  return '<span class="' . $class_attribute . '">' . $variables['label'] . '</span>';
}

/* ============================ pager ============================= */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_pager($variables) {
  $pager = $variables['pager'];
  $path = $variables['path'];
  $parameters = $variables['parameters'];
  $out = '';

  if ($pager->pagesAvailable > 1) {

    $out .= '<div class="pager">';
    if ($pager->currentIndex > 0) {
      $out .= theme('cdm_pager_link', array(
        'text' => '« ' . t('First'),
        'linkIndex' => 0,
        'pager' => $pager,
        'path' => $path,
        'parameters' => $parameters,
        'attributes' => array('class' => array('pager-first')),
        ));
      $out .= theme('cdm_pager_link', array(
        'text' => '‹ ' . t('Previous'),
        'linkIndex' => $pager->currentIndex - 1,
        'pager' => $pager,
        'path' => $path,
        'parameters' => $parameters,
        'attributes' => array('class' => array('pager-previous')),
        ));
    }

    if ($pager->indices[0] > 0) {
      $out .= '<div class="pager-list-dots-left">...</div>';
    }

    foreach ($pager->indices as $index) {
      $label = $index + 1;
      $out .= theme('cdm_pager_link', array('text' => $label, 'linkIndex' => $index, 'pager' => $pager, 'path' => $path, 'parameters' => $parameters, 'attributes' => array(
  'class' => array('pager-first'),
)));
    }
    if ($pager->indices[count($pager->indices) - 1] < $pager->pagesAvailable - 1) {
      $out .= '<div class="pager-list-dots-right">...</div>';
    }

    if ($pager->nextIndex) {
      $out .= theme(
        'cdm_pager_link',
        array(
          'text' => t('Next') . ' ›',
          'linkIndex' => $pager->nextIndex,
          'pager' => $pager,
          'path' => $path,
          'parameters' => $parameters,
          'attributes' => array(
            'class' => array('pager-next'),
          )
        )
      );
      $out .= theme(
        'cdm_pager_link',
        array(
          'text' => t('Last') . ' »',
          'linkIndex' => $pager->pagesAvailable - 1,
          'pager' => $pager,
          'path' => $path,
          'parameters' => $parameters,
          'attributes' => array(
            'class' => array('pager-last'),
          )
        )
      );
    }
    $out .= '</div>';

    return $out;
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_pager_link($variables) {
  $text = $variables['text'];
  $linkIndex = $variables['linkIndex'];
  $pager = $variables['pager'];
  $path = $variables['path'];
  $parameters = $variables['parameters'];
  $attributes = $variables['attributes'];

  // the parameters may still contain the q param,
  // but this is already in the path variable
  unset($parameters['q']);

  $parameters['pager']['pageNumber'] = $linkIndex;
  if ($linkIndex == $pager->currentIndex) {
    $out = '<strong>' . $text . '</strong>';
  }
  else {
    // $queryString = drupal_query_string_encode($parameters);
    $queryString = $parameters;
    $out = l($text, $path, array(
      'attributes' => $attributes,
      'query' => $queryString,
    ));
  }
  return $out;
}

/* ============================ special buttons ============================= */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_print_button() {

  drupal_add_js('jQuery(document).ready(function() {
         jQuery(\'#print_button\').click(function () {
         window.print();
     });
  });', array('type' => 'inline'));

  $output = '<div id="print_button"><img src="' . base_path()  .  drupal_get_path('module', 'cdm_dataportal') . '/images/print_icon.gif"' . ' alt="' . t('Print this page') . '" title="' . t('Print this page') . '" />';
  // .t('Print this page');
  // $output .= l('Print this page', '');
  $output .= '<span>Print this page</span>';
  $output .= '</div>';

  return $output;
}


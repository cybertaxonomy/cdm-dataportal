<?php
/**
 * @file
 * Description theming functions.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 */


/**
 * Theme function to alter the feature representation.
 *
 * It is highly questionable if this function should be completely removed.
 * If a feature needs a different representation this should be edited directly
 * in the cdm data but it should not be tweaked like this in the portal.
 *
 * Used in:
 *  - theme_cdm_feature_nodesTOC()
 *  - theme_cdm_feature_nodes()
 *  - theme_cdm_media_mime_application()
 *  - theme_cdm_media_mime_text()
 *
 * TODO delete this function? (a.kohlbecker feb 2013)
 *
 */
function theme_cdm_feature_name($variables) {
  $feature_name = $variables['feature_name'];
  return t('@feature-name', array('@feature-name' => $feature_name));
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_FeatureTree_hierarchy($variables) {

  $feature_tree_uuid = $variables['FeatureTreeUuid'];
  if (!is_uuid($feature_tree_uuid)) {
    return NULL;
  }

  $out = '';
  $feature_tree = cdm_ws_get(CDM_WS_FEATURETREE,
    array(
      $feature_tree_uuid,
    )
  );

  if (isset($feature_tree) && isset($feature_tree->root)) {
    $out = '<ul class="' . $feature_tree->class . '">';
    $out .= theme('FeatureTree_hierarchy_children', array('node' => $feature_tree->root));
    $out .= '</ul>';
  }
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_FeatureTree_hierarchy_children($variables) {

  $node = $variables['node'];
  $out = '';
  if (isset($node->childNodes)) {

    foreach ($node->childNodes as $child_node) {
      $out .= '<li>' . check_plain($child_node->feature->representation_L10n);
      if (isset($child_node->childNodes) && count($child_node->childNodes) > 0) {
        $out .= '<ul>' . theme('FeatureTree_hierarchy_children', array('node' => $child_node)) . '</ul>';
      }
      $out .= '</li>';
    }
  }
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_IdentificationKey($variables) {
  $out = '';
  $identificationKey = $variables['identificationKey'];
  $doLinkToKeyPage = $variables['doLinkToKeyPage'];
  $showIdentificationKeyTitle = $variables['showIdentificationKeyTitle'];
  $parentRenderPath = RenderHints::getRenderPath();
  RenderHints::pushToRenderStack("IdentificationKey");

  if ($showIdentificationKeyTitle) {
    if ($doLinkToKeyPage) {
      $out = l($identificationKey->titleCache, path_to_key($identificationKey->class, $identificationKey->uuid));
    }
    else {
      $out = $identificationKey->titleCache;
    }
  }
  if (isset($identificationKey->sources) && is_array($identificationKey->sources)) {
    // order and display sources.
    //TODO can the method handle_annotations_and_sources() be used here?
    $sources = oder_sources($identificationKey->sources, TRUE);
    $out .= '<div class="sources">';
    $out .=  implode('', $sources);
    $out .= '</div>';
  }
  // Display annotations.
  $out .= theme('cdm_annotations', array('annotations' => cdm_ws_getAnnotationsFor($identificationKey), 'enclosingTag' => 'div'));
  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_polytomousKey($variables) {
  $polytomousKey = $variables['polytomousKey'];

  // TODO settings needed.
  // @see http://en.wikipedia.org/wiki/Single_access_key#Presentation_styles
  // @see http://dev.e-taxonomy.eu/trac/ticket/2152
  $keyStyle = "linkedStyle";

  RenderHints::pushToRenderStack("polytomousKey");
  // Key nodes in linked style.
  $out = '<table class="polytomousKey polytomousKey_' . $keyStyle . '">';
  $out .= theme('cdm_polytomousKey_' . $keyStyle . '_subgraph', array('polytomousKeyNode' => $polytomousKey->root));
  $out .= '</table>';
  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_polytomousKey_linkedStyle_subgraph($variables) {
  $polytomousKeyNode = $variables['polytomousKeyNode'];
  static $statementCountCharacter = '\'';
  $out = "";

  if (is_array($polytomousKeyNode->children)) {
    $childIndex = 0;

    // Render edges of the current node.
    foreach ($polytomousKeyNode->children as &$child) {

      if (!isset($child->statement) && isset($child->taxon->uuid)) {
        // Skip node with empty statements (see below for explanation: "Special
        // case").
        // this skipping here happens always in the next deeper level of iteration
        // the check below is node on the level above
        continue;
      }

      /*
       * Special case: Child nodes with empty statements but taxa as leaf are to
       * treated as if all those taxa where direct children of the source node.
       */
      $islinkToManyTaxa = !isset($child->children[0]->statement) && isset($child->children[0]->taxon->uuid);
      $islinkToTaxon = isset($child->taxon->uuid);
      $islinkToSubKey = isset($child->subkey->uuid);
      $islinkToOtherNode = isset($child->otherNode);
      // Either NULL or 0.
      $islinkToNode = $child->nodeNumber && !$islinkToManyTaxa && !$islinkToOtherNode;
      $hasQuestion = !empty($polytomousKeyNode->question->label_l10n);
      $hasFeature = isset($polytomousKeyNode->feature);

      // $indentEdge = $hasQuestion && $childIndex > 0;
      // Question.
      if ($hasQuestion && $childIndex == 0) {
        // Place question, as extra table row.
        $out .= '<tr class="question new_section">';
        $out .= '<td class="nodeNumber">' . uuid_anchor($polytomousKeyNode->uuid, $polytomousKeyNode->nodeNumber) . "</td>";
        $out .= '<td class="question">' . $polytomousKeyNode->question->label_l10n . '</td>';
        $out .= '</tr>';
      }

      $out .= '<tr class="childCount_' . $childIndex . (!$hasQuestion && $childIndex == 0 ? ' new_section' : '') . '">';

      if ($hasQuestion) {
        $out .= '<td class="nodeNumber"></td>';
      }
      else {
        $out .= '<td class="nodeNumber">' . uuid_anchor($polytomousKeyNode->uuid, $polytomousKeyNode->nodeNumber . str_pad("", $childIndex, $statementCountCharacter)) . "</td>";
      }

      $out .= '<td ' . RenderHints::getHtmlElementID($child) . '  class="edge' . ($hasQuestion ? ' edge-indent' : '') . '">';

      // Feature.
      if ($hasFeature) {
        $out .= $polytomousKeyNode->feature->representation_L10n . ": ";
      }

      // Statement.
      $out .= $child->statement->label_l10n;

      // --- Links to nodes taxa and subkeys.
      $out .= '<div class="nodeLink">';

      // Link to a PolytomousKeyNode.
      if ($islinkToNode) {
        $out .= '<div class="nodeLinkToNode">';
        if (isset($child->modifyingText)) {
          $out .= theme('cdm_poytomousKeyNode_modifyingText', array('modifyingText' => $child->modifyingText));
        }
        $out .= l($child->nodeNumber, request_path(), array(
          'attributes' => NULL,
          'query' => NULL,
          'fragment' => $child->uuid,
        )) . '</div>';
      }

      // Link to a PolytomousKeyNode.
      if ($islinkToOtherNode) {
        $out .= '<div class="nodeLinkToOtherNode">';
        if (isset($child->modifyingText)) {
          $out .= theme('cdm_poytomousKeyNode_modifyingText', array('modifyingText' => $child->modifyingText));
        }
        $out .= l($child->otherNode->nodeNumber, $_REQUEST["q"], array(
          'attributes' => NULL,
          'query' => NULL,
          'fragment' => $child->otherNode->uuid,
        )) . '</div>';
      }

      // Link to one or many taxa.
      if ($islinkToTaxon || $islinkToManyTaxa) {

        if ($islinkToManyTaxa) {
          $taxonChildren = $child->children;
        }
        else {
          $taxonChildren = array(
            $child,
          );
        }

        foreach ($taxonChildren as $taxonChild) {
          // TODO many taxa $child->children->taxon.
          $out .= '<div class="nodeLinkToTaxon">';
          if (isset($taxonChild->modifyingText)) {
            $out .= theme('cdm_poytomousKeyNode_modifyingText', array('modifyingText' => $taxonChild->modifyingText));
          }
          $out .= render_taxon_or_name($taxonChild->taxon->name, url(path_to_taxon($taxonChild->taxon->uuid)));
          $out .= '</div>';
        }

        // Link to a subkey.
        if ($islinkToSubKey) {
          $out .= '<div class="nodeLinkToSubkey">' . theme('cdm_IdentificationKey', array('identificationKey' => $child->subkey)) . '</div>';
        }
      }

      $out .= '</div>'; // End node link.
      $out .= '</td>'; // End edge.
      $out .= '</tr>';

      $childIndex++;
    }

    // Recurse into child nodes.
    foreach ($polytomousKeyNode->children as &$child) {
      $out .= theme('cdm_polytomousKey_linkedStyle_subgraph', array('polytomousKeyNode' => $child));
    }
  }

  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_poytomousKeyNode_modifyingText($variables) {
  $out = '';
  $modifyingText = $variables['modifyingText'];
  if (is_object($modifyingText)) {
    $i = 0;
    foreach (get_object_vars($modifyingText) as $lang => $languageString) {
      $out .= ($i++ > 0 ? ', ' : '') . '<span class="modifyingText">' . $languageString->text . '</span> ';
    }
  }
  return $out;
}

/**
 * Returns HTML for a list of a specific type of IdentificationKeys.
 *
 * The list can be restricteded by a taxon.
 *
 * @param array $variables
 *   An associative array containing:
 *   - type: The simple name of the cdm class implementing the interface
 *     IdentificationKey, valid values are:
 *     PolytomousKey, MediaKey, MultiAccessKey
 *   - taxonUuid: If given, this parameter restrict the listed keys to those
 *     which have the taxon identified be this uuid in scope.
 *
 * @ingroup themeable
 */
function theme_cdm_list_IdentificationKeys($variables) {
  $type = $variables['type'];
  $taxonUuid = $variables['taxonUuid'];
  $keyList = _list_IdentificationKeys($type, $taxonUuid);
  if (!$keyList || count($keyList) == 0) {
    return;
  }

  RenderHints::pushToRenderStack('list_IdentificationKeys');
  $out = '<ul>';
  foreach ($keyList as $key) {
    $out .= '<li>';
    $out .= theme('cdm_IdentificationKey', array('identificationKey' => $key));
    $out .= '</li>';
  }
  $out .= '</ul>';
  $out .= theme("cdm_annotation_footnotes", array('footnoteListKey' => RenderHints::getRenderPath()));
  RenderHints::popFromRenderStack();

  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_block_IdentificationKeys($variables) {
  $taxonUuid = $variables['taxonUuid'];
  static $types = array(
    "PolytomousKey" => "Polytomous",
    "MediaKey" => "Media",
    "MultiAccessKey" => "Multiaccess",
  );
  RenderHints::pushToRenderStack('block_IdentificationKeys');
  $out = '';
  foreach ($types as $type => $label) {
    $keylist = theme('cdm_list_IdentificationKeys', array('type' => $type, 'taxonUuid' => $taxonUuid));
    if (!$keylist) {
      continue;
    }
    $out .= '<div class="' . $type . '">';
    $out .= '<h3>' . t('@label', array('@label' => $label)) . "</h3>";
    $out .= $keylist;
    $out .= '</div>';
  }
  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * This theming function formats the use description and use record list for
 * these descriptions.
 *
 * @see http://drupal.org/node/1354
 */
function theme_cdm_UseDescription($variables) {
  $descriptions = $variables['description'];
  $taxonUuid = $variables['taxonUuid'];
  $out = '<div id="content"><ul id="Description" class ="description">';
  if ($descriptions == NULL) {
    return;
  }

  $feature_block_settings = get_feature_block_settings(UUID_DISTRIBUTION);

  $descriptionSynonyms = '';
  $descriptionOut = '';
  $synonymOut = '';
  $currentTaxon = cdm_ws_get(CDM_WS_PORTAL_TAXON, $taxonUuid);

  foreach ($descriptions as $description) {
    $useSummary = '';
    foreach ($description->elements as $element) {

      if ($element->feature->uuid == UUID_USE && !(strlen($useSummary) > 0) && isset($element->multilanguageText_L10n)) {
        $useSummary = $element->multilanguageText_L10n->text;
      }
    }
    // uses will be ordered by source
    foreach ($description->sources as $source) {
      $is_about_current_taxon = FALSE;
      $originalTaxonUsedInSource = NULL;
      $originalTaxonPager = NULL;
      if ($source->originalNameString) {
        $request_params = array();
        $request_params['query'] = $source->originalNameString;
        $request_params['matchMode'] = "EXACT";
        $originalTaxonPager = cdm_ws_get(CDM_WS_PORTAL_NAME_FINDBYNAME, NULL, queryString($request_params));
        if ($originalTaxonPager->count > 0) {
          $originalTaxonUsedInSource = $originalTaxonPager->records[0];
        }
        else {
          $originalTaxonUsedInSource = $currentTaxon->name;
        }
      }
      else {
        $originalTaxonUsedInSource = $currentTaxon->name;
      }

      $is_about_current_taxon = $currentTaxon->name->uuid == $originalTaxonUsedInSource->uuid;

      if (!$is_about_current_taxon) {
        $descriptionOut .= '<li class="descriptionText DescriptionElement">';
        $name_used_in_source_link_to_show_use = l($source->originalNameString, path_to_name($originalTaxonUsedInSource->uuid), array(
          'absolute' => TRUE,
          'html' => TRUE,
        ));
        $descriptionOut .= $name_used_in_source_link_to_show_use . ': ';
        $descriptionOut .= $useSummary;
        foreach ($description->sources as $source) {
          $descriptionOut .= " (" . theme('cdm_OriginalSource', array(
              'source' => $source,
              'doLink' => $feature_block_settings['link_to_reference'] == 1,
              'do_link_to_name_used_in_source' => $feature_block_settings['link_to_name_used_in_source'] == 1)) . ")";
        }
        $hasUseRecords = FALSE;
        $descriptionUseRecordOut = '<div id=useRecords><table><th>Use Category</th><th>Use Sub Category</th><th>Plant Part</th><th>Human Group</th><th>Ethnic Group</th><th>Country</th>';
        foreach ($description->elements as $descriptionElement) {
          if ($descriptionElement->feature->uuid == UUID_USE_RECORD) {
            $hasUseRecords = TRUE;
            // FIXME localization hardcoded to English
            $useRecordTags = explode(';', $descriptionElement->modifyingText_l10n);
            $descriptionUseRecordOut .= '<tr>';
            $descriptionUseRecordOut .= '<td>' . $useRecordTags[0] . '</td>' . '<td>' . $useRecordTags[1] . '</td>' . '<td>' . $useRecordTags[3] . '</td>' . '<td>' . $useRecordTags[4] . '</td>' . '<td>' . $useRecordTags[5] . '</td>' . '<td>' . $useRecordTags[2] . '</td>';
            $descriptionUseRecordOut .= '</tr>';
          }
        }
        $descriptionUseRecordOut .= '</table></div>';
        if ($hasUseRecords) {
          $descriptionOut .= $descriptionUseRecordOut . '</li>';
        }
      }
      else {
        // TODO +/- duplicate of above, unify this code
        $synonymOut .= '<li class="descriptionText DescriptionElement">';
        $name_used_in_source_link_to_show_use = l($source->originalNameString, path_to_name($originalTaxonUsedInSource->uuid), array(
          'absolute' => TRUE,
          'html' => TRUE,
        ));

        $synonymOut .= $name_used_in_source_link_to_show_use . ': ';
        $synonymOut .= $useSummary;
        foreach ($description->sources as $source) {
          $synonymOut .= " (" . theme('cdm_OriginalSource', array(
              'source' => $source,
              'doLink' => $feature_block_settings['link_to_reference'] == 1,
              'do_link_to_name_used_in_source' => $feature_block_settings['link_to_name_used_in_source'] == 1
            )) . ")";
        }

        $hasUseRecords = FALSE;
        $useRecordTableOut = '<div id=useRecords><table><th>Use Category</th><th>Use Sub Category</th><th>Plant Part</th><th>Human Group</th><th>Ethnic Group</th><th>Country</th>';
        foreach ($description->elements as $descriptionElement) {
          if ($descriptionElement->feature->uuid == UUID_USE_RECORD) {
            $hasUseRecords = TRUE;
            $useRecordTags = explode(';', $descriptionElement->modifyingText_l10n);
            $useRecordTableOut .= '<tr>';
            $useRecordTableOut .= '<td>' . $useRecordTags[0] . '</td>' . '<td>' . $useRecordTags[1] . '</td>' . '<td>' . $useRecordTags[3] . '</td>' . '<td>' . $useRecordTags[4] . '</td>' . '<td>' . $useRecordTags[5] . '</td>' . '<td>' . $useRecordTags[2] . '</td>';
            $useRecordTableOut .= '</tr>';
          }
        }
        $useRecordTableOut .= '</table></div>';
        if ($hasUseRecords) {
          $synonymOut .= $useRecordTableOut . '</li>';
        }
      }

      // }
    }
  }
  $out .= $descriptionOut . $synonymOut;
  $out .= "</ul></div>";
  return $out;
}


/**
 * The theming function for a block of Uses Descriptions for a given taxon.
 *
 * The Uses block has been removed from the code but the according theme function
 * is kept for compatibility reasons with existing code regarding palmweb.
 *
 */
function theme_cdm_block_Uses($variables) {
  $taxonUuid = $variables['taxonUuid'];
  RenderHints::pushToRenderStack('block_Uses');

  if ($taxonUuid == NULL) {
    return;
  }
  $out = '';
  $markerTypes = array();
  $markerTypes['markerTypes'] = UUID_MARKERTYPE_USE;
  $useDescriptions = cdm_ws_get(CDM_WS_PORTAL_TAXON_DESCRIPTIONS, $taxonUuid, queryString($markerTypes));
  if (!empty($useDescriptions)) {
    // FIXME use theme_block instaed of hardcoding the block html here !!!!
    $out .= '<div id="block-cdm_dataportal-feature-description" class="clear-block block block-cdm_dataportal-feature"><H2><a name="userecords"> </a> Uses </H2>';
    $formatUseDescriptions = theme('cdm_UseDescription', array('description' => $useDescriptions, 'taxonUuid' => $taxonUuid));

    $out .= $formatUseDescriptions;
    $out .= "</div>";
  }

  return $out;
}

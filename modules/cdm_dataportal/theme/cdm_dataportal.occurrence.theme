<?php
/**
 * @file
 * Occurrence theming functions.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 */

/**
 * Returns HTML for a specimen.
 *
 * @param array $variables
 *   An associative array containing:
 *   - specimenTypeDesignation: Object.
 *
 * @ingroup themeable
 *
 * TODO: this function is not being used at all - can we remove it? (a.kohlbecker 6.2.2013)
 */
function theme_cdm_specimen($variables) {
  $specimenTypeDesignation = $variables['specimenTypeDesignation'];

  // _add_js_thickbox();
  if (isset($specimenTypeDesignation->typeSpecimen)) {
    $derivedUnitFacade = cdm_ws_get(CDM_WS_DERIVEDUNIT_FACADE, $specimenTypeDesignation->typeSpecimen->uuid);
  }

  $out = '';
  if (isset($specimenTypeDesignation->media[0])) {

    $image_url = base_path() . drupal_get_path('module', 'cdm_dataportal') . '/images/external_link.gif';
    // Thickbox has problems reading the first url parameter, so a litte hack is
    // needed here:
    // Adding a meaningless parameter &tb_hack=1& ....
    $out .= '&nbsp;<a href="#TB_inline?tb_hack=1&width=300&amp;height=330&amp;inlineId=specimen_media_' . $specimenTypeDesignation->uuid . '" class="thickbox">' . '<img src="' . $image_url . '" title="' . t('Show media') . '" /></a>';

    $out .= '<div id="specimen_media_' . $specimenTypeDesignation->uuid . '" class="tickbox_content"><table>';

    $media_row = '<tr class="media_data">';
    $meta_row = '<tr class="meta_data">';

    foreach ($specimenTypeDesignation->media as $media) {
      foreach ($media->representations as $representation) {

        // TODO this this is PART 2/2 of a HACK - select preferred
        // representation by mimetype and size.
        if (TRUE || $representation->mimeType == 'image/jpeg') {
          foreach ($representation->parts as $part) {
            // Get media uri conversion rules if the module is installed and
            // activated.
            if (module_exists('cdm_mediauri')) {
              $muris = cdm_mediauri_conversion($part->uri);
            }
            // --- Handle media preview rules.
            if (isset($muris['preview'])) {

              $a_child = '<img src="' . $muris['preview']['uri'] . '" class="preview" ' . ($muris['preview']['size_x'] ? 'width="' . $muris['preview']['size_x'] . '"' : '') . ($muris['preview']['size_y'] ? 'width="' . $muris['preview']['size_y'] . '"' : '') . '/>';
            }
            else {
              $a_child = '<img src="' . $part->uri . '" />';
            }

            // --- Handle web application rules.
            $webapp = '';
            if (isset($muris['webapp'])) {
              if ($muris['webapp']['embed_html']) {
                // Embed in same page.
                $webapp = $muris['webapp']['embed_html'];
              }
              else {
                $webapp = l(t('web application'), $muris['webapp']['uri']);
              }
            }
            $media_row .= '<td><a href="' . $part->uri . '" target="' . $part->uuid . '">' . $a_child . '</a></td>';
            $meta_row .= '<td><span class="label">' . check_plain($specimenTypeDesignation->titleCache) . '</span><div class="webapp">' . $webapp . '</div></td>';
          } // END parts.
          // TODO this is PART 2/2 of a hack.
          break;
        } // END representations.
      } // END media.
    }
    $out .= $media_row . '</tr>';
    $out .= $meta_row . '</tr>';

    $out .= '</div></table>';
  }
  return $out;
}


/**
 *
 * @param string $field
 *
 */
function cdm_occurrence_field_name_label($field){

  static $field_labels = array(
      'class' => 'Basis of Record',
      'fieldNumber' => 'Collectors number',
      'absoluteElevation' => 'Altitude',
      'absoluteElevationMinimum' => 'Altitude maximum',
      'absoluteElevationMaximum' => 'Altitude minimum',
      'getGatheringPeriod' => 'Gathering period',
  );

  if (isset($field_labels[$field])) {
    $field = $field_labels[$field];
  }

  $field = preg_replace_callback(
      '/([a-z])([A-Z])/',
      function ($m) {
        return $m[1] . ' ' . strtolower ($m[2]);
      },
      $field);

  return t('@field-name:', array('@field-name' => ucfirst($field)));
}



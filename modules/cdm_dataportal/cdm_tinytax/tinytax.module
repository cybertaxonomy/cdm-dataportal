<?php
/* $Id: tinytax.module,v 1.3 2008/01/10 12:57:09 sdrycroft Exp $ */

/** 
 * @file tinytax.module
 * Provides a block for displaying a taxonomy allowing users to easily browse by their classifications
 */

/**
 * Implementation of hook_block.
 */
function tinytax_block($op = 'list', $delta = 0, $edit = array()){
  switch ($op){
    case 'list':
      return _tinytax_list_blocks();
    case 'configure': // No need to add any extra configuration - Open to suggestions.
      return _tinytax_configure($delta);
    case 'view':
      if($delta == 'tinytax_cdm_block'){
        return _tinytax_view_cdmblock();
      } else {
        return _tinytax_view_blocks($delta);
      }
    case 'save':
      _tinytax_save($delta, $edit);
      break;    
  }
}

/**
 * Implementation of hook_menu().
 */
function tinytax_menu($may_cache) {
  $items = array();
  if ($may_cache){
    $items[] = array(
      'path' => 'tinytax/get',
      'title' => t('tinytax'),
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
      'callback' => 'tinytax_js'
    );
    $items[] = array(
      'path' => 'tinytax/getcdm',
      'title' => t('tinytax'),
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
      'callback' => 'tinytax_js_cdm'
    );
    $items[] = array('path' => 'tinytax/autocomplete',
      'access' => true, 
      'title' => t('Tinytax callback'),
      'callback' => 'tinytax_autocomplete',
      'type' => MENU_CALLBACK);  
    
    $items[] = array(
      'path' => 'admin/settings/tinytax',
      'title' => t('TinyTax'),
      'description' => t('Settings for TinyTax Tree Browser'),
      'access' => user_access('administer cdm_dataportal'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'tinytax_settings',
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

function tinytax_settings(){

  if( !module_exists('cdm_api') && !module_exists('taxonomy')) {
      $form['tinytax_dependency_error'] =  array(
      '#value' => '<div class="error"><h4>dependency_error</h4>TinyTax requires at least on of the following modules to be installed and enabled: cdm_api, taxonomy</div>'
       );
  }

  $form['tinytax_cdm_block_enabel'] =  array(
    '#type' => 'checkbox',
    '#title'         => t('Enabled a CDM TinyTax Block'),
    '#default_value' => variable_get('tinytax_cdm_block_enabel', 0),
    '#description'   => t('Create a TinyTaxBlock for a taxonomic tree provided from a cdm webservice'),
     );
  
  if(variable_get('tinytax_cdm_block_enabel', 0)){
    $form['tinytax_cdm_block_info'] =  array(
    '#value' => 'Currently using <code>'.variable_get('cdm_webservice_url', 'UNDEFINED').'</code> as webservice to retrieve a taxonoic tree from'
     );
  }

   return system_settings_form($form);
}

/**
 * Helper function to add an option to the configure form
 */
function _tinytax_configure($delta){
  
     
  $form['open_to_tid']=array(
    '#description' => t('Enter the term (e.g. Taxon Name) to which the taxonomy will be exposed to by default.  THIS FIELD WILL AUTOCOMPLETE'),
    '#title' => t('Term'),
    '#autocomplete_path' => 'tinytax/autocomplete',
    '#type' => 'textfield',
    '#weight' => -9,
    '#default_value' => variable_get($delta, '')
  );
  
  return $form;
}

/**
 * Helper function to save the tinytax-delta variable
 */
function _tinytax_save($delta, $edit){
  variable_set($delta, $edit['open_to_tid']);
}

/**
 * Autocomplete function for the configure form
 */
function tinytax_autocomplete($string = ''){
  $matches = array();
  if ($string) {
    $result = db_query_range("SELECT parent, name FROM {term_data},{term_hierarchy} WHERE {term_hierarchy}.tid = {term_data}.tid AND LOWER(name) LIKE LOWER('%s%%')", $string, 0, 20);
    while ($term = db_fetch_object($result)) {
      $matches[$term->parent] = check_plain($term->name);
    }
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * Menu callback. Return the HTML for a div.
 */
function tinytax_js($tid) {
  // This function handles the URLs "tinytax/get/1 ..."
  // We need the parents and the children of the TID.
  $parents = taxonomy_get_parents_all($tid);
  $parents = array_reverse($parents);
  $children = taxonomy_get_children($tid);
  $term = taxonomy_get_term($tid);
  // Now we build the HTML, and output it.
  print drupal_to_js(array('html' => theme('tinytax_term_list', $parents, $children), 'vid'=> $term->vid));
  exit();
}

function tinytax_js_cdm($taxon_uuid) {
  // This function handles the URLs "tinytax/getcdm/{uuid} ..."
  $parents = cdm_ws_get(CDM_WS_TREENODE_PARENTS, $taxon_uuid);
  if(!$parents){
    $parents = array();
  }
  $children = cdm_ws_get(CDM_WS_TREENODE_CHILDREN, $taxon_uuid);
  if(!$children){
    $children = array();
  }
  // Now we build the HTML, and output it.
  print drupal_to_js(array('html' => theme('tinytax_term_list', $parents, $children, 'cdm')));
  exit();
}

/**
 * Helper function for displaying a list of blocks available from this module.
 */
function _tinytax_list_blocks(){
  // Return a block for each of the Vocabularies on the site.
  // Start by getting the Vocabs!
  $vocabularies = array_values(taxonomy_get_vocabularies()); // Paranoia setting in (no need for array_values).
  $blocks = array();
  foreach ($vocabularies as $vocabulary){
    $blocks['tinytax-'.$vocabulary->vid]['info'] = 'Tinytax Block for ' . $vocabulary->name;
  }
  
  if(variable_get('tinytax_cdm_block_enabel', 0)){
    $blocks['tinytax_cdm_block']['info'] = 'Tinytax CDM Block';
  }
  return $blocks;
}

/**
 * Helper function for displaying a single block. 
 */
function _tinytax_view_blocks($delta){
  $delta = substr($delta,8);
  $vocabulary = taxonomy_get_vocabulary($delta);
  $block['subject'] = t($vocabulary->name);
  // Lets try and create some list!
  $children = array();
  $parents = array();
  if (arg(0)=="taxonomy" && arg(1)=="term" && arg(2)!==0){
    $tid = arg(2);
    $term = taxonomy_get_term($tid);
    if ($term->vid == $delta){
      $parents = taxonomy_get_parents_all($tid);
      $parents = array_reverse($parents);
      $children = taxonomy_get_children($tid);
    }
  }
  if (count($parents)+count($children)===0) {
    if ($tid = variable_get('tinytax-'.$delta, FALSE)){
      $parents = taxonomy_get_parents_all($tid);
      $parents = array_reverse($parents);
      $children = taxonomy_get_children($tid);        
    }
    else {
      $parents = taxonomy_get_children(0, $vocabulary->vid);
    }
  }
  $block['content'] = theme('tinytax_term_list',$parents, $children);
  // Load the Javascript and CSS
  drupal_add_js(drupal_get_path('module','tinytax').'/tinytax.js');
  drupal_add_css(drupal_get_path('module','tinytax').'/tinytax.css');
  return $block;
}

/**
 * Helper function for displaying the cdm block. 
 */
function _tinytax_view_cdmblock(){

  $block['subject'] = t("CDM Taxontree");
  // Lets try and create some list!
  
  $children = array();
  $parents = array();
  if (arg(0)=="cdm_dataportal" && arg(1)=="taxon" && arg(2)!==0 && arg(3)!==0){
    $taxon_uuid = arg(2);
    $parents = cdm_ws_get(CDM_WS_TREENODE_PARENTS, $taxon_uuid);
    $children = cdm_ws_get(CDM_WS_TREENODE_CHILDREN, $taxon_uuid); 
  } else {
    $taxon_uuid = $_SESSION['cdm_dataportal']['tree']['taxon_uuid'];
    if($taxon_uuid){
      $parents = cdm_ws_get(CDM_WS_TREENODE_PARENTS,  $taxon_uuid);
      $children = cdm_ws_get(CDM_WS_TREENODE_CHILDREN, $taxon_uuid);   
    } else {
      $secRef_array = _cdm_dataportal_currentSecRef_array();
      $parents = cdm_ws_get(CDM_WS_TREENODE_ROOT, $secRef_array['uuid']);   
    }
  }
  
  $block['content'] = theme('tinytax_term_list',$parents, $children, 'cdm');
  //$block['content'] = 'UNDER CONSTRUCION'; 
  // Load the Javascript and CSS
  drupal_add_js(drupal_get_path('module','tinytax').'/tinytax.js');
  drupal_add_css(drupal_get_path('module','tinytax').'/tinytax.css');
  return $block;
}

/**
 * Theme taxonomy_block_item_list
 * 
 * @param $parents
 * @param $children
 * @param $treesource default is 'taxonomy', set to 'cdm' for rendering a cdm derived tree
 * 
 */
function theme_tinytax_term_list($parents = array(), $children = array(), $treesource = 'taxonomy'){
  $num_parents = count($parents);
  $num_children = count($children);
  $return_string = '';
  $theme_sub_funct = '_theme_tinytax_'.$treesource.'_term_list_link';
  // We're not at the root, so display parents
  if($parents){
    $parent_keys = array_keys($parents);
    for($i=0;$i<$num_parents;$i++){
      $parent = $parents[$parent_keys[$i]];
      if($i===0){
        $tinytaxrootid = ($treesource == 'taxonomy' ? 'tinytaxroot-'.$parent->vid : 'tinytaxroot-'.$treesource);
        $return_string .= '<div id="'.$tinytaxrootid.'" class="tinytax tinytaxroot"><p class="tinytax tinytaxroot';
      }
      else {
        $return_string .= '<div class="tinytax tinytaxnode"><p class="tinytax';
        if($i!=$num_parents-1 || $num_children){
          $return_string .= ' tinytaxinternal';
        }
        else {
          $return_string .= ' tinytaxlast';
        }
      }
      $return_string .= '">'.$theme_sub_funct($parent);
    }
  }
  if($children && $num_children){
    $return_string .='<div class="tinytaxlast tinytax tinytaxnode">';
    $children_keys = array_keys($children);
    for($i=0;$i<$num_children;$i++){
      $child = $children[$children_keys[$i]];
      $return_string .='<p class="tinytax';
      if ($num_parents  && $i!=($num_children-1)){
        $return_string .= ' tinytaxlist';
      }
      elseif ($num_parents){
        $return_string .= ' tinytaxlast';
      }
      
      $return_string .= '">'.$theme_sub_funct($child);
    }
    $return_string .='</div>';
  }
  if($parents){
   foreach($parents as $parent){
      $return_string .='</div>';
    }
  }
  return $return_string;
}

function _theme_tinytax_taxonomy_term_list_link($term){
  $numofchildren = count(taxonomy_get_children($term->tid));
  $out = 
    l($term->name,'tinytax/get/'.$term->tid, array('class'=>'tinytaxlink','title'=>t('Click to see the descendants of this name'))).
    ' <small>('.$numofchildren/*taxonomy_select_nodes(array($term)))*/.')</small> '.
    l('<img src="/'.drupal_get_path('module','tinytax').'/images/plus.png'.'" alt="+" />','taxonomy/term/'.$term->tid,array('title'=>'Click to see all nodes tagged with this name'),null,null,null,TRUE).
    '</p>';
    return $out;
}

function _theme_tinytax_cdm_term_list_link($treenode){
  
  $numofchildren = $treenode->hasChildren;
  
  $out =
    l(
      cdm_dataportal_shortname_of($treenode), 
      cdm_dataportal_taxon_path($treenode->uuid),
      array('title'=>t('Click to see all nodes tagged with this name')
      )
     );
    
  if( $numofchildren > 0 ) {
   $out .= ' <small>('.$numofchildren.')</small> '
   .l(
      '<img src="/'.drupal_get_path('module','tinytax').'/images/plus.png'.'" alt="+" />',
      'tinytax/getcdm/'.$treenode->uuid, 
      array('class'=>'tinytax_cdm_link','title'=>t('Click to see the descendants of this name')),null,null,null,TRUE
    );
  }
  $out .= '</p>';
  return $out;
}
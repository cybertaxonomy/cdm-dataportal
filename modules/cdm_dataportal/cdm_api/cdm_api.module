<?php
// $Id: cdm_api.php 1012 2007-12-05 17:58:45Z a.kohlbecker $

/**
 * @file
 * Functions which are required or useful when accessing and processing CDM Data Store Webservices
 * 
 * Naming conventions:
 * ----------------------
 * 
 *  - all webservice access methods are prefixed with cdm_ws
 * 
 *
 * Copyright (C) 2007 EDIT
 * European Distributed Institute of Taxonomy 
 * http://www.e-taxonomy.eu
 * 
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * See LICENSE.TXT at the top of this package for the full license terms.
 */
require_once ('xml2json.php');
require_once ('uuids.php');


/**
 * Converts an array of TagedText items into a sequence of corresponding html tags whereas 
 * each item will provided with a class attribute which set to the key of the TaggedText item.
 * 
 * @param array $taggedtxt
 * @param String $tag
 * @param String $glue the string by which the chained text tokens are concatenated together. 
 *       Default is a blak character
 * @return String of HTML 
 */
function cdm_taggedtext2html(array &$taggedtxt, $tag = 'span', $glue = ' '){
  $out = '';
   foreach($taggedtxt as $tt){
     $out .= (strlen($out) > 0 ? $glue : '').'<'.$tag.' class="'.$tt->tag.'">'.$tt->text.'</'.$tag.'>';
   }
   return $out;
}

/**
 * Finds the text tagged with $tagname in an array of taggedText instances
 *
 * @param array $taggedtxt
 * @param string $tagname
 * @return the text mapped by $tagname or an empty string
 */
function cdm_taggedtext_value(array &$taggedtxt = array(), $tagname){
  foreach($taggedtxt as $tagtxt){
    if($tagtxt->tag == $tagname)
    return $tagtxt->text;
  }
  return '';
}

/**
 * Searches the array of LocalisedTermTO instances for an entry mapped with the language
 * specified as parameter $language if existing. If not the term mapped with the $defauklt_language 
 * is returned otherwise the first term in $localised_terms is returned or fale if 
 * $localised_terms is empty. 
 * 
 *
 * @param array $localised_terms
 * @param string $language
 * @param string $default_language
 * @return string
 */
function cdm_get_localised_term($localised_terms, $language, $default_language = 'en'){
  
  $default_term = (count($localised_terms) > 0 ? $localised_terms[0]->term : '') ;
  
  foreach($localised_terms as $lt){
    if($lt->language == $language){
      return $lt->term;
    }
    if($lt->language == $default_language){
      $default_term = $lt->term;
    }
  }
  
  return $default_term;
}

/**
 * Enter description here...
 *
 * @param unknown_type $uuid
 */
function cdm_localized_term_is($uuid){
  
}

/**
 * Produces a path to a static web service stub out of a cdm web service path. 
 * These stubs are object serialisations stored in files whereas the filename
 * consists of the service name and of a 
 * encoded version of the request query parameters
 *
 * @param string $path
 * @param string $fileExtension
 * @return string
 */
function cdm_encode_stub($path, $fileExtension){
  $path =  str_replace('/',',',$path);
  return variable_get('cdm_webservice_type', 'xml').'/'.$path.'.'.$fileExtension;
}

/**
 * Decodes a path to a static web service stub to turn it into a path 
 * suitable for a cdm web service
 *
 * @param string $path
 * @return string
function cdm_decode_stub($path){
  
  // remove fileextension
  $path = substr_replace($path, '', strrpos($path, '.'));
  
  return str_replace(',','&', str_replace(';','?',$path));
}
 */

/**
 * Enter description here...
 *
 * @param unknown_type $file
 * @param unknown_type $parameters
 * @return unknown
function cdm_compose_url_parametrised($file, $parameters = array()){
  $pstr = '';
  foreach($parameters as $key=>$value){
    $pstr .= ( strlen($pstr) == 0 ? '?' : '&').$key.'='.( is_string($value) ? urlencode($value) : $value);
  }
  $file .= $pstr;
  
  if(variable_get('cdm_webservice_isStub', 0)){
    $file = cdm_encode_stub($file, variable_get('cdm_webservice_type', 'json'));
  }
  
  $url = variable_get('cdm_webservice_url', '').$file; 
  return $url;
}
 */


function cdm_compose_url($file, $parameters = array()){
  
  $pstr = '';
  foreach($parameters as $key=>$value){
    $pstr .= '/'.( is_string($value) ? urlencode($value) : $value);
  }
  $file .= $pstr;
  
  if(variable_get('cdm_webservice_isStub', 0)){
    $file = cdm_encode_stub($file, variable_get('cdm_webservice_type', 'json'));
  }
  
  $url = variable_get('cdm_webservice_url', '').$file; 
  return $url;
}


/**
 * Return string content from a remote file
 * 
 * @param string $url
 * @return string
 * 
 * @author Luiz Miguel Axcar (lmaxcar@yahoo.com.br)
*/
function _get_content_curl($url)
{
    $ch = curl_init();

    curl_setopt ($ch, CURLOPT_URL, $url);
    curl_setopt ($ch, CURLOPT_HEADER, 0);

    ob_start();
    curl_exec ($ch);
    if(curl_errno($ch)){
      watchdog('CDM_API', '_get_content_curl() - '.curl_error($ch).' URL: '.$url, WATCHDOG_ERROR);
        if(variable_get('cdm_webservice_debug', 1)){
          drupal_set_message('_get_content_curl() - '.curl_error($ch).' URL: '.$url, 'error');
        }
    }
    curl_close ($ch);
    $string = ob_get_contents();
    ob_end_clean();
 
    return $string;    
}

function _get_content_fsockopen($url){
  //FIXME implement get_content_fsockopen($url);
   watchdog('CDM_API', '_get_content_fsockopen - UNIMPLEMENTED', WATCHDOG_ERROR);
   return false;
}

function get_content($url){

  /* FIXME: all requests must be sent with the correct request headers:
   *  
   *  - Accept: application/json, text/xml, ...
   *  - Accept-Language: en, de, ....
   *  - Accept-Encoding: UTF8
   * 
   */
  if(function_exists('curl_init')){

    // use the CURL lib if installed it is supposed to be 20x faster
    return _get_content_curl($url);
  } else {
    return _get_content_fsockopen($url);
  }
}


/**
 * Implementation of hook_menu()
 */
function cdm_api_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    
   $items[] = array(
      'path' => 'cdm_api/proxy',
      'callback' => 'proxy_content',
      'access' => true,
      'type' => MENU_CALLBACK,
      );
    
  }
  
  return $items;
}


/**
 * Implementation of hook_requirements()
 */
function cdm_api_requirements() {

  $requirements['cdm_api'] = array(
    'title' => t('CDM API')
  );

  if( function_exists('curl_init') ){
    $requirements['cdm_api']['description'] = ''; // description below title is not jet in use 
    $requirements['cdm_api']['value'] =  'CURL php extension is available.';
  } else {
    $requirements['cdm_api']['value'] =  'CURL php extension is missing.';
  }
 
  //FIXME: once _get_content_fsockopen is implemented change  severity to  REQUIREMENT_WARNING,
  $requirements['cdm_api']['severity'] =  (function_exists('curl_init') ? REQUIREMENT_OK : REQUIREMENT_ERROR);
  
  return $requirements;
}



function proxy_content($url, $theme = null){
  $data = get_content(urldecode($url));
  
  if(!$theme){
    print $data;
  } else {
    print theme($theme, cdm_load_obj($data));
  }
}

function cdm_load_obj($datastr){
  // if the web service delivers XML convert it into json
  if(variable_get('cdm_webservice_type', 'xml') == 'xml'){
    $datastr = xml2json::transformXmlStringToJson($datastr);  
  }
  // --- using the PEAR json lib --- //
  $json = new Services_JSON();
  $obj = $json->decode($datastr);
  
  // --- using the php json lib --- //
  // since stub files may contain comments
  //TODO use php json lib
  /*
  $datastr = preg_replace('/((?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/)|(?:\/\/.*))/', '', $datastr);
  $obj = json_decode($datastr);
  */
  
  if(!is_object($obj) || !isset($obj->root)){
    ob_start();
    var_dump($obj);
    $obj_dump = ob_get_contents();
    ob_clean();
    watchdog('CDM', 'cdm_load_obj() - invalid object: '.$obj_dump, WATCHDOG_ERROR);
    return false;
  }

  return $obj->root;
}

/**
 * Loads the XML or JSON response for the given url from the CDM Data Store Webservice.
 * The XML is turned into a object which is returned.
 * 
 * @param String $url the relative url of the web service call. 
 *        Relative means relative to the web service base url which is stored in cdm_webservice_url
 * @return An object or false
 */
function cdm_ws_load($url){
  
  $datastr = get_content($url);
  $obj = cdm_load_obj($datastr);
  if( !$obj || !$datastr){
    watchdog('CDM', 'cdm_ws_load() - URL: '.$url, WATCHDOG_ERROR);
    if(variable_get('cdm_webservice_debug', 1)){
      drupal_set_message('cdm_ws_load() - URL: '.$url, 'debug');
    }
  }
  return $obj;
}


function cdm_ws_get(){
  $args = func_get_args();
  $method = array_shift($args);
  $url = cdm_compose_url($method, $args);
  return cdm_ws_load($url);
}

/**
 * Web Service Arguments: {Uuid}
 * 
 * The whatis service returns the type 
 * i.e. DTO class name and simplename & cdm class name and simplename of the instance referenced by the $uuid parameter. 
 * 
 *
 * @param unknown_type $uuid
 * @return false if the cdm store contains no matching instance. 
 * An associative array with the following key-value pairs:
 *   - 'cdmName':       name of the cdm class as returned by Class.getName(), e.g. eu.etaxonomy.cdm.model.taxon.Taxon
 *   - 'cdmSimpleName': simple name of the cdm class as returned by Class.getSimpleName(), e.g. Taxon
 *   - 'dtoName':       name of the DTO class as returned by Class.getName(), e.g. eu.etaxonomy.cdm.dto.TaxonTO
 *   - 'dtoSimpleName': simple name of the TDO class as returned by Class.getSimpleName(), e.g. TaxonTO
 */
define('CDM_WS_WHATIS', 'whatis');


/**
 * Web Service Arguments: {NameUuid}
 */
define('CDM_WS_NAME', 'name');

/**
 * Web Service Arguments: {beginsWith}, {pageNumber}, {onlyAccepted}, {pagesize}
 */
define('CDM_WS_NAME_LIST', 'namelist');

/**
 * Web Service Arguments: {referenceUuid}
 */
define('CDM_WS_REFERENCE', 'reference');

/**
 * Web Service Arguments: - none -
 */
define('CDM_WS_SEC_REFERENCES_ALL', 'allSecRefences');

/**
 * Web Service Arguments: {taxonUuid}
 */
define('CDM_WS_TAXON', 'taxon');

/**
 * Web Service Arguments: {nameUuid}
 */
define('CDM_WS_TYPE_DESIGNATIONS', 'type');

/**
 * Web Service Arguments: {taxonUuid}
 */
define('CDM_WS_ACCEPTED_TAXON', 'accepted');

/**
 * Web Service Arguments: {taxonUuid}
 */
define('CDM_WS_TREENODE_ROOT', 'treenode_root');

/**
 * Web Service Arguments: {taxonUuid}
 * 
 * treenode_parents returns an array of the parent TreeNodes in descending order.
 * The TreeNode referenced by the parameter $taxon_uuid is included as last element
 */
define('CDM_WS_TREENODE_PARENTS', 'treenode_parents');

/**
 * Web Service Arguments: {taxonUuid}
 */
define('CDM_WS_TREENODE_CHILDREN', 'treenode_children');

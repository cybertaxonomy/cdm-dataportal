<?php
// $Id$

/*
 * @file
 * cdm_dataportal
 *
 * Copyright (C) 2007 EDIT
 * European Distributed Institute of Taxonomy
 * http://www.e-taxonomy.eu
 *
 * The contents of this file are subject to the Mozilla Public License Version 1.1
 * See LICENSE.TXT at the top of this package for the full license terms.
 */

require_once('cdm_dataportal.theme.php');

/* ====================== hook implementations ====================== */

/**
 * Implementation of hook_help()
 *
 * Display help and module information
 * @param section which section of the site we're displaying help
 * @return help text for section
 */
function cdm_dataportal_help($section='') {

  $out = '';
  switch ($section) {
    case "admin/modules#description":
      $out = t("The dataportal publishes CDM data hosted in a CommunityStore on the web.");
      break;
  }
  return $out;
}


/**
 * Implementation of hook_perm()
 *
 * Valid permissions for this module
 * @return array An array of valid permissions for the portfolio module
 */
function cdm_dataportal_perm() {
  return array(
    	'administer cdm_dataportal',
        'cdm_dataportal view notes',
  //TODO which else permission are required? -> check the WP6 requirements document
  );
}


/**
 * Implementation of hook_menu()
 */
function cdm_dataportal_menu($may_cache) {
  $items = array();
  if ($may_cache) {

    $items[] = array(
      'path' => 'admin/settings/cdm_dataportal',
      'title' => t('CDM Dataportal'),
      'description' => t('Setting for the CDM Dataportal'),
      'access' => user_access('administer cdm_dataportal'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'cdm_dataportal_settings',
    );
    
    /*$items[] = array(
      'path' => 'admin/settings/cdm_dataportal/ws',
      'title' => t('Web Service'),
      'description' => t('Setting for the CDM Dataportal'),
      'access' => user_access('administer cdm_dataportal'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'cdm_dataportal_settings',
      'weight' => 1,
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );*/
    
    $items[] = array(
	    'path' => 'cdm_dataportal/names',
	    'callback' => 'cdm_dataportal_view_names',
	    'access' => true,
	    'type' => MENU_CALLBACK, 
    );
    // optional callback arguments: page
     
    $items[] = array(
	    'path' => 'cdm_dataportal/taxon',
	    'callback' => 'cdm_dataportal_view_taxon',
	    'access' => true,
	    'type' => MENU_CALLBACK, 
    // expected callback arguments: name_uuid
    );
    
    $items[] = array(
      'path' => 'cdm_dataportal/search/taxon',
      'callback' => 'cdm_dataportal_view_search_taxon',
      'access' => true,
      'type' => MENU_CALLBACK, 
    );
    
    $items[] = array(
      'path' => 'cdm_dataportal/filter',
      'callback' => 'cdm_dataportal_view_filter',
      'access' => true,
      'type' => MENU_CALLBACK, 
    );
    
    $items[] = array(
      'path' => 'cdm/xml2json',
      'callback' => 'cdm_view_xml2json',
      'access' => true,
      'type' => MENU_CALLBACK, 
    );
     
  }
  drupal_add_css(drupal_get_path('module', 'cdm_dataportal').'/cdm_dataportal.css');
  //drupal_add_css(drupal_get_path('module', 'cdm_dataportal').'/cdm_dataportal_print.css', 'print');
  drupal_add_css(drupal_get_path('module', 'cdm_dataportal').'/cdm_dataportal_screen.css', 'screen');
  return $items;
  
}

/**
 * Implementation of hook_block()
 *
 * Provides the following blocks:
 *  0: list of links useful during development
 *
 * @param String $op
 * @param int $delta
 */
function cdm_dataportal_block($op='list', $delta=0) {
  // listing of blocks, such as on the admin/block page
  if ($op == "list") {
    $block[0]["info"] = t("CDM DataPortal DevLinks");
    $block[1]["info"] = t("CDM DataPortal Credits");
    $block[2]["info"] = t("CDM Search Taxa");
    $block[3]["info"] = t("CDM Filters");
    return $block;
  }
  else if ($op == 'view') {
    switch($delta){
      case 0:
        $block['subject'] = t('CDM DataPortal DevLinks');
        $block['content'] = '<ul>
        <li>'.l('A Taxon Page', cdm_dataportal_taxon_path('5000001-stub')).'</li>
        <li>'.l('Name List - page1 of A', 'cdm_dataportal/names/A/1')
        //.'</li><li>'.l('xml2json', 'cdm/xml2json/namelist;startwith=A.xml')
        .'</li>
        </ul>';
        return $block;
      case 1:
        $block['subject'] = t('Credits');
        $block['content'] = theme('cdm_credits');
        return $block;
      case 2:
        $block['subject'] = t('Search Taxa');
        $block['content'] = drupal_get_form('cdm_dataportal_search_taxon_form');
        return $block;   
      case 3:
        $block['subject'] = t('Active Filters');
        $block['content'] = cdm_dataportal_view_filter('list');
        return $block;
    }
  }
}


/**
 * Implementation of hook_validate()
 *
 * @param $element
 */
function cdm_dataportal_settings_validate($form_id, $form_values){
  
  if (!str_endsWith($form_values['cdm_webservice_url'], '/')) {
    form_set_error('cdm_webservice_url', t("The URL to the CDM Web Service must end with a slash: '/'."));
  }

  $cdm_webservice_url_changed = variable_get('cdm_webservice_url', '') != $form_values['cdm_webservice_url'];
  
  if ($cdm_webservice_url_changed) {
    $form_values['cdm_secUuid_default'] = 0;
    //_cdm_dataportal_set_currentSecUuid(false);
    // reset all cdm related data stored in the session
    //cdm_dataportal_session_clear($form_values['cdm_webservice_url']);
    // clear the cdm webservice cache
    cache_clear_all(NULL, 'cache_cdm_ws');
  }
  // ['cdm_webservice_cache'] default in cdm_api is 1
  if($form_values['cdm_webservice_cache'] != variable_get('cdm_webservice_cache', 1)){
    cache_clear_all(NULL, 'cache_cdm_ws');
  }
  
}

/* 
function cdm_dataportal_session_clear($cdm_ws_uri_update = false){
  $_SESSION['cdm'] = null;
  if(is_string($cdm_ws_uri_update)){
    $_SESSION['cdm'] = array('ws_uri'=>$cdm_ws_uri_update);
  }
}

function cdm_dataportal_session_validate(){

  if(!isset($_SESSION['cdm']['ws_uri'])){
    $_SESSION['cdm'] = array('ws_uri'=>variable_get('cdm_webservice_url', false));
  } else if($_SESSION['cdm']['ws_uri'] != variable_get('cdm_webservice_url', false)){
    cdm_dataportal_session_clear(variable_get('cdm_webservice_url', false));
  }
}
*/

function cdm_dataportal_search_taxon_form(){
  
  $url = 'cdm_dataportal/search/taxon';
  $form['#method'] = 'get';
  $form['#process'] = array('cdm_dataportal_search_process' => array());
  $form['#action'] = url($url, NULL, NULL, true);
  
  $form['queryString'] = array(
    '#type' => 'textfield',
    '#size' => 20,
    '#attributes' => array('title' => t('Enter the name or part of a name you wish to search for.')),
    '#default_value' => (isset($_SESSION['cdm']['search']['queryString']) ? $_SESSION['cdm']['search']['queryString'] : ''),
  );
  $form['onlyAccepted'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only Accepted'),
    '#attributes' => array('title' => t('Search only for taxa which are accepted by the current treatment.')),
    '#default_value' => isset($_SESSION['cdm']['search']['onlyAccepted']) && $_SESSION['cdm']['search']['onlyAccepted'],
  );
  /*
  $form['vernacular'] = array(
    '#type' => 'checkbox',
    '#title' => t('Vernacular Names'),
    '#attributes' => array('title' => t('Search for vernacular names.')),
    '#default_value' => isset($_SESSION['cdm']['search']['vernacular']) && $_SESSION['cdm']['search']['vernacular'],
  );
  $form['language'] =  array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#options' => array(
        '*' => t('ALL')
        ),
    '#description'   => t('The language of the vernacular name'),
    '#default_value' => (isset($_SESSION['cdm']['search']['language']) ? $_SESSION['cdm']['search']['language'] : ''),
  );
  */
  $form['page'] = array(
  '#type' => 'hidden',
  '#value' => '1',
  );
  
  $form['submit'] = array(
  '#type' => 'submit',
  '#name' => '', 
  '#value' => t('Search'),
  );
  
  // clean URL get forms breaks if we don't give it a 'q'.
  if (!(bool)variable_get('clean_url', '0')) {
    $form['q'] = array(
      '#type' => 'hidden',
      '#value' => $url,
      '#name' => 'q',
    );
  }
  return $form;
}


function cdm_dataportal_search_process($form) {
  unset($form['form_id']);
  unset($form['form_token']);
  return $form;
}

/**
 * Filters $_REQUEST by a list of valid request  parameters and also sets defaults if required.
 * returns the processed request parameters submitted by the search form.
 */
function cdm_dataportal_search_form_request(){
  // keys map $REQUEST Keys values are optional default parameters if not null
  static $search_form_params = array('queryString'=>null, 'onlyAccepted' =>'0', 'page'=>null);
  
  $form_params = array();
  foreach($search_form_params as $key=>$default ){
    $form_params[$key] = ( isset($_REQUEST[$key]) && $_REQUEST[$key] != '' ? $_REQUEST[$key] : $default);
  }
  return $form_params;
}
  

/*
function cdm_dataportal_search_taxon_form_submit($form_id, $form_values) {
  
  $_SESSION['cdm']['search'] = $form_values;
  //return '/cdm_dataportal/search/taxon/'.$form_values['queryString'].'/'.($form_values['vernacular']?'1':'0').'/'.$form_values['language'];      
  return '/cdm_dataportal/search/taxon/'.$form_values['queryString'].'/'.($form_values['onlyAccepted']?'1':'0');  
  //$paramstr = compose_url_prameterstr($form_values);
  //return url('/cdm_dataportal/search/taxon/', $paramstr);
}
*/
/* ====================== menu callback functions ====================== */

/**
 * Generate main administration form.
 *
 * @return
 *   An array containing form items to place on the module settings page.
 */
function cdm_dataportal_settings(){

  $form = cdm_api_settings_form();

  //TODO: settings are still incomplete, compare with trunk/dataportal/inc/config_default.php.inc
  $form['cdm_dataportal'] = array(
      '#type' => 'fieldset',
      '#title' => t('CDM DataPortal'),
      '#collapsible' => FALSE,
      '#collapsed' => TRUE,
  );

  $form['cdm_dataportal']['secuuid_widget'] = array(
    '#type' => 'select_secuuid',
    '#title' => t('Default Concept Reference'),
    '#description'   => t('The default \'sensu\' reference to start the cdm_dataportal with. Per user choices are possible and may override this value.'),
    '#varname' => 'cdm_secUuid_default',
    '#multiple' => false
  );
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_elements().
 */
function cdm_dataportal_elements() {
  $type['select_secuuid'] = array(
    '#input' => TRUE, 
    '#process' => array('cdm_dataportal_select_secuuid_expand' => array()),
    //'#validate' => array('cdm_dataportal_select_secuuid_validate' => array()),
    //'#default_value' => array(),
  );
  return $type;
}


/*
 * 
 */
function cdm_dataportal_select_secuuid_expand($element){
  
  $element['#tree'] = FALSE;
  
  // any value submitted?
  if(isset($element['#post'][$element['#varname']])){
    $selected_values = $element['#post'][$element['#varname']];
  } else {
    // use those store in drupal
    $selected_values = variable_get( $element['#varname'], array());
  }
  if(!is_array($selected_values)){
    $selected_values = array($selected_values);
  }
  $options = array();
  foreach($selected_values as $secUuid){
    $options[$secUuid] = cdm_taxontree_secRefTitle_for($secUuid);
  }

  $element[$element['#varname']] =  array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => array_values($options),
    '#size' => $element['#multiple'] ? 12 : 2,
    '#multiple' => $element['#multiple'],
  );
  return $element;
}


function theme_select_secuuid($element) {
  
  $default_uuid = variable_get($element['#varname'], false);
  theme('cdm_taxontree_add_scripts');
  drupal_add_js('$(document).ready(function() {$(\'ul.cdm_taxontree\').cdm_taxontree(
  {
    widget:                 true,
    element_name:           \''.$element['#varname'].'\',  // 
    multiselect:            '.($element['#multiple']?'true':'false').',         //
  }
  );});', 'inline');

  $out  = '<div class="cdm_taxontree_widget">';
  $out .= '<div class="taxontree">'.theme('cdm_taxontree', cdm_taxontree_build_tree(null, false), NULL, FALSE, 'cdm_taxontree_node_reference').'</div>';
  $out .= $element['#children'].'<div style="clear: both;" /></div>';
  
  return theme(
    'form_element',
    array(
      '#title' => $element['#title'],
      '#description' => $element['#description'],
      '#id' => $element['#id'],
      '#required' => $element['#required'],
      '#error' => $element['#error'],
    ),
    $out
  );
}



/**
 * Displays a list of the known taxonomic names. Long lists are split up into multiple pages
 *
 * TODO: parameters are still preliminar
 * @param String $page page number to diplay defaults to page 1
 * @param boolean $hide_unaccepted whether to hide nams which are not accepted by the current view
 */
function cdm_dataportal_view_names($beginsWith = 'A', $page = 1, $onlyAccepted = false ){

  $request_params  = array(
    'q' => $beginsWith, 
         //'sec' = '',
         //'higherTaxa' => getFiters(),
          // 'matchAnywhere' => false, // default is false
    'page' => $page, 
    'onlyAccepted' => $onlyAccepted, 
    'pagesize' => 20  /*$_SESSION['cdm']['namelist_pagesize'] */);
  
  $taxonSTOs = cdm_ws_get(CDM_WS_FIND_TAXA, $request_params);
  /*
   * FIXME the filter for accepted names will be a form element, thus this widget
   * should be generated via form api preferably as block
   */
  //$out  = theme('cdm_dataportal_widget_filter_accepted', $onlyAccepted);
  //$out .= theme('cdm_dataportal_widget_names_list', $names, $page);
  $out .= theme('cdm_listof_taxa', $taxonSTOs);
  return $out;
}


/**
 * The taxon page gives detailed information on a taxon, it shows:
 *  - Taxon name
 *  - Full list of synonyms homotypic synonyms on top, followed by the
 *    heterotypic and finally followed by misapplied names.
 *    The list is ordered historically.
 *  - All facts associated with the very taxon concept and taxon name.
 *
 * @param String $uuid the UUID of the taxon
 */
function cdm_dataportal_view_taxon($uuid, $arg2 = null){


  if(isset($arg2) && !is_numeric($arg2)){
   
    switch ($args[0]){
      case 'alternatives':
        $alternatives = cdm_ws_get(CDM_WS_TAXON_ALTERNATIVES, $uuid);
        return theme('cdm_alternative_taxa', $alternatives);
    }
    
  } else {
  
    // display the page for the taxon defined by $uuid
    $taxonTO = cdm_ws_get(CDM_WS_TAXON ,$uuid);
    if(!$taxonTO){
      drupal_set_title(t('Taxon does not exist'));
      return false;   
    }
    _cdm_dataportal_set_currentSecUuid($taxonTO->sec->uuid);
  
    drupal_set_title(theme('cdm_taxon', $taxonTO, true));
    //TODO retrieve complete synonymy and other data
  
    $out = theme('cdm_taxon_page', $taxonTO);
    return $out;
  }
}



/**
 * Expected URL request parameters:
 *  - text
 *  - language
 *  - vernacular
 * 
 * future extensions to meet palmweb mockup requirements:
 *  - habitat
 *  - uses
 *  - conservation status
 *  - locality / tdwg region
 */
function cdm_dataportal_view_search_taxon(){
  
  $request_params = cdm_dataportal_search_form_request();
  $sw_params = array_replace_key($request_params, array('queryString'=> 10 ));
  //FIXME remove debug code:
  $sw_params['page'] = '1'; // DEBUG code
  $resultPageSTO = cdm_ws_get(CDM_WS_FIND_TAXA, $sw_params);
  $resultPageSTO->pageNumber = $request_params['page'];
  return theme('cdm_search_results', $resultPageSTO, 'cdm_dataportal/search/taxon', $request_params);
}

/**
 * filters on children override already set parent filters and vice verca
 *
 * @param unknown_type $op
 * @param unknown_type $taxonUuid
 * @return unknown
 */
function cdm_dataportal_view_filter($op, $taxonUuid = null){
  
  if(!isset($_SESSION['cdm']['filters'])){
    $_SESSION['cdm']['filters'] = array();
  }
  if($taxonUuid || $op == 'list'){
    switch($op){
      case 'add':
        cdm_dataportal_filters_add($taxonUuid);
        break;
      case 'remove':
        cdm_dataportal_filters_remove($taxonUuid);
        break;
      case 'list':
        //TODO put in theme!!!
        $out = '<ul>';
        foreach($_SESSION['cdm']['filters'] as $uuid=>$node){
          $out .= '<li>'.cdm_dataportal_shortname_of($node).' '.l('[x]', 'cdm_dataportal/filter/remove/'.$uuid, array(), drupal_get_destination()).'</li>';
        }
        $out .= '</ul>';
        return $out;
    }
  }
  if($_REQUEST['destination']){
    $destination = $_REQUEST['destination'];
    unset($_REQUEST['destination']);
    drupal_goto($destination);
  }
}


function cdm_view_xml2json(){
  $file = arg(2);
  $datastr = get_content(variable_get('cdm_webservice_url', '').$file);
  return  xml2json::transformXmlStringToJson($datastr);

}

/**
 * Get a term for the current locale from the $localised_terms array.
 * Uses global variable $locale from drupal (see drupal functions locale_initialize() for details)
 * Function name is adapted from the drupal function t().
 *
 */
function cdm_dataportal_t($localised_terms){
  global $locale;  // drupal variable containing the current locale
  return cdm_get_localised_term($localised_terms, $locale);
}

/* ====================== other functions ====================== */

/**
 * Enter description here...
 *
 * @param String $uuid the UUID of the taxon
 * @return the URL
 */
function cdm_dataportal_taxon_path($uuid){
  return 'cdm_dataportal/taxon/'.$uuid;
}

/**
 * Creates a short taxonname by using the taggename field of NameSTO or NameTO instances.
 * If the taggename if empty the fullname will be returned.
 *
 * @param unknown_type $NameSTO a NameSTO, TreeNode or NameTO instance
 * @return string
 */
function cdm_dataportal_shortname_of($NameSTO){

  $name = '';
  // get all tagged text tokens of the scientific name
  foreach($NameSTO->taggedName as $tagtxt){
      if($tagtxt->type == 'name' || $tagtxt->type == 'rank'){
        $name .= ($name ? ' ' : '').$tagtxt->text;
      }
  }
  $name = trim($name);
  if($name){
    if(strpos($name, 'Incertae sedis') === false && $pos = stripos($name, ' ')){
      return substr($name, 0, 1).'. '.substr($name, $pos);
    } else {
      return $name;
    }
  } else {
    return $NameSTO->fullname;
  }
}

/**
 * @param UUID $secUuid
 */
function _cdm_dataportal_set_currentSecUuid($secUuid){

  if(is_array($secUuid)){
    $secUuid = $secUuid[0];
  }
  if( !isset($_SESSION['cdm']['currentSecRef']['uuid']) ||  $_SESSION['cdm']['currentSecRef']['uuid'] != $secUuid){
    if(!$secUuid){
      $_SESSION['cdm']['currentSecRef'] = null;
    } else {
      $secRef = cdm_ws_get(CDM_WS_SIMPLE_REFERENCE ,$secUuid);
      if(isset($secRef[0])){
        $_SESSION['cdm']['currentSecRef'] = (array)($secRef[0]);
      }
    }
  }
}

/**
 * returns the current secRef array from the users session. 
 * If the according session variable is not jet set the default
 * as configured in the setting is used otherwise null.
 * 
 * currentSecRef['uuid']
 * currentSecRef[....
 *
 * @return array
 */
function _cdm_dataportal_currentSecRef_array(){
  
  if( !isset($_SESSION['cdm']['currentSecRef']['uuid'])){
     $secUuid = variable_get('cdm_secUuid_default', null);
     _cdm_dataportal_set_currentSecUuid($secUuid);
  }
  return  $_SESSION['cdm']['currentSecRef'];
}

/**
 * filters are set in cdm_dataportal_view_filter()
 * functions using filters should remove invalid filters
 * @return true if any filter is active
 */
function cdm_dataportal_filters_active(){
 return isset($_SESSION['cdm']['filters']) && count($_SESSION['cdm']['filters']) > 0;
}

/**
 * filters are set in cdm_dataportal_view_filter()
 * @return a reference on the filters array stored in the SESSION
 */
function &cdm_dataportal_filters_get(){
  if(!isset($_SESSION['cdm']['filters'])){
    $_SESSION['cdm']['filters'] = array();
  }
 return $_SESSION['cdm']['filters'];
}


function cdm_dataportal_filters_add($taxonUuid){
  $parents = cdm_ws_get(CDM_WS_TREENODE_PARENTS, $taxonUuid);
  
  $parents = array_reverse($parents);
  
  // pop off last element since this is the TreeNode object for $taxonUuid!
  $this_node = array_pop($parents);
  // will contain the uuid of the parent nodes excluding the $taxonUuid node itself
  $parent_uuids = array();
  
  // children override parents rule: remove all parent filters, 
  foreach($parents as $pnode){
    unset($_SESSION['cdm']['filters'][$pnode->uuid]);
    $parent_uuids[] = $pnode->uuid;
  }
  
  // search for potential children of this $taxonUuid
  foreach($_SESSION['cdm']['filters'] as $uuid=>$node){
    if(in_array($taxonUuid, $node->parentUuids)){
      unset($_SESSION['cdm']['filters'][$node->uuid]);
    }
  }
  // finally add this $taxonUuid as new filter
  $this_node->parentUuids = $parent_uuids;
  $_SESSION['cdm']['filters'][$taxonUuid] = $this_node;
}

function cdm_dataportal_filters_remove($taxonUuid){
  unset($_SESSION['cdm']['filters'][$taxonUuid]);
}


/**
 * @param $str the string to truncate
 * @param $len the maximun length
 * @param $appendix an optional appendix.
 *
 * @return the string truncated to the specified length or the original string as given as parameter.
 * if an appendix has been defined the resulting string
 * will have the specified length inculding the the appendix.
 */
function str_trunk(&$str, $len, $appendix=''){
  if(strlen($str) >= $len )
  return  substr($str, 0, $len - strlen($appendix)).$appendix;
  else
  return $str;
}

/**
 * @param string $str
 * @param string $sub
 * @return boolean
 */
function str_beginsWith( $str, $sub ) {
  return ( substr( $str, 0, strlen( $sub ) ) === $sub );
}

/**
 *
 * @param string $str
 * @param string $sub
 * @return boolean
 */
function str_endsWith( $str, $sub ) {
  return ( substr( $str, strlen( $str ) - strlen( $sub ) ) === $sub );
}


function array_replace_key($array, $replace_map){
  foreach($replace_map as $key=>$newkey){
    if(isset($array[$key])){
      $array[$newkey] = $array[$key];
      unset($array[$key]);
    }
  }
  return $array;
}


function compose_url_prameterstr($parameters = array()){
  $pstr = '';
  foreach($parameters as $key=>$value){
     $pstr .= ($pstr ? '&' :'').$key.'='.urlencode($value);
  }
  return $pstr;
}


<?php
/**
 * @file
 * Provides external links for sources to taxa information.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 *
 * @author
 *   - Andreas Kohlbecker <a.kohlbecker@BGBM.org>
 *   - Wouter Addink <w.addink@eti.uva.nl> (migration from Drupal 5 to Drupal7)
 */

/**
 * Display help and module information.
 *
 * @param string $path
 *   For which path of the site we're displaying help.
 * @param array $arg
 *   Array that holds the current path as would be returned from arg() function.
 *
 * @return string
 *   Help text for the path.
 */
function ext_links_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ext_links':
      $output = '<p>' . t("Link to external sources like ## for taxa.") . '</p>';
      return $output;
    case 'admin/config/cdm_dataportal/ext_links':
      $output = '<p>' . t('The external links module allows to configure URL templates for links to external data sources.');
      return $output;
    case 'admin/config/cdm_dataportal/ext_links/%':
      $output = '<p>' . t('An external link template.');
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function ext_links_menu() {
  $items = [];

  $items['admin/config/cdm_dataportal/ext_links'] = [
    'title' => 'External links',
    'description' => 'Configure external links templates.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ext_links_admin_overview'],
    'access arguments' => ['access administration pages'],
    'file' => 'ext_links.admin.inc'
  ];
  $items['admin/config/cdm_dataportal/ext_links/list'] = [
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ];
  $items['admin/config/cdm_dataportal/ext_links/add'] = [
    'title' => 'Add external link',
    'page callback' => 'ext_links_admin_link_template_page',
    'access arguments' => ['access administration pages'],
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
    'file' => 'ext_links.admin.inc',
  ];
  $items['admin/config/cdm_dataportal/ext_links/appearance'] = [
    'title' => 'Appearance',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ext_links_admin_appearance_page'],
    'access arguments' => ['access administration pages'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'ext_links.admin.inc',
  ];
  $items['admin/config/cdm_dataportal/ext_links/%ext_links'] = [ // %ext_links refers to ext_links_load
    'title' => 'Edit external link',
    'page callback' => 'ext_links_admin_link_template_page',
    'page arguments' => [4],
    'access arguments' => ['access administration pages'],
    'file' => 'ext_links.admin.inc',
  ];
  $items['admin/config/cdm_dataportal/ext_links/%ext_links/status/%'] = [
    'title' => 'Enable or disable external link',
    'page callback' => 'ext_links_admin_link_template_set_status',
    'page arguments' => [4, 6],
    'access arguments' => ['access administration pages'],
 //   'type' => MENU_CALLBACK,
    'file' => 'ext_links.admin.inc',
  ];
  return $items;
}

/**
 * Retrieves a list of External Link templates, ordered by weight.
 *
 * Empty 'ext_links' tables will be initialized with the default templates.
 *
 * @see ext_links_template_defaults()
 *
 * @param $enabled_only boolean
 *   When TRUE external link templates with status != null are excluded from the list.
 * @return array
 *   An array of external link template objects, keyed by the format ID and ordered by
 *   weight.
 *
 */
function ext_links_templates($enabled_only = FALSE) {
  global $language;
  $link_templates = &drupal_static(__FUNCTION__, array());

  // cache_clear_all("ext_links_templates:{$language->language}");
  // All available link_templates are cached for performance.
  if (!is_array($link_templates) || !count($link_templates)) {
    if ($cache = cache_get("ext_links:{$language->language}")) {
      $link_templates = $cache->data;
    }
    else {
      $test = false;
      if($test){
        $link_templates = [];
        $link_templates_arrays = ext_links_template_defaults();
        foreach($link_templates_arrays as $a){
          $link_templates[] = (object)$a;
        }
      } else {
        $query = db_select('ext_links', 'elt')
          ->addTag('translatable')
          ->fields('elt');
        if($enabled_only){
          $query = $query->condition('status', '1');
        }
        $link_templates =
          $query->orderBy('weight')
          ->execute()
          ->fetchAllAssoc('id');
      }
      if(!count($link_templates)) {
        $link_templates_arrays = ext_links_template_defaults();
        $query = db_insert('ext_links')
          ->fields(array_keys(array_values($link_templates_arrays)[0]));
        foreach($link_templates_arrays as $a){
          $query->values($a);
        }
        try {
          $query->execute();
        } catch (Exception $e) {
          drupal_set_message("Error while initializing ext_links database: " . $e->getMessage(), "error");
        }
        $link_templates = [];
        foreach($link_templates_arrays as $a){
          $link_templates[] = (object)$a;
        }
      }
      // cache_set("ext_links:{$language->language}", $link_templates);
    }
  }
  return $link_templates;
}

/**
 * Resets the text format caches.
 *
 * @see filter_formats()
 */
function ext_links_templates_reset() {
  cache_clear_all('ext_links', 'cache', TRUE);
  drupal_static_reset('ext_links');
}

/**
 * Loads a text format object from the database.
 *
 * @param $extlink_id
 *   The external link ID. ($link->id)
 *
 * @return
 *   A fully-populated text format object, if the requested format exists and
 *   is enabled. If the format does not exist, or exists in the database but
 *   has been marked as disabled, FALSE is returned.
 *
 * @see ext_links_exists()
 */
function ext_links_load($extlink_id) {
  $test = false;
  if($test) {
    $defaults = ext_links_template_defaults();
    return isset($defaults[$extlink_id]) ? (object)$defaults[$extlink_id] : FALSE;
  }
  else {
   $link_templates = ext_links_templates();
    return isset($link_templates[$extlink_id]) ? $link_templates[$extlink_id] : FALSE;
  }
}

/**
 * Saves a text format object to the database.
 *
 * @param $link_template
 *   A link template object having the properties:
 *   - id: The machine name of the external link. If this corresponds
 *     to an existing external link, this one will be updated;
 *     otherwise, a new external link will be created.
 *   - title: The link title
 *   - link: The link url template.
 *   - status: (optional) An integer indicating whether the ext link is
 *     enabled (1) or not (0). Defaults to 1.
 *   - weight: (optional) The weight of the external link, which controls its
 *     placement in external link block. If omitted, the weight is set to 0.
 *     Defaults to NULL.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED.
 */
function ext_links_save($link_template) {

  $link_template->title = trim($link_template->title);
  $link_template->cache = true;
  if (!isset($link_template->status)) {
    $link_template->status = 1;
  }
  if (!isset($link_template->weight)) {
    $link_template->weight = 0;
  }

  // Insert or update the text format.
  $return = db_merge('ext_links')
    ->key(array('id' => $link_template->id))
    ->fields(array(
      'id' => $link_template->id,
      'title' => $link_template->title,
      'link' => $link_template->link,
      'status' => (int) $link_template->status,
      'weight' => (int) $link_template->weight,
    ))
    ->execute();

  ext_links_templates_reset();
  return $return;
}

/**
 * Determines if a external link exists.
 *
 * @param $ext_link_name
 *   The ID of the external link to check.
 *
 * @return
 *   TRUE if the external link exists, FALSE otherwise.
 *
 * @see ext_links_load()
 */
function ext_links_exists($ext_link_name) {
  return (bool) db_query_range('SELECT 1 FROM {ext_links} WHERE name = :name', 0, 1, array(':name' => $ext_link_name))->fetchField();
}


/**
 * Returns the genus and the first epithet from the object taxon.
 *
 * @param $taxon
 *   A CDM Taxon instance object
 * @return array
 *  An associate array with two elements:
 *     - genus: the uninomial
 *     - species: the species epithet
 */
function ext_link_species_name($taxon) {
  $speciesName = array();
  $i = 0;
  while (isset($taxon->name->taggedName[$i]) && !isset($speciesName['species'])) {
    if ($taxon->name->taggedName[$i]->type == "name") {
      if (!isset($speciesName['genus'])) {
        $speciesName['genus'] = $taxon->name->taggedName[$i]->text;
      }
      else {
        $speciesName['species'] = $taxon->name->taggedName[$i]->text;
      }
    }
    $i++;
  }
  return $speciesName;
}

/**
 * Implements hook_block_info().
 */
function ext_links_block_info() {
  if (TRUE) {
    $block[0]["info"] = t("CDM - External Links");
    $block[0]["visibility"] = BLOCK_VISIBILITY_LISTED;
    $block[0]["pages"] = "cdm_dataportal/taxon/*\ncdm_dataportal/name/*";
    return $block;
  }
}

/**
 * Implements hook_block_view().
 */
function ext_links_block_view($delta) {
  switch ($delta) {
    case '0':
      $block['subject'] = 'External links';
      drupal_add_js(drupal_get_path('module', 'ext_links') . '/ext_links.js');
      if (variable_get('ext_links_appearance_grouped', 1)) {
        $block['content'] = render_ext_links_list_grouped();
      } else {
        $block['content'] = render_ext_links_list_plain();
      }
    }
      return $block;
}

/**
 * Applies the name tokens to the external link templates.
 *
 * @param $ext_link_template
 *
 * @return array
 *  Array with the keys:
 *     - title: the title of the link
 *     - url: the url of the link
 */
function ext_links_apply_template($ext_link_template) {
      $ext_link_array = [
        'title' => $ext_link_template->title,
        'url' => token_replace($ext_link_template->link, [],
          [
            'callback' => 'ext_links_token_replacement_urlencode',
            'clear' => true
          ])
      ];
  return $ext_link_array;
}

/**
 * Callback function to be passed to token_replace() to urlencode the token replacements.
 *
 * @param array $replacements
 *   The replacements for the tokens
 * @param array $data
 *    Unused, see token_replace()
 * @param array $options
 *    Unused, see token_replace()
 *
 * @see token_replace()
 */
function ext_links_token_replacement_urlencode(array &$replacements, array $data = [], array $options = []){
  foreach ($replacements as &$repl){
    $repl = rawurlencode($repl);
  }

}

/**
 * Creates html markup of ext_links grouped by category
 */
function render_ext_links_list_grouped() {

  $ext_links = ext_links_templates(true);

  $ext_links_by_category = [];

  foreach ($ext_links as $ext_link) {
    if(!array_key_exists($ext_link->category, $ext_links_by_category)){
      $ext_links_by_category[$ext_link->category] = [];
    }
    $ext_link_render_array = ext_links_apply_template($ext_link);
    $ext_links_by_category[$ext_link->category][] = $ext_link_render_array;
  }

  $block_content = '';
  foreach ($ext_links_by_category as $category => $ext_links) {
    $block_content .= "<label class=\"category-label\">" . $category . "</label><div class=\"category category-$category\">";
    foreach($ext_links as $ext_link){
      $block_content .= l($ext_link['title'], 'JavaScript:popupExternalLinks(\'' . $ext_link['url'] . '\')', ['external' => TRUE]) .'<br />';
    }
    $block_content .= "</div>";
  }

  return $block_content;
}

/**
 * Creates html markup of ext_links as plain list
 */
function render_ext_links_list_plain() {

  $ext_links_templates = ext_links_templates(true);
  $block_content = '';
  foreach ($ext_links_templates as $ext_link) {
    $ext_link = ext_links_apply_template($ext_link);
    $block_content .= l($ext_link['title'], 'JavaScript:popupExternalLinks(\'' . $ext_link['url'] . '\')', ['external' => TRUE]) .'<br />';
  }
  return $block_content;
}

/**
 * Implements hook_theme()
 */
function ext_links_theme() {
  return array(
    // theme_ext_links_admin_overview
    'ext_links_admin_overview' => array(
      'render element' => 'form',
      'file' => 'ext_links.admin.inc',
    )
  );
}

/**
 * Get the default external links.
 *
 * @return array
 *   Returns an array with default external links values.
 */
function ext_links_template_defaults() {
  $ext_links_default["gbif"] = array(
    'id' => "gbif",
    'link' => 'http://www.gbif.org/species/search?q=[cdm:taxon_name]',
    'title' => 'Search GBIF...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Specimens/Occurrences',
  );
  $ext_links_default["biocase"] = array(
    'id' => "biocase",
    'link' => 'http://search.biocase.org/edit/search/units/simpleSearch/query1?unitName=[cdm:taxon_name]',
    'title' => 'Search BioCASE...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Specimens/Occurrences',
  );
  $ext_links_default["nybg"] = array(
    'id' => "nybg",
    'link' => 'http://sweetgum.nybg.org/science/vh/specimen_list.php?SummaryData=[cdm:taxon_name]',
    'title' => 'Search NYBG...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Specimens/Occurrences',
  );
  $ext_links_default["tropicos"] = array(
    'id' => "tropicos",
    'link' => 'http://www.tropicos.org/NameSearch.aspx?name=[cdm:taxon_name]',
    'title' => 'Search Tropicos...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Specimens/Occurrences',
  );
  $ext_links_default["ncbi"] = array(
    'id' => "ncbi",
    'link' => 'http://www.ncbi.nlm.nih.gov/gquery/gquery.fcgi?term=%22[cdm:taxon_name]%22',
    'title' => 'Search NCBI...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Molecular Resources',
  );
  $ext_links_default["google"] = array(
    'id' => "google",
    'link' => 'http://images.google.com/images?q=%22[cdm:taxon_name]%22',
    'title' => 'Search Google Images...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Images',
  );
  $ext_links_default["flickr"] = array(
    'id' => "flickr",
    'link' => 'http://www.flickr.com/search/?w=all&q=%22[cdm:taxon_name]%22',
    'title' => 'Search flickr...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Images',
  );
  $ext_links_default["scholar"] = array(
    'id' => "scholar",
    'link' => 'http://scholar.google.de/scholar?q=%22[cdm:taxon_name]%22',
    'title' => 'Search Google scholar...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Literature',
  );
  $ext_links_default["bhl"] = array(
    'id' => "bhl",
    // BHL does not normalize rank terms, ssp., sub., subsp. are not unified, therefore we skip that part:
    'link' => 'https://www.biodiversitylibrary.org/search?searchTerm=[cdm:taxon_name:genus_or_uninomial]+[cdm:taxon_name:epithet]+[cdm:taxon_name:infraspecific_epithet]&stype=F#/names',
    'title' => 'Search BHL...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Literature',
  );
  $ext_links_default["arkive"] = array(
    // domain no longer exists! Remove extlink?
    'id' => "arkive",
    'link' => 'http://www.arkive.org/search.html?q=[cdm:taxon_name]&output=xml_no_dtd&client=arkive-images&site=arkive-images&ie=utf8&oe=utf8&num=20&proxystylesheet=tng-search&filter=0&getfields=*',
    'title' => 'Search ARKive...',
    'weight' => 0,
    'status' => 0,
    'category' => 'Images',
  );
  $ext_links_default["herbcat"] = array(
    'id' => "herbcat",
    'link' => 'http://apps.kew.org/herbcat/getSearchPageResults.do?typeSpecimen=false&imageSpecimen=false&currentName=false&typeOfCollection=all_collection&&genus=[cdm:taxon_name:genus_or_uninomial]&&species=[cdm:taxon_name:epithet]&infraspecificName=[cdm:taxon_name:infraspecific_epithet]',
    'title' => 'Search Kew Herbarium Catalogue...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Specimens/Occurrences',
  );
  $ext_links_default["iucn"] = array(
    'id' => "iucn",
    'link' => 'https://www.iucnredlist.org/search?query=[cdm:taxon_name]',
    'title' => 'Search IUCN Red List...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Conservation',
  );
  $ext_links_default["ipni"] = array(
    'id' => "ipni",
    'link' => 'https://www.ipni.org/?q=[cdm:taxon_name]',
    'title' => 'Search IPNI...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Classification',
  );
  $ext_links_default["wcsp"] = array(
    'id' => "wcsp",
    'link' => 'http://wcsp.science.kew.org/qsearch.do?plantName=[cdm:taxon_name]',
    'title' => 'Search World Checklist Monocots...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Classification',
  );
  $ext_links_default["tpl"] = array(
    'id' => "tpl",
    'link' => 'http://www.theplantlist.org/tpl/search?q=[cdm:taxon_name]',
    'title' => 'Search The Plant List...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Classification',
  );
  $ext_links_default["eol"] = array(
    'id' => "eol",
    'link' => 'http://eol.org/search/?q=[cdm:taxon_name]',
    'title' => 'Search Encyclopaedia of Life...',
    'weight' => 0,
    'status' => 1,
    'category' => 'General',
  );
  $ext_links_default["jstor"] = array(
    'id' => "jstor",
    'link' => 'https://plants.jstor.org/search?filter=name&so=ps_group_by_genus_species+asc&Query=[cdm:taxon_name]',
    'title' => 'Search JSTOR Plant Science...',
    'weight' => 0,
    'status' => 1,
    'category' => 'General',
  );
  $ext_links_default["epic"] = array(
    'id' => "epic",
    'link' => 'http://epic.kew.org/searchepic/summaryquery.do?scientificName=[cdm:taxon_name]&searchAll=true&categories=names&categories=bibl&categories=colln&categories=taxon&categories=flora',
    'title' => 'Search ePIC...',
    'weight' => 0,
    'status' => 1,
    'category' => 'General',
  );
  $ext_links_default["fairchild"] = array(
    //disabled since Fairchild Guide To Palms seems to be down
    'id' => "fairchild",
    'link' => 'http://palmguide.org/palmsearch.php?query=',
    'title' => 'Search Fairchild Guide To Palms...',
    'weight' => 0,
    'status' => 0,
    'category' => 'Specimens/Occurrences',
  );
  $ext_links_default["ggbn"] = array(
    'id' => "ggbn",
    'link' => 'http://www.ggbn.org/ggbn_portal/search/result?fullScientificName=[cdm:taxon_name]',
    'title' => 'Search GGBN...',
    'weight' => 0,
    'status' => 1,
    'category' => 'Molecular Resources',
  );
  return $ext_links_default;
}

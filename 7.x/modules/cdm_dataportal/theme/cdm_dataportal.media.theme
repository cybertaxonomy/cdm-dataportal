<?php
// $Id$

/**
 * Copyright (C) 2007 EDIT
 * European Distributed Institute of Taxonomy
 * http://www.e-taxonomy.eu
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1
 * See http://www.mozilla.org/MPL/MPL-1.1.html for the full license terms.
 */
function media_content_type_dir($media_representation, $default = false) {
  if ($media_representation->mimeType) {
    return substr($media_representation->mimeType, 0, stripos($media_representation->mimeType, '/'));
  }
  else {
    return $default;
  }
}
function getimagesize_remote($image_url) {
  $contents = cdm_http_request($image_url);
  if (! $contents) {
    return false;
  }

  $im = @ImageCreateFromString($contents); // using@ to avoid php user warnings
  if (! $im) {
    return false;
  }
  $gis[0] = ImageSX($im);
  $gis[1] = ImageSY($im);
  // array member 3 is used below to keep with current getimagesize standards
  $gis[3] = "width={$gis[0]} height={$gis[1]}";
  ImageDestroy($im);
  return $gis;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media($variables) {
  $descriptionElement = $variables['descriptionElement'];
  $mimeTypePreference = $variables['mimeTypePreference'];
  $out = '';

  _add_js_thickbox();

  $uuid = $descriptionElement->uuid;
  $feature = $descriptionElement->feature;
  $medias = $descriptionElement->media;

  foreach ($medias as $media) {
    $prefRepresentations = cdm_preferred_media_representations($media, $mimeTypePreference, 300, 400);
    $mediaRepresentation = array_shift($prefRepresentations);
    if ($mediaRepresentation) {

      $contentTypeDirectory = media_content_type_dir($mediaRepresentation);

      $out .= theme('cdm_media_mime_' . $contentTypeDirectory, array('mediaRepresentation' => $mediaRepresentation, 'feature' => $feature));

      // $attributes = array('class'=>'thickbox',
      // 'rel'=>'descriptionElement-'.$uuid, 'title'=>$feature->term);
      // for($i = 0; $part = $mediaRepresentation->representationParts[$i];
      // $i++){
      // if($i == 0){
      // $image_url = drupal_get_path('module',
      // 'cdm_dataportal').'/images/'.$feature->term.'-media.png';
      // $media = '<img src="'.$image_url.'" height="14px"
      // alt="'.$feature->term.'" />';
      // $out .= l($media, $part->uri, array('attributes' => $attributes,
      // 'absolute' => TRUE, 'html' => TRUE));
      // } else {
      // $out .= l('', $part->uri, array('attributes' => $attributes, 'absolute'
      // => TRUE));
      // }
      // }
    }
    else {
      // no media available, so display just the type term
      $out .= $feature->representation_L10n;
    }
  }
  return $out;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_mediaTypeTerm($variables) {
  $feature = $variables['feature'];
  $mediaUrl = $variables['mediaUrl'];
  global $base_url;

  $provider = '';
  // TODO directly use favicon from referred URI and overlay on $icon_image, but
  // for now we comment this out
  // if(strpos($mediaUrl, 'biodiversitylibrary.org') > 0){
  // $provider = '-BHL';
  // }

  $icon_image = $feature->representation_L10n . '-media' . $provider . '.png';
  $icon_url = $base_url . '/' . drupal_get_path('module', 'cdm_dataportal') . '/images/' . $icon_image;
  return '<img src="' . url($icon_url) . '" height="14px" alt="' . $feature->representation_L10n . '" />';
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_mime_application($variables) {
  $mediaRepresentation = $variables['mediaRepresentation'];
  $feature = $variables['feature'];
  $out = '';
  foreach ($mediaRepresentation->parts as $part) {
    $attributes = array(
      'title' => theme('cdm_feature_name', array('feature_name' => $feature->representation_L10n)),
      'target' => '_blank',
    );
    // $attributes = array('title'=>$feature->representation_L10n,
    // 'target'=>'_blank');
    // $attributes = array('title'=>'original publication', 'target'=>'_blank');
    $out .= l(theme('cdm_mediaTypeTerm', array('feature' => $feature, 'mediaUrl' => $part->uri)), $part->uri, array(
      'attributes' => $attributes,
      'absolute' => TRUE,
      'html' => TRUE,
    ));
  }
  return $out;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_mime_image($variables) {
  $mediaRepresentation = $variables['mediaRepresentation'];
  $feature = $variables['feature'];
  $out = '';
  // TODO thickbox is not used anymore -> delete ?
  $attributes = array(
    'class' => 'thickbox',
    'rel' => 'representation-' . $representation->uuid,
    'title' => $feature->representation_L10n,
  );
  for ($i = 0; $part = $representation->representationParts[$i]; $i++) {
    if ($i == 0) {
      $out .= l(theme('cdm_mediaTypeTerm', array('feature' => $feature, 'mediaUrl' => $part->uri)), $part->uri, array(
        'attributes' => $attributes,
        'absolute' => TRUE,
        'html' => TRUE,
      ));
    }
    else {
      $out .= l('', $part->uri, array(
        'attributes' => $attributes,
        'absolute' => TRUE,
      ));
    }
  }
  return $out;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_mime_text($variables) {
  $representation = $variables['representation'];
  $feature = $variables['feature'];
  $out = '';
  if(!empty($representation->parts)){
    foreach ($representation->parts as $part) {
      $attributes = array(
        'title' => theme('cdm_feature_name', array('feature_name' => $feature->representation_L10n)),
        'target' => '_blank',
      );
      // $attributes = array('title'=>t('original publication'),
      // 'target'=>'_blank');
      $out .= l(theme('cdm_mediaTypeTerm', array('feature' => $feature, 'mediaUrl' => $part->uri)), $part->uri, array(
        'attributes' => $attributes,
        'absolute' => TRUE,
        'html' => TRUE,
      ));
    }
  }
  return $out;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_caption($variables) {
  $media = $variables['media'];
  $elements = $variables['elements'];
  $fileUri = $variables['fileUri'];
  $media_metadata = cdm_read_media_metadata($media);

  $doTitle = ! $elements || array_search('title', $elements) !== false;
  $doDescription = ! $elements || array_search('description', $elements) !== false;
  $doArtist = ! $elements || array_search('artist', $elements) !== false;
  $doLocation = ! $elements || array_search('location', $elements) !== false;
  $doRights = ! $elements || array_search('rights', $elements) !== false;

  $descriptionPrefix = "";

  $out = '<dl class="media-caption">';
  // title
  if ($doTitle) {
    if ($media_metadata['title']) {
      $out .= '<dt class = "title">' . t('Title') . '</dt> <dd class = "title">' . $media_metadata['title'] . '</dd>';
      $descriptionPrefix = "- ";
    }
    else if (! ($doDescription && $media_metadata['description'])) {
      // use filename as fallbackoption if no description will be shown
      $out .= '<dt class = "title">' . t('Title') . '</dt> <dd class = "title">' . $media_metadata['filename'] . '</dd>';
      $descriptionPrefix = "- ";
    }
  }
  // description
  if ($media_metadata['description'] && $doDescription) {
    $out .= '<dt class = "description">' . t('Description') . '</dt> <dd class = "description">' . $descriptionPrefix . $media_metadata['description'] . '</dd>';
  }
  // artist
  if ($media_metadata['artist'] && $doArtist) {
    $out .= '<dt class = "artist">' . t('Artist') . '</dt> <dd class = "astist">' . $media_metadata['artist'] . '</dd>';
  }
  // location
  if ($doLocation) {
    $location = '';
    $location .= $media_metadata['location']['sublocation'];
    if ($location && $media_metadata['location']['city']) {
      $location .= ', ';
    }
    $location .= $media_metadata['location']['city'];
    if ($location && $media_metadata['location']['province']) {
      $location .= ', ';
    }
    $location .= $media_metadata['location']['province'];
    if ($location && $media_metadata['location']['country']) {
      $location .= ' (' . $media_metadata['location']['country'] . ')';
    }
    else {
      $location .= $media_metadata['location']['country'];
    }
    if ($location) {
      $out .= '<dt class = "location">' . t('Location') . '</dt> <dd class = "location">' . $location . '</dd>';
    }
  }
  // rights
  if ($doRights) {
    $rights = '';
    // copyrights
    $cnt = count($media_metadata['rights']['copyright']['agentNames']);
    if ($cnt > 0) {
      $rights .= '<dt class="rights">&copy;</dt> <dd class="rights"> ';
      for ($i = 0; $i < $cnt; $i++) {
        $rights .= $media_metadata['rights']['copyright']['agentNames'][$i];
        if ($i + 1 < $cnt) {
          $rights .= ' / ';
        }
      }
      $rights .= '</dd>';
    }
    // license
    $cnt = count($media_metadata['rights']['license']['agentNames']);
    if ($cnt > 0) {
      $rights .= '<dt class ="license">' . t('License') . '</dt> <dd class = "license">';
      for ($i = 0; $i < $cnt; $i++) {
        $rights .= $media_metadata['rights']['license']['agentNames'][$i];
        if ($i + 1 < $cnt) {
          $rights .= ' / ';
        }
      }
      $rights .= '</dd>';
    }
    if ($rights) {
      $out .= $rights . '</dt>';
    }
  }
  // TODO add all other metadata elemenst generically
  $out .= '</dl>';
  // return value
  return $out;
}

/**
 *
 * @param $mediaList an
 *          array of Media entities
 * @param
 *          $maxExtend
 * @param
 *          $cols
 * @param
 *          $maxRows
 * @param $captionElements an
 *          array possible values are like in the following example:
 *          array('title', 'description', 'file', 'filename'),
 *          to add a link to the caption: array('titlecache', '#uri'=>t('open
 *          Image'));
 * @param $mediaLinkType valid
 *          values:
 *          "NONE": do not link the images,
 *          "LIGHTBOX": open the link in a light box,
 *          "NORMAL": link to the image page or to the $alternativeMediaUri if
 *          it is defined
 * @param $alternativeMediaUri an
 *          array of alternative URIs to link the images wich will overwrite the
 *          URIs of the media parts.
 *          The order of URI in this array must correspond with the order of
 *          images in $mediaList
 * @param $galleryLinkUri an
 *          URI to link the the hint on more images to; if null no link is
 *          created
 * @return unknown_type
 */
function theme_cdm_media_gallerie($variables) {

  $mediaList = $variables['mediaList'];
  
  //do not show an empty gallery
  if (count($mediaList) == 0){
      return;
  }
  
  $galleryName = $variables['galleryName'];
  $maxExtend = $variables['maxExtend'];
  $cols = $variables['cols'];
  $maxRows = $variables['maxRows'];
  $captionElements = $variables['captionElements'];
  $mediaLinkType = $variables['mediaLinkType'];
  $alternativeMediaUri = $variables['alternativeMediaUri'];
  $galleryLinkUri = $variables['galleryLinkUri'];
  $showCaption = $variables['showCaption'];
  if (! is_array($captionElements)) {
    $captionElements = array();
  }
  // TODO correctly handle multiple media representation parts
  //@WA this does not work when clean_urls is enabled..
  // $_SESSION['cdm']['last_gallery'] = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], "?q=") + 3);
  //..this works.
  $_SESSION['cdm']['last_gallery'] =  current_path();
  // prevent from errors
  if (! isset($mediaList[0])) {
   // return;
  }

  // --- duplicate supression: media can be reused but should only be shown
  // once.
  $tempMediaList = array();
  $tempMediaUuids = array();
  foreach ($mediaList as $media) {
    if (! in_array($media->uuid, $tempMediaUuids)) {
      $tempMediaList[] = $media;
      $tempMediaUuids[] = $media->uuid;
    }
  }
  $mediaList = $tempMediaList;

  // ---
  $galleryID = "media_gallery_" . $galleryName;
  
  $mediaPartLinkAttributes = array();
  $openMediaLinkAttributes = array();

  // prepare media links
  $doLink = false;
  if ($mediaLinkType != 'NONE') {
    $doLink = true;
  }
  if ($mediaLinkType == 'LIGHTBOX') {
    $doLink = true;
    _add_js_lightbox($galleryID);
  }

  // render the media gallery grid
  $out = '<table id="' . $galleryID . '" class="media_gallery">';
  $out .= '<colgroup>';
  for ($c = 0; $c < $cols; $c++) {
    $out .= '<col width="' . (100 / $cols) . '%">';
  }
  $out .= '</colgroup>';

  for ($r = 0; ($r < $maxRows || ! $maxRows) && count($mediaList) > 0; $r++) {
    $captionParts = array();
    $mediaIndex = 0;
    $out .= '<tr>';
    for ($c = 0; $c < $cols; $c++) {
      $media = array_shift($mediaList);

      if (isset($media->representations[0]->parts[0])) {

        //
        // find preferred representation
        //
        $preferred_media_representations_list = cdm_preferred_media_representations($media, array(
          'image/jpg',
          'image/jpeg',
          'image/png',
          'image/gif',
        ), $maxExtend, $maxExtend);
        if (count($preferred_media_representations_list) == 0) {
          // fallback to using the first one in the list
          $preferred_media_representations_list = $media->representations;
        }
        $preferred_media_representation = array_shift($preferred_media_representations_list);

        // $preferred_media_representation->parts[0]->uri =
        // "http://127.0.0.1/images/palmae/palm_tc_14415_1.jpg";
        $contentTypeDirectory = media_content_type_dir($preferred_media_representation, 'application');
        $mediaIndex++;
       
         $mediaPartHtml = theme('cdm_media_gallerie_' . $contentTypeDirectory, 
         array(
            'mediaRepresentationPart' => $preferred_media_representation->parts[0], 
            'maxExtend' => $maxExtend, 
            'addPassePartout' => TRUE
         ));
        // --- compose Media Link
        $mediaLinkUri = false;
        if ($alternativeMediaUri) {
          if (isset($alternativeMediaUri[$mediaIndex])) {
            $mediaLinkUri = $alternativeMediaUri[$mediaIndex];
          }
          if (is_string($alternativeMediaUri)) {
            $mediaLinkUri = $alternativeMediaUri;
          }
        }
        else {
          $mediaLinkUri = $preferred_media_representation->parts[0]->uri;
        }

        _add_js_ahah();
        $content_url = cdm_compose_url(CDM_WS_PORTAL_MEDIA, $media->uuid);

        $cdm_proxy_url = url('cdm_api/proxy/' . urlencode($content_url) . "/cdm_media_caption/" . serialize($captionElements));
        $captionPartHtml = '<div class="ahah-content" rel="' . $cdm_proxy_url . '"><span class="loading" style="display: none;">Loading ....</span></div>';

        // generate gallery caption
        if ($mediaLinkType == 'LIGHTBOX' && $contentTypeDirectory == 'image') {
          $mediaPartLinkAttributes['class'] = array('lightbox');
        }
        else {
          $mediaPartLinkAttributes['target'] = "specimen";
          $openMediaLinkAttributes['target'] = "specimen";
        }
        // generate & add caption to lightbox
        $lightBoxCaptionElements = null;
        $cdm_proxy_url = url('cdm_api/proxy/' . urlencode($content_url) . "/cdm_media_caption"); // .($lightBoxCaptionElements?'/'.join
        // (',',$lightBoxCaptionElements):''));
        $mediaPartLinkAttributes['alt'] = '<div class="ahah-content" rel="' . $cdm_proxy_url . '"><span class="loading" style="display: none;">Loading ....</span></div>';

        if (isset($captionElements['#uri'])) {
          if ($contentTypeDirectory == 'image') {            
            $captionPartHtml .= '<div class="media-caption-link">' . l($captionElements['#uri'], path_to_media($media->uuid), array(
              'attributes' => array(), 'html' => TRUE,
            )) . '</div>';
          }
          else {
            $openMediaLinkAttributes['absolute'] = TRUE;
            $captionPartHtml .= '<div class="media-caption-link">' . l($captionElements['#uri'], $mediaLinkUri, array(
              'attributes' => $openMediaLinkAttributes, 'html' => TRUE,
            )) . '</div>';
          }
        }
        $captionParts[] = $captionPartHtml;

        // --- surround imagePart with link
        if ($doLink) {
          $mediaPartHtml = l($mediaPartHtml, $mediaLinkUri, array(
            'attributes' => $mediaPartLinkAttributes, 'html' => TRUE,
          ));
        }
      }
      else {
        $mediaPartHtml = '';
        $captionParts[] = '';
      }
      $out .= '<td class="media">' . $mediaPartHtml . '</td>';
    }
    $out .= '</tr>'; // end of media parts
    if ($showCaption) {
      if (count($captionElements) > 0) {
        $out .= '<tr>';
        // add caption row
        foreach ($captionParts as $captionPartHtml) {
          $out .= '<td class="caption">' . $captionPartHtml . '</td>';
        }
        $out .= '</tr>';
      }
    }
  }
  
  if ($galleryLinkUri) {
    if (count($mediaList) > 0) {
      $moreHtml = count($mediaList) . ' ' . t('more in gallery');
    }
    else {
      $moreHtml = t('open gallery');
    }
    $moreHtml = l($moreHtml, $galleryLinkUri);
    $out .= '<tr><td colspan="' . $cols . '">' . $moreHtml . '</td></tr>';
  }
  $out .= '</table>';
  return $out;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_gallerie_image($variables) {
    
  $mediaRepresentationPart = $variables['mediaRepresentationPart'];
  $maxExtend = $variables['maxExtend'];
  $addPassePartout = $variables['addPassePartout'];
  $attributes = $variables['attributes'];
  
  $out = '';
  
  // TODO merge with theme_cdm_media_mime_image?
  if (isset($mediaRepresentationPart)) {

    $h = $mediaRepresentationPart->height;
    $w = $mediaRepresentationPart->width;
    if ($w == 0 || $h == 0) {
      $image_uri = str_replace(' ', '%20', $mediaRepresentationPart->uri); // take
      // url
      // and
      // replace
      // spaces
      $imageDimensions = getimagesize_remote($image_uri);
      if (! $imageDimensions) {
        return '<div>' . t('Image unavailable, uri: ') . $mediaRepresentationPart->uri . '</div>';
      }
      $w = $imageDimensions[0];
      $h = $imageDimensions[1];
    }
    $margins = '0 0 0 0';
    $ratio = $w / $h;
    if ($ratio > 1) {
      $displayHeight = round($maxExtend / $ratio);
      $displayWidth = $maxExtend;
      $m = round(($maxExtend - $displayHeight) / 2);
      $margins = 'margin:' . $m . 'px 0 ' . $m . 'px 0;';
    }
    else {
      $displayHeight = $maxExtend;
      $displayWidth = round($maxExtend * $ratio);
      $m = round(($maxExtend - $displayWidth) / 2);
      $margins = 'margin:0 ' . $m . 'px 0 ' . $m . 'px;';
    }

    // turn attributes array into string
    $attrStr = ' ';
    // $attributes['title'] = 'h:'.$h.', w:'.$w.',ratio:'.$ratio;
    if (is_array($attributes)) {
      foreach ($attributes as $name => $value) {
        $attrStr .= $name . '="' . $value . '" ';
      }
    }

    if ($addPassePartout) {
      $out .= '<div class="image-passe-partout" style="width:' . $maxExtend . 'px; height:' . $maxExtend . 'px;">';
    }
    else {
      // do not add margins if no pass partout is shown
      $margins = '';
    }
    $out .= '<img src="' . $mediaRepresentationPart->uri . '" width="' . $displayWidth . '" height="' . $displayHeight . '" style="' . $margins . '"' . $attrStr . ' />';

    if ($addPassePartout) {
      $out .= '</div>';
    }
    return $out;
  }
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_gallerie_application($variables) {
  $mediaRepresentationPart = $variables['mediaRepresentationPart'];
  $maxExtend = $variables['maxExtend'];
  $addPassePartout = $variables['addPassePartout'];
  $attributes = $variables['attributes'];
  if (isset($mediaRepresentationPart)) {

    if ($addPassePartout) {
      $out .= '<div class="image-passe-partout" style="width:' . $maxExtend . 'px; height:' . $maxExtend . 'px;">';
    }
    else {
      // do not add margins if no pass partout is shown
      $margins = '';
    }
    $out .= '<div class="appication">Web Application</div>';

    if ($addPassePartout) {
      $out .= '</div>';
    }
    return $out;
  }
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_media_gallerie_text($variables) {
  $mediaRepresentationPart = $variables['mediaRepresentationPart'];
  $maxExtend = $variables['maxExtend'];
  $addPassePartout = $variables['addPassePartout'];
  $attributes = $variables['attributes'];
  if (isset($mediaRepresentationPart)) {

    if ($addPassePartout) {
      $out .= '<div class="image-passe-partout" style="width:' . $maxExtend . 'px; height:' . $maxExtend . 'px;">';
    }
    else {
      // do not add margins if no pass partout is shown
      $margins = '';
    }
    $out .= '<div class="appication">Web Application</div>';

    if ($addPassePartout) {
      $out .= '</div>';
    }
    return $out;
  }
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_openlayers_image($variables) {
  $mediaRepresentationPart = $variables['mediaRepresentationPart'];
  $maxExtend = $variables['maxExtend'];

  // see
  // http://trac.openlayers.org/wiki/UsingCustomTiles#UsingTilesWithoutaProjection
  // and http://trac.openlayers.org/wiki/SettingZoomLevels
  drupal_add_js(drupal_get_path('module', 'cdm_dataportal') . '/js/OpenLayers/OpenLayers.js', array('type' => 'file', 'weight' => JS_LIBRARY));

  // TODO merge code below with code from theme_cdm_media_gallerie_image
  // var_dump("MEDIA URI: " . $mediaRepresentationPart->uri);
  // TODO merge code below with code from theme_cdm_media_gallerie_image
  $w = $mediaRepresentationPart->width;
  $h = $mediaRepresentationPart->height;

  if ($w == 0 || $h == 0) {
    $image_uri = str_replace(' ', '%20', $mediaRepresentationPart->uri); // take
    // url
    // and
    // replace
    // spaces
    $imageDimensions = getimagesize_remote($image_uri);
    if (! $imageDimensions) {
      return '<div>' . t('Image unavailable, uri:') . $mediaRepresentationPart->uri . '</div>';
    }
    $w = $imageDimensions[0];
    $h = $imageDimensions[1];
  }

  // calculate maxResolution (default is 360 deg / 256 px) and the bounds
  if ($w > $h) {
    $lat = 90;
    $lon = 90 * ($h / $w);
    $maxRes = $w / $maxExtend;
  }
  else {
    $lat = 90 * ($w / $h);
    $lon = 90;
    $maxRes = $h / $maxExtend;
  }

  $maxRes *= 1;
  drupal_add_js('
 var map;

 var imageLayerOptions={
     maxResolution: ' . $maxRes . ',
     maxExtent: new OpenLayers.Bounds(0, 0, ' . $w . ', ' . $h . ')
  };
  var mapOptions={
      controls:
       [
         new OpenLayers.Control.PanZoom(),
         new OpenLayers.Control.Navigation({zoomWheelEnabled: false, handleRightClicks:true, zoomBoxKeyMask: OpenLayers.Handler.MOD_CTRL})
       ],
     restrictedExtent:  new OpenLayers.Bounds(0, 0, ' . $w . ', ' . $h . ')
  };

 var graphic = new OpenLayers.Layer.Image(
          \'Image Title\',
          \'' . $mediaRepresentationPart->uri . '\',
          new OpenLayers.Bounds(0, 0, ' . $w . ', ' . $h . '),
          new OpenLayers.Size(' . $w . ', ' . $h . '),
          imageLayerOptions
          );

 function init() {
   map = new OpenLayers.Map(\'openlayers_image\', mapOptions);
   map.addLayers([graphic]);
   map.setCenter(new OpenLayers.LonLat(0, 0), 1);
   map.zoomToMaxExtent();
 }

jQuery(document).ready(function(){
  init();

});', array('type' => 'inline',));
  $out = '<div id="openlayers_image" class="image_viewer" style="width: ' . $maxExtend . 'px; height:' . ($maxExtend) . 'px"></div>';
  return $out;
}
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_preferredImage($variables) {
   
  $media = $variables['media'];
  $defaultRepresentationPart = $variables['defaultRepresentationPart'];
  $imageMaxExtend = $variables['imageMaxExtend'];
  $parameters = $variables['parameters'];
  
  $out = '';
  
  if (isset($media[0])) {
    $representationPart = $media[0]->representations[0]->parts[0];
    if ($parameters) {
      $representationPart->uri . $parameters;
    }
  }
  else {
    $representationPart = $defaultRepresentationPart;
  }

  $attributes = array(
    'alt' => (isset($media->representations[0]->parts[0]->uri) ? $media->representations[0]->parts[0]->uri : "no image available"),
  );
  $out .= theme('cdm_media_gallerie_image', array('mediaRepresentationPart' => $representationPart, 'maxExtend' => $imageMaxExtend, 'addPassePartout' => false, 'attributes' => $attributes));

  return $out;
}

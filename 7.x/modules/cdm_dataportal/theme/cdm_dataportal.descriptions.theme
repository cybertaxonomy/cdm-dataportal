<?php
/**
 * @file
 * Description theming functions.
 *
 * @copyright
 *   (C) 2007-2012 EDIT
 *   European Distributed Institute of Taxonomy
 *   http://www.e-taxonomy.eu
 *
 *   The contents of this module are subject to the Mozilla
 *   Public License Version 1.1.
 * @see http://www.mozilla.org/MPL/MPL-1.1.html
 */


/**
 * Theme function to alter the feature representation.
 *
 * It is highly qeutionalbe if this function should be completely removed.
 * If a feature needs a different representation this should be edited directly
 * in the cdm data but it shoud not be tweeked like this in the portal.
 *
 * Used in:
 *  - theme_cdm_feature_nodesTOC()
 *  - theme_cdm_feature_nodes()
 *  - theme_cdm_media_mime_application()
 *  - theme_cdm_media_mime_text()
 *
 * TODO delete this function? (a.kohlbecker feb 2013)
 *
 */
function theme_cdm_feature_name($variables) {
  $feature_name = $variables['feature_name'];
  return t($feature_name);
}


  /**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_FeatureTree_hierarchy($variables) {

  $FeatureTreeUuid = $variables['FeatureTreeUuid'];
  if (!is_uuid($FeatureTreeUuid)) {
    return;
  }

  $out = '';
  $featureTree = cdm_ws_get(CDM_WS_FEATURETREE, array(
    $FeatureTreeUuid,
  ));

  if (isset($featureTree) && isset($featureTree->root)) {
    $out = '<ul class="' . $featureTree->class . '">';
    $out .= theme('FeatureTree_hierarchy_children', array('node' => $featureTree->root));
    $out .= '</ul>';
  }
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_FeatureTree_hierarchy_children($variables) {

  $node = $variables['node'];
  $out = '';
  if (isset($node->childNodes)) {

    foreach ($node->childNodes as $childNode) {
      $out .= '<li>' . check_plain($childNode->feature->representation_L10n);
      if (isset($childNode->childNodes) && count($childNode->childNodes) > 0) {
        $out .= '<ul>' . theme('FeatureTree_hierarchy_children', array('node' => $childNode)) . '</ul>';
      }
      $out .= '</li>';
    }
  }
  return $out;
}


/**
 * Theme function to render CDM DescriptionElements of the type CategoricalData.
 *
 * @param array $variables
 *   An associative array containing:
 *  - element: the CategoricalData element
 * @return string
 *   a html representation of the given CategoricalData element
 *
 * @ingroup themeable
 */
function theme_cdm_descriptionElement_CategoricalData($variables) {
  $element = $variables['element'];

  $state_data_strings = array();
  if (isset($element->stateData)) {
    foreach ($element->stateData as $stateData) {

      $state  = NULL;

      if(isset($stateData->state)){
        $state = cdm_term_representation($stateData->state);
      }

      if (isset($stateData->modifyingText_L10n)) {
        $state = ' ' . $stateData->modifyingText_L10n;
      }

      $modifiers_strings = cdm_modifers_representations($stateData);

      $state_data_strings[] = $state . ($modifiers_strings ? ' ' . $modifiers_strings : '');

    }
  }


  $out = '<span class="' . html_class_attribute_ref($element) . '">' . implode(', ', $state_data_strings) . '</span>';

  $feature_block_settings = get_feature_block_settings($element->feature->uuid);
  $annotations_and_sources = handle_annotations_and_sources(
    $element,
    $feature_block_settings,
    $out, // the description element text
    $element->feature->uuid
  );

  if(!empty($annotations_and_sources['source_references'])){
    $out .= ' ' . join(' ', $annotations_and_sources['source_references'] );
  }
  return $out . $annotations_and_sources['foot_note_keys'];
}

/**
 * Theme function to render CDM DescriptionElements of the type QuantitativeData.
 *
 * The function renders the statisticalValues contained in the QuantitativeData
 * entity according to the following scheme:
 *
 * (ExtremeMin)-Min-Average-Max-(ExtremeMax)
 *
 * All modifiers of these values are appended.
 *
 * If the QuantitativeData is containing more statisticalValues with further
 * statisticalValue types, these additional measures will be appended to the
 * above string separated by whitespace.
 *
 * Special cases;
 * 1. Min==Max: this will be interpreted as Average
 *
 * @param array $variables
 *   An associative array containing:
 *    - element: the QuantitativeData element
 *
 * @return string
 *   a html representation of the given QuantitativeData element
 *
 * @ingroup themeable
 */
function theme_cdm_descriptionElement_QuantitativeData($variables) {
  /*
   * - statisticalValues
   *   - value
   *   - modifiers
   *   - type
   * - unit->representation_L10n
   * - modifyingText
   * - modifiers
   * - sources
   */
  $element = $variables['element'];

  $out = '';
  $type_representation = NULL;

  // FIXME use UUIDs instead? how about idInVocab?
  $min_max = array(
    'Extreme Min' => NULL,
    'Min' => NULL,
    'Average' => NULL,
    'Max' => NULL,
    'Extreme Max' => NULL,
  );

  if (isset($element->statisticalValues)) {
    $value_array = array();
    foreach ($element->statisticalValues as $statistical_val) {

      $value = '';
      $value_markup = '';

      if (isset($statistical_val->value)) {
        $value = $statistical_val->value;
      }

      if (isset($statistical_val->type)) {
        $statistical_val_type_representation = cdm_term_representation($statistical_val->type);
        // $statistical_val->type->termType;
        // $statistical_val->type->userFriendlyTypeName;
      }

      $val_modifiers_strings = cdm_modifers_representations($statistical_val);

      if (array_key_exists($statistical_val->type->titleCache, $min_max)) {
        // put into min max array
        $min_max[$statistical_val->type->titleCache] = $value;
      }
      else {
        // otherwise generic output to be appended to 'min-max' string
        $value_markup = '<span class="' . html_class_attribute_ref($statistical_val) . ' ' . $statistical_val->type->termType . ' ">' .
          $value. ($statistical_val_type_representation ? ' <span class="type">' . $statistical_val_type_representation . '</span>' : '') .
          '</span>';
      }

      if ($val_modifiers_strings) {
        $value_markup .= ' ' . $val_modifiers_strings;
      }

      if($value_markup){
        $value_array[] = $value_markup;
      }

    }

    // create min-max string
    if($min_max['Min'] == $min_max['Max'] && $min_max['Min'] !== NULL){
      $min_max['Average'] = $min_max['Min'];
      $min_max['Min'] = NULL;
      $min_max['Max'] = NULL;
    }

    $min_max_markup = '';

    foreach ($min_max as $key=>$val) {
      if ( $val !== NULL ){
        if ( strlen($min_max_markup) ){
          $min_max_markup .= 'â€“';
        }
        if(str_beginsWith($key, 'Extreme')){
          $val = "($val)";
        }
        $min_max_markup .= $val;
      }
    }


    $out .= $min_max_markup . ' ' . implode($value_array, ', ');
  }

  if (isset($element->unit)) {
    $out .= ' <span class="unit" title="' . cdm_term_representation($element->unit) . '">'. cdm_term_representation_abbreviated($element->unit) . '</span>';
  }

  // modifiers of the description element itself
  $modifier_string = cdm_modifers_representations($element);
  $out .= ($modifier_string ? ' ' . $modifier_string : '');
  if (isset($element->modifyingText_L10n)) {
    $out .=  ' ' . $element->modifyingText_L10n;
  }

  $feature_block_settings = get_feature_block_settings($element->feature->uuid);
  $annotations_and_sources = handle_annotations_and_sources(
    $element,
    $feature_block_settings,
    $out, // the description element text
    $element->feature->uuid
  );

  if(!empty($annotations_and_sources['source_references'])){
    $out .= ' ' . join(' ', $annotations_and_sources['source_references'] );
  }
  return $out . $annotations_and_sources['foot_note_keys'];

}

/**
 * Theme function to render CDM DescriptionElements of the type IndividualsAssociations.
 *
 * @param array $variables
 *   An associative array containing:
 *  - element: the IndividualsAssociations element
 * @return html representation of the given IndividualsAssociations element
 *
 * @ingroup themeable
 */
function theme_cdm_descriptionElement_IndividualsAssociation($variables) {

  $element = $variables['element'];

  $out = '';

  $render_array = compose_cdm_specimenOrObservation($element->associatedSpecimenOrObservation);

  if (isset($element->description_L10n)) {
    $out .=  ' ' . $element->description_L10n;
  }

  $out .= drupal_render($render_array);

  $feature_block_settings = get_feature_block_settings($element->feature->uuid);
  $annotations_and_sources = handle_annotations_and_sources(
    $element,
    $feature_block_settings,
    $out, // the description element text
    $element->feature->uuid
  );

  if(!empty($annotations_and_sources['source_references'])){
    $out .= ' ' . join(' ', $annotations_and_sources['source_references'] );
  }
  return $out . $annotations_and_sources['foot_note_keys'];


}

/**
 * Theme function to render CDM DescriptionElements of the type TaxonInteraction.
 *
 * @param array $variables
 *   An associative array containing:
 *  - element: the TaxonInteraction element
 * @return html representation of the given TaxonInteraction element
 *
 * @ingroup themeable
 */
function theme_cdm_descriptionElement_TaxonInteraction($variables) {

  $element = $variables['element'];

  $out = '';

  if (isset($element->description_L10n)) {
    $out .=  ' ' . $element->description_L10n;
  }

  if(isset($element->taxon2)){
    $out = theme('cdm_taxonName',
        array(
            'taxonName' => $element->taxon2->name,
            'nameLink' => url(path_to_taxon($element->taxon2->uuid))
        )
      );
  }

  $feature_block_settings = get_feature_block_settings($element->feature->uuid);
  $annotations_and_sources = handle_annotations_and_sources(
    $element,
    $feature_block_settings,
    $out, // the description element text
    $element->feature->uuid
  );

  if(!empty($annotations_and_sources['source_references'])){
    $out .= ' ' . join(' ', $annotations_and_sources['source_references'] );
  }
  return $out . $annotations_and_sources['foot_note_keys'];

}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function compare_image_sources($a, $b) {
  if ($a->multilanguageText_L10n->text == $b->multilanguageText_L10n->text) {
    return 0;
  }
  return ($a->multilanguageText_L10n->text < $b->multilanguageText_L10n->text) ? -1 : 1;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_description_element_image_source($variables) {
  $image_sources = $variables['image_sources'];
  $asListElement = $variables['asListElement'];
  $out = '';
  $separator = ',';
  RenderHints::pushToRenderStack('descriptionElementImageSource');
  RenderHints::setFootnoteListKey(UUID_IMAGE_SOURCES);

  // Sorting the image sources.
  usort($image_sources, "compare_image_sources");
  // Generate the footnotes.
  foreach ($image_sources as $image_source) {
    $footNoteKeys = cdm_annotations_as_footnotekeys($image_source);
    foreach ($image_source->sources as $source) {
      if (_is_original_source_type($source)) {
        $fn_key = FootnoteManager::addNewFootnote(original_source_footnote_list_key(), theme('cdm_OriginalSource', array(
          'source' => $source,
          'doLink' => FALSE,
        )));
        // Ensure uniqueness of the footnote keys.
        cdm_add_footnote_to_array($footNoteKeys, $fn_key);
      }
    }
    // Sort and render footnote keys.
    $footnote_key_list_str = '';
    asort($footNoteKeys);
    foreach ($footNoteKeys as $footNoteKey) {
      $footnote_key_list_str .= theme('cdm_footnote_key', array('footnoteKey' => $footNoteKey, 'separator' => ($footnote_key_list_str ? $separator : '')));
    }
    // Return value!
    $out .= '<span class="descriptionElement descriptionElement-' . $image_source->uuid . '">' . $image_source->multilanguageText_L10n->text . $footnote_key_list_str . '; </span>';
  }

  RenderHints::popFromRenderStack();
  return $out;
}



/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_description_ordered_distributions($variables) {

  $distribution_tree = $variables['distribution_tree'];
  // TODO pass as parameter
  $feature_block_settings = get_feature_block_settings(UUID_DISTRIBUTION);

  // Returning NULL if there are no description elements.
  if ($distribution_tree == null) {
    return NULL;
  }

  // Initialization of some variables.
  $out = '';
  $separator = ',';
  RenderHints::pushToRenderStack('descriptionElementDistribution');
  RenderHints::setFootnoteListKey(UUID_DISTRIBUTION);

  $ordered_areas = $distribution_tree;
  if (isset($ordered_areas->rootElement->children)) {
    $ordered_areas = $ordered_areas->rootElement->children;
  }

  // Printing the distributions.
  if (is_array($ordered_areas) && count($ordered_areas) > 0) {
    foreach ($ordered_areas as $element_level1) {
      // Level1.
      $out .= '<dt>' . $element_level1->nodeId->representation_L10n . ':</dt> ';
      $out .= '<dd>';

      // Level3.
      foreach ($element_level1->children as $element_level3) {
        $text_l3 = $element_level3->nodeId->representation_L10n;
        $fnKeysLevel3Str = '';
        $fnKeysLevel3 = cdm_annotations_as_footnotekeys($element_level3->data);
        if (isset($element_level3->data[0])) {
          foreach ($element_level3->data as $description_level3){
            foreach ($description_level3->sources as $source) {
              if (_is_original_source_type($source)) {
                $fn_key3 = FootnoteManager::addNewFootnote(
                  original_source_footnote_list_key(),
                  theme('cdm_OriginalSource', array(
                      'source' => $source,
                      'doLink' => $feature_block_settings['link_to_reference'] == 1,
                      'do_link_to_name_used_in_source' => $feature_block_settings['link_to_name_used_in_source'] == 1
                    )
                ));
                cdm_add_footnote_to_array($fnKeysLevel3, $fn_key3);
              }
            }
          }
        }
        // Level4.
        $l4_regions = array();
        foreach ($element_level3->children as $element_level4) {
          if (isset($element_level4->data[0])) {
            $text_l4 = $element_level4->nodeId->representation_L10n;
            $l4_regions[$element_level3->nodeId->representation_L10n] = array();
            $fnKeysLevel4Str = '';
            foreach($element_level4->data as $description_level4) {
              $fnKeysLevel4 = cdm_annotations_as_footnotekeys($description_level4);
              foreach ($description_level4->sources as $source) {
                if (_is_original_source_type($source)) {
                  $fn_key4 = FootnoteManager::addNewFootnote(
                      original_source_footnote_list_key(),
                      theme('cdm_OriginalSource', array(
                        'source' => $source,
                        'doLink' => $feature_block_settings['link_to_reference'] == 1,
                        'do_link_to_name_used_in_source' => $feature_block_settings['link_to_name_used_in_source'] == 1
                      )));
                  cdm_add_footnote_to_array($fnKeysLevel4, $fn_key4);
                }
              }
              usort($fnKeysLevel4, "footnotes_key_compare");
              if(!isset( $l4_regions[$text_l4])){
                $l4_regions[$text_l4] = $fnKeysLevel4;
              } else {
                $l4_regions[$text_l4] = array_merge($l4_regions[$text_l4], $fnKeysLevel4);
              }
            }
          }
        }// Level4.
        // Managing level3 and level4 for generating the right output.
        usort($fnKeysLevel3, "footnotes_key_compare");
        foreach ($fnKeysLevel3 as $key3) {
          foreach ($l4_regions as $key4 => $value4) {
            cdm_add_footnote_to_array($l4_regions[$key4], $key3);
          }
        }
        if ($element_level3->numberOfChildren == 1 && $text_l3 == $element_level3->children[0]->nodeId->representation_L10n) {
          // var_dump($element_level3->children[0]->data->area->representation_L10n);
          $fnStr = '';
          $region = array_pop($l4_regions);
          foreach ($region as $key) {
            $fnStr .= theme('cdm_footnote_key', array('footnoteKey' => $key, 'separator' => ($fnStr ? $separator : '')));
          }
          $out .= "$text_l3 $fnStr; ";
          // Removing whitespaces when &fnStr is empty.
          if (substr($out, -3) == ' ; ') {
            $out = substr($out, 0, -3) . '; ';
          }
        } else {
          $fnKeysLevel3Str = '';
          foreach ($fnKeysLevel3 as $key) {
            $fnKeysLevel3Str .= theme('cdm_footnote_key', array('footnoteKey' => $key, 'separator' => ($fnKeysLevel3Str ? $separator : '')));
          }
          $text_l4_aux = '';
          foreach ($l4_regions as $key => $value) {
            $fnKeysLevel4Str = '';
            if (is_array($l4_regions[$key])) {
              foreach ($l4_regions[$key] as $fnkey) {
                $fnKeysLevel4Str .= theme('cdm_footnote_key', array('footnoteKey' => $fnkey, 'separator' => ($fnKeysLevel4Str ? $separator : '')));
              }
            }
            // if ($key != $text_l3 || sizeof($l4_regions > 1)){
            if ($key != $text_l3) {
              $text_l4_aux .= "$key $fnKeysLevel4Str, ";
            }
          }
          $text_l4_aux = substr($text_l4_aux, 0, -2);

          if (strlen($text_l4_aux) > 0) {
            $out .= "$text_l3 $fnKeysLevel3Str ($text_l4_aux); ";
          }
          else {
            $out .= "$text_l3 $fnKeysLevel3Str; ";
          }
        }
      }// Level3.
      $out = substr($out, 0, -2);
      $out .= '.</dd>';
    }// Level1.
  }
  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_IdentificationKey($variables) {
  $out = '';
  $identificationKey = $variables['identificationKey'];
  $doLinkToKeyPage = $variables['doLinkToKeyPage'];
  $showIdentificationKeyTitle = $variables['showIdentificationKeyTitle'];
  $parentRenderPath = RenderHints::getRenderPath();
  RenderHints::pushToRenderStack("IdentificationKey");

  if ($showIdentificationKeyTitle) {
    if ($doLinkToKeyPage) {
      $out = l($identificationKey->titleCache, path_to_key($identificationKey->class, $identificationKey->uuid));
    }
    else {
      $out = $identificationKey->titleCache;
    }
  }
  if (isset($identificationKey->sources) && is_array($identificationKey->sources)) {
    // order and display sources.
    $sources = oder_sources($identificationKey->sources, TRUE);
    $out .= '<div class="sources">';
    $out .=  implode('', $sources);
    $out .= '</div>';
  }
  // Display annotations.
  $out .= theme('cdm_annotations', array('annotations' => cdm_ws_getAnnotationsFor($identificationKey), 'enclosingTag' => 'div'));
  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_polytomousKey($variables) {
  $polytomousKey = $variables['polytomousKey'];

  // TODO settings needed.
  // @see http://en.wikipedia.org/wiki/Single_access_key#Presentation_styles
  // @see http://dev.e-taxonomy.eu/trac/ticket/2152
  $keyStyle = "linkedStyle";

  RenderHints::pushToRenderStack("polytomousKey");
  // Key nodes in linked style.
  $out = '<table class="polytomousKey polytomousKey_' . $keyStyle . '">';
  $out .= theme('cdm_polytomousKey_' . $keyStyle . '_subgraph', array('polytomousKeyNode' => $polytomousKey->root));
  $out .= '</table>';
  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_polytomousKey_linkedStyle_subgraph($variables) {
  $polytomousKeyNode = $variables['polytomousKeyNode'];
  static $statementCountCharacter = '\'';
  $out = "";

  if (is_array($polytomousKeyNode->children)) {
    $childIndex = 0;

    // Render edges of the current node.
    foreach ($polytomousKeyNode->children as &$child) {

      if (!isset($child->statement) && isset($child->taxon->uuid)) {
        // Skip node with empty statements (see below for explanation: "Special
        // case").
        // this skipping here happens always in the next deeper level of iteration
        // the check below is node on the level above
        continue;
      }

      /*
       * Special case: Child nodes with empty statements but taxa as leaf are to
       * treated as if all those taxa where direct children of the source node.
       */
      $islinkToManyTaxa = !isset($child->children[0]->statement) && isset($child->children[0]->taxon->uuid);
      $islinkToTaxon = isset($child->taxon->uuid);
      $islinkToSubKey = isset($child->subkey->uuid);
      $islinkToOtherNode = isset($child->otherNode);
      // Either NULL or 0.
      $islinkToNode = $child->nodeNumber && !$islinkToManyTaxa && !$islinkToOtherNode;
      $hasQuestion = !empty($polytomousKeyNode->question->label_l10n);
      $hasFeature = isset($polytomousKeyNode->feature);

      // $indentEdge = $hasQuestion && $childIndex > 0;
      // Question.
      if ($hasQuestion && $childIndex == 0) {
        // Place question, as extra table row.
        $out .= '<tr class="question new_section">';
        $out .= '<td class="nodeNumber">' . uuid_anchor($polytomousKeyNode->uuid, $polytomousKeyNode->nodeNumber) . "</td>";
        $out .= '<td class="question">' . $polytomousKeyNode->question->label_l10n . '</td>';
        $out .= '</tr>';
      }

      $out .= '<tr class="childCount_' . $childIndex . (!$hasQuestion && $childIndex == 0 ? ' new_section' : '') . '">';

      if ($hasQuestion) {
        $out .= '<td class="nodeNumber"></td>';
      }
      else {
        $out .= '<td class="nodeNumber">' . uuid_anchor($polytomousKeyNode->uuid, $polytomousKeyNode->nodeNumber . str_pad("", $childIndex, $statementCountCharacter)) . "</td>";
      }

      $out .= '<td ' . RenderHints::getHtmlElementID($child) . '  class="edge' . ($hasQuestion ? ' edge-indent' : '') . '">';

      // Feature.
      if ($hasFeature) {
        $out .= $polytomousKeyNode->feature->representation_L10n . ": ";
      }

      // Statement.
      $out .= $child->statement->label_l10n;

      // --- Links to nodes taxa and subkeys.
      $out .= '<div class="nodeLink">';

      // Link to a PolytomousKeyNode.
      if ($islinkToNode) {
        $out .= '<div class="nodeLinkToNode">';
        if (isset($child->modifyingText)) {
          $out .= theme('cdm_poytomousKeyNode_modifyingText', array('modifyingText' => $child->modifyingText));
        }
        $out .= l($child->nodeNumber, request_path(), array(
          'attributes' => NULL,
          'query' => NULL,
          'fragment' => $child->uuid,
        )) . '</div>';
      }

      // Link to a PolytomousKeyNode.
      if ($islinkToOtherNode) {
        $out .= '<div class="nodeLinkToOtherNode">';
        if (isset($child->modifyingText)) {
          $out .= theme('cdm_poytomousKeyNode_modifyingText', array('modifyingText' => $child->modifyingText));
        }
        $out .= l($child->otherNode->nodeNumber, $_REQUEST["q"], array(
          'attributes' => NULL,
          'query' => NULL,
          'fragment' => $child->otherNode->uuid,
        )) . '</div>';
      }

      // Link to one or many taxa.
      if ($islinkToTaxon || $islinkToManyTaxa) {

        if ($islinkToManyTaxa) {
          $taxonChildren = $child->children;
        }
        else {
          $taxonChildren = array(
            $child,
          );
        }

        foreach ($taxonChildren as $taxonChild) {
          // TODO many taxa $child->children->taxon.
          $out .= '<div class="nodeLinkToTaxon">';
          if (isset($taxonChild->modifyingText)) {
            $out .= theme('cdm_poytomousKeyNode_modifyingText', array('modifyingText' => $taxonChild->modifyingText));
          }
          $out .= theme("cdm_taxonName", array('taxonName' => $taxonChild->taxon->name, 'nameLink' => url(path_to_taxon($taxonChild->taxon->uuid))));
          $out .= '</div>';
        }

        // Link to a subkey.
        if ($islinkToSubKey) {
          $out .= '<div class="nodeLinkToSubkey">' . theme('cdm_IdentificationKey', array('identificationKey' => $child->subkey)) . '</div>';
        }
      }

      $out .= '</div>'; // End node link.
      $out .= '</td>'; // End edge.
      $out .= '</tr>';

      $childIndex++;
    }

    // Recurse into child nodes.
    foreach ($polytomousKeyNode->children as &$child) {
      $out .= theme('cdm_polytomousKey_linkedStyle_subgraph', array('polytomousKeyNode' => $child));
    }
  }

  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_poytomousKeyNode_modifyingText($variables) {
  $out = '';
  $modifyingText = $variables['modifyingText'];
  if (is_object($modifyingText)) {
    $i = 0;
    foreach (get_object_vars($modifyingText) as $lang => $languageString) {
      $out .= ($i++ > 0 ? ', ' : '') . '<span class="modifyingText">' . $languageString->text . '</span> ';
    }
  }
  return $out;
}

/**
 * Returns HTML for a list of a specific type of IdentificationKeys.
 *
 * The list can be restricteded by a taxon.
 *
 * @param array $variables
 *   An associative array containing:
 *   - type: The simple name of the cdm class implementing the interface
 *     IdentificationKey, valid values are:
 *     PolytomousKey, MediaKey, MultiAccessKey
 *   - taxonUuid: If given, this parameter restrict the listed keys to those
 *     which have the taxon identified be this uuid in scope.
 *
 * @ingroup themeable
 */
function theme_cdm_list_IdentificationKeys($variables) {
  $type = $variables['type'];
  $taxonUuid = $variables['taxonUuid'];
  $keyList = _list_IdentificationKeys($type, $taxonUuid);
  if (!$keyList || count($keyList) == 0) {
    return;
  }

  RenderHints::pushToRenderStack('list_IdentificationKeys');
  $out = '<ul>';
  foreach ($keyList as $key) {
    $out .= '<li>';
    $out .= theme('cdm_IdentificationKey', array('identificationKey' => $key));
    $out .= '</li>';
  }
  $out .= '</ul>';
  $out .= theme("cdm_annotation_footnotes", array('footnoteListKey' => RenderHints::getRenderPath()));
  RenderHints::popFromRenderStack();

  return $out;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function theme_cdm_block_IdentificationKeys($variables) {
  $taxonUuid = $variables['taxonUuid'];
  static $types = array(
    "PolytomousKey" => "Polytomous",
    "MediaKey" => "Media",
    "MultiAccessKey" => "Multiaccess",
  );
  RenderHints::pushToRenderStack('block_IdentificationKeys');
  $out = '';
  foreach ($types as $type => $label) {
    $keylist = theme('cdm_list_IdentificationKeys', array('type' => $type, 'taxonUuid' => $taxonUuid));
    if (!$keylist) {
      continue;
    }
    $out .= '<div class="' . $type . '">';
    $out .= '<h3>' . t($label) . "</h3>";
    $out .= $keylist;
    $out .= '</div>';
  }
  RenderHints::popFromRenderStack();
  return $out;
}

/**
 * This theming function formats the use description and use record list for
 * these descriptions.
 *
 * @see http://drupal.org/node/1354
 */
function theme_cdm_UseDescription($variables) {
  $descriptions = $variables['description'];
  $taxonUuid = $variables['taxonUuid'];
  $out = '<div id="content"><ul id="Description" class ="description">';
  if ($descriptions == NULL) {
    return;
  }

  $feature_block_settings = get_feature_block_settings(UUID_DISTRIBUTION);

  $descriptionSynonyms = '';
  $descriptionOut = '';
  $synonymOut = '';
  $currentTaxon = cdm_ws_get(CDM_WS_PORTAL_TAXON, $taxonUuid);

  foreach ($descriptions as $description) {
    $useSummary = '';
    foreach ($description->elements as $element) {

      if ($element->feature->uuid == UUID_USE && !(strlen($useSummary) > 0) && isset($element->multilanguageText_L10n)) {
        $useSummary = $element->multilanguageText_L10n->text;
      }
    }
    // uses will be ordered by source
    foreach ($description->sources as $source) {
      $is_about_current_taxon = FALSE;
      $originalTaxonUsedInSource = NULL;
      $originalTaxonPager = NULL;
      if ($source->originalNameString) {
        $request_params = array();
        $request_params['query'] = $source->originalNameString;
        $request_params['matchMode'] = "EXACT";
        $originalTaxonPager = cdm_ws_get(CDM_WS_PORTAL_NAME_FINDBYNAME, NULL, queryString($request_params));
        if ($originalTaxonPager->count > 0) {
          $originalTaxonUsedInSource = $originalTaxonPager->records[0];
        }
        else {
          $originalTaxonUsedInSource = $currentTaxon->name;
        }
      }
      else {
        $originalTaxonUsedInSource = $currentTaxon->name;
      }

      $is_about_current_taxon = $currentTaxon->name->uuid == $originalTaxonUsedInSource->uuid;

      if (!$is_about_current_taxon) {
        $descriptionOut .= '<li class="descriptionText DescriptionElement">';
        $name_used_in_source_link_to_show_use = l($source->originalNameString, path_to_name($originalTaxonUsedInSource->uuid), array(
          'absolute' => TRUE,
          'html' => TRUE,
        ));
        $descriptionOut .= $name_used_in_source_link_to_show_use . ': ';
        $descriptionOut .= $useSummary;
        foreach ($description->sources as $source) {
          $descriptionOut .= " (" . theme('cdm_OriginalSource', array(
              'source' => $source,
              'doLink' => $feature_block_settings['link_to_reference'] == 1,
              'do_link_to_name_used_in_source' => $feature_block_settings['link_to_name_used_in_source'] == 1)) . ")";
        }
        $hasUseRecords = FALSE;
        $descriptionUseRecordOut = '<div id=useRecords><table><th>Use Category</th><th>Use Sub Category</th><th>Plant Part</th><th>Human Group</th><th>Ethnic Group</th><th>Country</th>';
        foreach ($description->elements as $descriptionElement) {
          if ($descriptionElement->feature->uuid == UUID_USE_RECORD) {
            $hasUseRecords = TRUE;
            // FIXME localization hardcoded to English
            $useRecordTags = explode(';', $descriptionElement->modifyingText_l10n);
            $descriptionUseRecordOut .= '<tr>';
            $descriptionUseRecordOut .= '<td>' . $useRecordTags[0] . '</td>' . '<td>' . $useRecordTags[1] . '</td>' . '<td>' . $useRecordTags[3] . '</td>' . '<td>' . $useRecordTags[4] . '</td>' . '<td>' . $useRecordTags[5] . '</td>' . '<td>' . $useRecordTags[2] . '</td>';
            $descriptionUseRecordOut .= '</tr>';
          }
        }
        $descriptionUseRecordOut .= '</table></div>';
        if ($hasUseRecords) {
          $descriptionOut .= $descriptionUseRecordOut . '</li>';
        }
      }
      else {
        // TODO +/- duplicate of above, unify this code
        $synonymOut .= '<li class="descriptionText DescriptionElement">';
        $name_used_in_source_link_to_show_use = l($source->originalNameString, path_to_name($originalTaxonUsedInSource->uuid), array(
          'absolute' => TRUE,
          'html' => TRUE,
        ));

        $synonymOut .= $name_used_in_source_link_to_show_use . ': ';
        $synonymOut .= $useSummary;
        foreach ($description->sources as $source) {
          $synonymOut .= " (" . theme('cdm_OriginalSource', array(
              'source' => $source,
              'doLink' => $feature_block_settings['link_to_reference'] == 1,
              'do_link_to_name_used_in_source' => $feature_block_settings['link_to_name_used_in_source'] == 1
            )) . ")";
        }

        $hasUseRecords = FALSE;
        $useRecordTableOut = '<div id=useRecords><table><th>Use Category</th><th>Use Sub Category</th><th>Plant Part</th><th>Human Group</th><th>Ethnic Group</th><th>Country</th>';
        foreach ($description->elements as $descriptionElement) {
          if ($descriptionElement->feature->uuid == UUID_USE_RECORD) {
            $hasUseRecords = TRUE;
            $useRecordTags = explode(';', $descriptionElement->modifyingText_l10n);
            $useRecordTableOut .= '<tr>';
            $useRecordTableOut .= '<td>' . $useRecordTags[0] . '</td>' . '<td>' . $useRecordTags[1] . '</td>' . '<td>' . $useRecordTags[3] . '</td>' . '<td>' . $useRecordTags[4] . '</td>' . '<td>' . $useRecordTags[5] . '</td>' . '<td>' . $useRecordTags[2] . '</td>';
            $useRecordTableOut .= '</tr>';
          }
        }
        $useRecordTableOut .= '</table></div>';
        if ($hasUseRecords) {
          $synonymOut .= $useRecordTableOut . '</li>';
        }
      }

      // }
    }
  }
  $out .= $descriptionOut . $synonymOut;
  $out .= "</ul></div>";
  return $out;
}


/**
 * The theming function for a block of Uses Descriptions for a given taxon.
 *
 * The Uses block has been removed from the code but the according theme function
 * is kept for compatibility reasons with existing code regarding palmweb.
 *
 */
function theme_cdm_block_Uses($variables) {
  $taxonUuid = $variables['taxonUuid'];
  RenderHints::pushToRenderStack('block_Uses');

  if ($taxonUuid == NULL) {
    return;
  }
  $out = '';
  $markerTypes = array();
  $markerTypes['markerTypes'] = UUID_MARKERTYPE_USE;
  $useDescriptions = cdm_ws_get(CDM_WS_PORTAL_TAXON_DESCRIPTIONS, $taxonUuid, queryString($markerTypes));
  if (!empty($useDescriptions)) {
    // FIXME use theme_block instaed of hardcoding the block html here !!!!
    $out .= '<div id="block-cdm_dataportal-feature-description" class="clear-block block block-cdm_dataportal-feature"><H2><a name="userecords"> </a> Uses </H2>';
    $formatUseDescriptions = theme('cdm_UseDescription', array('description' => $useDescriptions, 'taxonUuid' => $taxonUuid));

    $out .= $formatUseDescriptions;
    $out .= "</div>";
  }

  return $out;
}

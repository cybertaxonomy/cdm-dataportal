<?php

/**
 * @file
 * Defines simple expertsdb_phone field types.
 */

/*
 * Definition of privacy levels
 */
define('PRIVACY_CONTACT_PRIVATE', 'ContactPrivate');
define('PRIVACY_PRIVATE', 'Private');
define('PRIVACY_PUBLIC', 'Public');

/**
 * Implementation of hook_perm()
 *
 * Valid permissions for this module
 * @return array An array of valid permissions for the expertsdb_phone module
 */
function expertsdb_phone_perm() {
	return array(
    	'view private expertsdb_phone fields',
	//TODO which else permission are required?
	);
}

/**
 * Implementation of hook_help().
 *
 * @param unknown_type $section
 * @return unknown
 */
function expertsdb_phone_help($section) {
	switch ($section) {
		case 'admin/modules#description':
			return t('Defines a text field type for multiple phone numbers in international notation. Data will be integrated as serialized array into the according content type database. <em>Note: Requires content.module.</em>');
	}
}

/**
 * Implementation of hook_menu().
 */
function expertsdb_phone_menu($may_cache) {
	$items = array();
	if ($may_cache) {
		$items[] = array(
      'path' => 'expertsdb_phone/widget/js',
      'callback' => 'expertsdb_phone_widget_js',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
		);
	}
	return $items;
}

/**
 * Implementation of hook_field_info().
 */
function expertsdb_phone_field_info() {
	return array(
    'expertsdb_phone' => array('label' => 'Expertsdb Phone Numbers'),
	);
}

/**
 * Implementation of hook_field_settings().
 */
function expertsdb_phone_field_settings($op, $field) {
	switch ($op) {
		case 'form':
			$form = array();

			$title_options = array(
        'optional' => t('Optional Title'),
        'required' => t('Required Title'),
        'value' => t('Static Title: '),
        'none' => t('No Title'),
			);

			$form['title'] = array(
        '#type' => 'radios',
        '#title' => t('Link Title'),
        '#default_value' => isset($field['title']) ? $field['title'] : 'optional',
        '#options' => $title_options,
        '#description' => t('If the link title is optional or required, a field will be displayed to the end user. If the link title is static, the link will always use the same title. If <a href="http://drupal.org/project/token">token module</a> is installed, the static title value may use any other node field as its value.'),
			);

			$form['title_value'] = array(
        '#type' => 'textfield',
        '#default_value' => $field['title_value'],
        '#size' => '46',
			);

			// disable multiple and
			$form['multiple'] = array('#type' => 'hidden','#value' => '0');

			return $form;

		case 'validate':
			if ($field['title'] == 'value' && empty($field['title_value'])) {
				form_set_error('title_value', t('A default title must be provided if the title is a static value'));
			}
			break;

		case 'save':
			return array('title', 'title_value');

		case 'database columns':
			$columns = array(
        'expertsdb_phone' => array('type' => 'mediumtext', 'not null' => FALSE),
			);
			return $columns;

		case 'filters':
			return;

		case 'arguments':
			return;

		case 'callbacks'://pairs up with cck_fullname_field::view
			return array(
        'view' => CONTENT_CALLBACK_CUSTOM,
			);

	}
}

/**
 * Implemantation of hook_field()
 *
 * @param unknown_type $op
 * @param unknown_type $node
 * @param unknown_type $field
 * @param unknown_type $items
 * @param unknown_type $teaser
 * @param unknown_type $page
 * @return unknown
 */
function expertsdb_phone_field($op, &$node, $field, &$items, $teaser, $page) {
	switch ($op) {

		case 'view':
			$context = $teaser ? 'teaser' : 'full';
			$formatter = isset($field['display_settings'][$context]['format']) ? $field['display_settings'][$context]['format'] : 'default';
			$items = content_format($field, $items, $formatter, $node);
			if(!empty($items) && is_array($items) && count($items) > 0){
				return theme('expertsdb_phone_container', $node, $field, $items, $teaser, $page);
			}
			return;
	}
}

/**
 * Implementation of hook_widget_info().
 */
function expertsdb_phone_widget_info() {
	return array(
    'expertsdb_phone' => array(
      'label' => 'Text Fields for Phone Numbers with Optional Title',
      'field types' => array('expertsdb_phone'),
	),
	);
}

/**
 * Implementation of hook_widget().
 */
function expertsdb_phone_widget($op, &$node, $field, &$node_field) {
	switch ($op) {
		case 'prepare form values':
			// unserialize and prepare data
			_expertsdb_phone_widget_prepare($node_field);

			// get posted values in both node edit and profile edit mode
			if ($_POST[$field['field_name']] || $_POST[$field['type_name'].'_node_form'][$field['field_name']]) {
				$node_field = ($_POST['form_id'] == 'user_edit') ?  $_POST[$field['type_name'].'_node_form'][$field['field_name']] : $_POST[$field['field_name']];
				unset($node_field['count'], $node_field['more-url'], $node_field['more']);
			}
			return;

		case 'form':
			$form = array();
			$form[$field['field_name']] = array(
        '#tree' => TRUE,
        '#theme' => 'expertsdb_phone_widget_form',
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#title' => t($field['widget']['label']),
        '#description' => t($field['widget']['description']) . '<br />If you need to add an extension number of a PABX without direct in-dialling, please use the abbreviation for "extension" (ext.).<br />
        <strong>Format:</strong> +[Country calling code] [Area code] [Phone number] ext. [Extension number]<br />
        <strong>Example:</strong> +22 30 xxx xxxxx<br />
        <strong>Example with extension:</strong> +22 30 xxx xxxxx ext. 123',
			);

			drupal_add_js(drupal_get_path('module', 'expertsdb_phone') .'/expertsdb_phone.js');

			$delta = 0;
			// Render phone number fields for all the entered values
			foreach ($node_field as $data) {
				if (is_array($data) && $data['phone']) {
					_expertsdb_phone_widget_form($form[$field['field_name']][$delta], $field, $data, $delta);
					$delta++;
				}
			}
			// Render one additional new phone field
			_expertsdb_phone_widget_form($form[$field['field_name']][$delta], $field, array(), $delta);

			// Create a wrapper for additional fields
			$form[$field['field_name']]['wrapper'] = array(
          '#type' => 'markup',
          '#value' => '<div id="' . str_replace('_', '-', $field['field_name']) . '-wrapper" class="clear-block"></div>',
			);

			// Add 'More' Javascript Callback
			$form[$field['field_name']]['more-url'] = array(
          '#type' => 'hidden',
          '#value' => url('expertsdb_phone/widget/js/' . $field['type_name'] . '/' . $field['field_name'], NULL, NULL, TRUE),
          '#attributes' => array('class' => 'more-phone-numbers'),
          '#id' => str_replace('_', '-', $field['field_name']) . '-more-url',
			);

			// Add Current Field Count
			$form[$field['field_name']]['count'] = array(
          '#type' => 'hidden',
          '#value' => $delta,
          '#id' => str_replace('_', '-', $field['field_name']) . '-count',
			);

			// Add More Button
			$form[$field['field_name']]['more'] = array(
        '#name' => 'more',
        '#id' => str_replace('_', '-', $field['field_name']) . '-more',
        '#weight' => 10,
				'#type' => 'views_imagebutton',
				'#title' => t('More Phone Numbers'),
    		'#image' => drupal_get_path('module','expertsdb_email') . '/images/button_add_element.png',  // provide the path to your image here
    		'#default_value' => t('More emails'), // original value of button text
			);

			if (isset($tokens_form)) {
				$form[$field['field_name']]['tokens'] = $tokens_form;
			}

			return $form;

		case 'validate':
			_expertsdb_phone_cleanup($node_field);
			_expertsdb_phone_widget_process($node_field);

			foreach($node_field as $delta => $value) {
				if ($value['phone'] && !(isset($field['widget']['default_value'][$delta]['phone']) && $value['phone'] == $field['widget']['default_value'][$delta]['phone'] && !$field['required'])) {
					// Validate the phone number, well basically
					// pattern validates, if phone number starts with a plus, some digits and a space
					if (preg_match('@^\+[0-9]+ @',$value['phone']) == FALSE) {
						form_set_error($field['field_name'] .']['. $delta. '][phone', t('Please use international notation for phone numbers. You can find examples in the field description.'));
					}
					if (preg_match('@\(|\)@',$value['phone']) == TRUE) {
						form_set_error($field['field_name'] .']['. $delta. '][phone', t('Please avoid brackets in phone numbers as these parts of the number are normally unneeded when placing an international call. You can find examples in the field description.'));
					}
					if ($field['title'] == 'required' && strlen(trim($value['title'])) == 0) {
						form_set_error($field['field_name'] .']['. $delta. '][title', t('Titles are required for all phone numbers.'));
					}
				}
				// Require a link if we have a title
				if (strlen($value['title']) > 0 && strlen(trim($value['phone'])) == 0) {
					form_set_error($field['field_name'] .']['. $delta. '][phone', t('You cannot enter a title without a phone number.'));
				}

			}
			return;

		case 'process form values':
			// run a cleanup cycle
			if(!strstr($node_field[0]['expertsdb_phone'],':{')){
				_expertsdb_phone_cleanup($node_field);
			}
			// apply some basic formatting
			_expertsdb_phone_widget_process($node_field);
			return;

		case 'submit':
			// do not save empty values
			_expertsdb_phone_cleanup($node_field);
			// apply some basic formatting
			_expertsdb_phone_widget_process($node_field);
			// serialize data
			_expertsdb_phone_serialize($node_field);
			return;
	}
}

/**
 * AHAH generation of additional form fields
 *
 * @param unknown_type $type_name
 * @param unknown_type $field_name
 */
function expertsdb_phone_widget_js($type_name, $field_name) {
	$field = content_fields($field_name, $type_name);
	$type = content_types($type_name);
	// get the correct delta and field_name depending on being in node_form or user_edit
	// $delta = ($_POST['form_id'] == 'user_edit') ? $_POST[$type['type'].'_node_form'][$field_name]['count']: $_POST[$field_name]['count'];
	$delta = $_POST[$field_name]['count'];
	$form = array();

	_expertsdb_phone_widget_form($form, $field, $node_field, $delta);

	// Assign parents matching the original form
	foreach (element_children($form) as $key) {
		$form[$key]['#parents'] = array($field_name, $delta, $key);
	}

	// Add names, ids, and other form properties
	foreach (module_implements('form_alter') as $module) {
		$function = $module .'_form_alter';
		$function('expertsdb_phone_widget_js', $form);
	}
	$form = form_builder('expertsdb_phone_widget_js', $form);

	// if form is rendered as part of the user profile page, we need to alter name and id of newly generated form elements
	/*	if($_POST['form_id'] == 'user_edit'){
	foreach (element_children($form) as $key) {
	$element_name = explode('[',$form[$key]['#name']);
	array_walk($element_name,'_expertsdb_phone_widget_alter_elements');
	$form[$key]['#name'] = $type['type'] . '_node_form' . '[' . implode('][',$element_name).']';
	}
	}*/

	$output = drupal_render($form);

	print drupal_to_js(array('status' => TRUE, 'data' => $output));
	exit;
}


/**
 * Helper function renders the expertsdb_phone widget only for multiple values.
 *
 * @param unknown_type $form_item
 * @param unknown_type $field
 * @param unknown_type $node_field
 * @param unknown_type $delta
 */
function _expertsdb_phone_widget_form(&$form_item, $field, $node_field, $delta = 0) {

	$form_item = array(
    '#tree' => TRUE,
    '#theme' => 'expertsdb_phone_widget_form_row',
	);

	$default_phone_number = "";
	if (isset($field['widget']['default_value'][$delta]['phone'])) {
		$default_phone_number = $field['widget']['default_value'][$delta]['phone'];
	}

	$form_item['phone'] = array(
    '#type' => 'textfield',
    '#maxlength' => '255',
    '#title' => $delta === 0 ? t('Phone Number') : NULL,
    '#default_value' => ($node_field['phone']) ? $node_field['phone'] : $default_phone_number,
    '#required' => ($delta === 0) ? $field['required'] : FALSE,
	);
	if ($field['title'] == 'optional' || $field['title'] == 'required') {
		$default_title = "";
		if (isset($field['widget']['default_value'][$delta]['title'])) {
			$default_title = $field['widget']['default_value'][$delta]['title'];
		}
		$form_item['title'] = array(
      '#type' => 'textfield',
      '#maxlength' => '255',
      '#title' => $delta === 0 ? t('Title') : NULL,
      '#default_value' => ($node_field['title']) ? $node_field['title'] : $default_title,
      '#required' => ($delta === 0 && $field['title'] == 'required') ? $field['required'] : FALSE,
		);
	}
}

function _expertsdb_phone_widget_prepare(&$node_field) {
	// only prepare, if data is actually serialized
	if(strstr($node_field[0]['expertsdb_phone'],':{')){
		$node_field[0] = unserialize($node_field[0]['expertsdb_phone']);
		if(count($node_field) > 0){
			// return content of first array element
			$node_field = $node_field[0];
		}
	}
}

function _expertsdb_phone_serialize(&$node_field){
	$node_field = array(array('expertsdb_phone' => serialize($node_field)));
}

/**
 * Function to remove unwanted elements from the node_field array
 *
 * @param array $node_field
 */
function _expertsdb_phone_cleanup(&$node_field){

	$save_field = array();
	$registered_phone_numbers =array();
	// Remove the JS helper fields
	unset($node_field['count'], $node_field['more-url'], $node_field['more']);
	foreach ($node_field as $delta => $value) {
		if (!empty($value['phone']) || $delta == 0) {
			// skip duplicates phone numbers
			if(in_array($value['phone'], $registered_phone_numbers)){
				continue;
			}
			// register phone numbers to avoid duplicates
			array_push($registered_phone_numbers, $value['phone']);

			if (!empty($value['phone']) || $delta == 0) {
				$save_field[] = $node_field[$delta];
			}
		}
	}
	$node_field = $save_field;
}

function _expertsdb_phone_widget_process(&$node_field) {
	foreach($node_field as $delta => $value) {
		if (is_numeric($delta)) {
			// Trim whitespace from phone number
			// remove unwanted characters
			// and apply *some* formatting
			$parts = explode('ext.',strtolower($node_field[$delta]['phone']));
			$pat = array('@[^0-9 \(\)\+]@', // only allow +, digits, space, round brackets (yes, we leave them in for validation)
									 '@ +?@'); // remove multiple spaces
			$rep = array(' ',
									 ' ');
			foreach($parts as $key => $value){
				$parts[$key] = check_plain(trim(preg_replace($pat, $rep, $value)));
			}

			$node_field[$delta]['phone'] = (count($parts) > 1) ? implode(" ext. ",$parts) : $parts[0];
			$node_field[$delta]['title'] = check_plain(trim($node_field[$delta]['title']));
		}
	}
}

function _expertsdb_phone_validate_phone($phone = FALSE){
	if(!$phone) return;

}

function _expertsdb_phone_widget_alter_elements(&$element){
	$element = preg_replace('@\]@', '', $element);
}


/**
 * Theme the display of the entire set of phone numbers
 */
function theme_expertsdb_phone_widget_form($element) {
	// pull in the stylesheet
	drupal_add_css(drupal_get_path('module', 'expertsdb_phone') .'/expertsdb_phone_form.css');
	$output = drupal_render($element);

	return $output;
}

/**
 * Theme the display of a single form row
 */
function theme_expertsdb_phone_widget_form_row($element) {

	$output = '';
	$output .= '<div class="expertsdb-phone-number-field-row clear-block"><div class="expertsdb-phone-number-field-subrow clear-block">';
	if ($element['title']) {
		$output .= '<div class="expertsdb-phone-number-field-title expertsdb-title-field-column">' . drupal_render($element['title']) . '</div>';
	}
	$output .= '<div class="expertsdb-phone-number-field-url' . ($element['title'] ? ' expertsdb-phone-number-field-column' : '') . '">' . drupal_render($element['phone']) . '</div>';
	$output .= '</div>';
	$output .= drupal_render($element);
	$output .= '</div>';
	return $output;
}

/**
 * Theme to display a complete container with all phone numbers in view mode
 *
 * @param unknown_type $node
 * @param unknown_type $field
 * @param unknown_type $items
 * @param unknown_type $teaser
 * @param unknown_type $page
 * @return unknown
 */
function theme_expertsdb_phone_container($node, $field, $items, $teaser, $page){
	// pull in the stylesheet
	drupal_add_css(drupal_get_path('module', 'expertsdb_phone') .'/expertsdb_phone_view.css');
	$output = '';
	$output .= '<div class="expertsdb-phone-numbers-container">';
	$output .= theme('field', $node, $field, $items, $teaser, $page);
	$output .= '</div>';
	return $output;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function expertsdb_phone_field_formatter_info() {
	return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('expertsdb_phone'),
	),
	);
}

/**
 * Implementation of hook_field_formatter().
 */
function expertsdb_phone_field_formatter($field, $item, $formatter, $node) {
	// item comes in either as serialized or unserialized value
	if (empty($item[0]['expertsdb_phone']) && empty($item[0]['phone'])) {
		return '';
	}
	if(strstr($item[0]['expertsdb_phone'],':{')){
		$items = unserialize($item[0]['expertsdb_phone']);
	}else{
		unset($item['count'], $item['more-url'], $item['more']);
		$items = $item;
	}
	// check, if we do have any phone number
	$phone_number_present = FALSE;
	foreach ($items as $delta => $item){
		if(!empty($item['phone'])){
			$phone_number_present = TRUE;
		}
	}
	if (!$phone_number_present) return;

	/*
	 * React on privacy settings
	 */
	if($node->field_privacy){
		global $user;
		$term = taxonomy_get_term($node->field_privacy[0]['tid']);
		switch($term->name){

			case PRIVACY_CONTACT_PRIVATE:
			case PRIVACY_PRIVATE:
				// show information only to roles with access and node author
				if($user->uid != $node->uid && !user_access('view private expertsdb_phone fields',$user)){
					return;
				}
				break;

			case PRIVACY_PUBLIC:
				// allow everybody to view aliases as configured in the field formatter (display field)
				break;

		}
	}

	foreach ($items as $delta => $item) {

		switch ($formatter) {
			default:
				$items[$delta]['view'] = '<div class="item-label label-column">' . $item['title'] . '</div><div class="phone-number">' . $item['phone'] . '</div>';
		}
	}

	return $items;
}
<?php
/**
 * This is the expertsdb_address_germany module for use with expertsdb_address.
 *
 * <p>This module simply adds support for German Provinces</p>
 *
 * @version $Id: expertsdb_address_germany.info,v 1.1 2008/05/02 14:24:56 suit4 Exp $;
 * @package CCK
 * @category CCK
 * @author jpoesen@drupal.org
 * @filesource
 * @license http://www.gnu.org/licenses/gpl.txt GNU_GENERAL_PUBLIC_LICENSE
 * @link none yet
 */

/**
 * Implementation of hook_help
 *
 * Display help and module information
 * @param string section which section of the site we're displaying help
 * @return help text for section
 */
function expertsdb_address_germany_help($section='') {

	$output = '';

	switch ($section) {
		case "admin/help#expertsdb_address_germany":
			$output = '<p>'.  t("Adds support for German Provinces to expertsdb_address."). '</p>';
			break;
	}

	return $output;
} // function expertsdb_address_germany_help()

/**
 * Adds all German Provinces to the states table. Adds Germany to the countries table. Returns whether all queries succeeded.
 *
 * @return boolean $query_ok
 */
function expertsdb_address_germany_installstates($query_ok = TRUE) {
	if (db_table_exists('expertsdb_address_states')) {
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Baden-Württemberg', 'BW', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Bayern', 'BY', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Berlin', 'BE', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Brandenburg', 'BR', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Bremen', 'HB', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Hamburg', 'HH', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Hessen', 'HE', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Mecklenburg-Vorpommern', 'MV', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Niedersachsen', 'NI', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Nordrhein-Westfalen', 'NW', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Rheinland-Pfalz', 'RP', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Saarland', 'SL', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Sachsen', 'SN', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Sachsen-Anhalt', 'ST', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Schleswig-Holstein', 'SH', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
		$query2 = db_query("INSERT INTO {expertsdb_address_states} (state_name, state_abbrv, country_code) VALUES ('Thüringen', 'TH', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
	}
	if (db_table_exists('expertsdb_address_countries')) {
		$query2 = db_query("INSERT INTO {expertsdb_address_countries} (country_name, country_code) VALUES ('Germany', 'DE')");
		if (!$query2) {$query_ok = FALSE;}
	}
	return $query_ok;
} // function expertsdb_address_germany_installstates()

/**
 * Implementation of hook_validate_address_fields
 *
 * This hook is used by expertsdb_address and any supporting modules which add country-specific field validation.
 * The first argument is an array, passed in by reference in 'fieldname=>error string' pairs. The error string should remain empty
 * so long as there are no errors. If there is an error, the string should be replaced with an appropriate t-ified message. The
 * second argument is the country code of the address. The first thing an implementation of this hook should do is check to see if
 * the country code matches the country for which the module was made to support. If not, it should return immediately, without
 * modifying the $errors array. This will ensure that only the country which SHOULD validate, does the validation. The third argument
 * is the item containing the values of the form.
 */
function expertsdb_address_germany_validate_address_fields(&$errors, $country_code, $item, $field_name) {
	if ($country_code != 'DE' && $country_code != 'Germany'){
		return;
	}
	$val_locale = array('de_DE' => 'de_DE');
	$locales = expertsdb_address_get_all_locales();
	$default_locale = setlocale(LC_ALL, 0);

	foreach ($val_locale as $key => $value) {
		$current_locale = expertsdb_address_setLocaleCP($value);
		if (($item['street1'] != '') && (!preg_match("/^[\.\'\-[:alpha:]0-9ßäöüÄÖÜ\/\s]+$/", $item['street1']))) {
			$errors['street1'] = t('(Germany): Illegal value for %name\'s Street field. Only letters, numbers, \' and - are valid. No other special characters allowed.', array('%name' =>
			$field_name));
		}
		if (($item['street2'] != '') && (!preg_match("/^[\.\'\-[:alpha:]0-9ßäöüÄÖÜ\/\s]+$/", $item['street2']))) {
			$errors['street2'] = t('(Germany):Illegal value for %name\'s Street Continued field. Only letters, numbers, \' and - are valid. No other special characters allowed.',
			array('%name' => $field_name));
		}
		if (($item['city'] != '') && (!preg_match("/^[\.\'\-[:alpha:]ßäöüÄÖÜ\/\s]+$/", $item['city']))) {
			$errors['city'] = t('(Germany):Illegal value for %name\'s City field. Only letters, \' and - are valid. No numbers or other special characters allowed.', array('%name' =>
			$field_name));
		}
		if (($item['zip'] != '') && (!preg_match("/[0-9]{5}$/", $item['zip']))) {
			$errors['zip'] = t('(Germany):Illegal value for %name\'s ZIP field.', array('%name' => $field_name));
		}
		if (($item['other'] != '') && (!preg_match("/^[\.\'\-[:alpha:]0-9ßäöüÄÖÜ\/\s]+$/", $item['other']))) {
			$errors['other'] = t('(Germany):Illegal value for %name\'s Other field. Only letters, numbers, \' and - are valid. No other special characters allowed.', array('%name' =>
			$field_name));
		}
	}
	setlocale(LC_ALL, $default_locale);
	return;
}


/**
 * Theme for address display as called from expertsdb_address_field_formatter().
 */
function theme_expertsdb_address_germany($expertsdb_address, $field) {
	//create the output
	if ($expertsdb_address['afd'] == 1) {
		$output = $expertsdb_address['street1']. ' ';
		$output .= $expertsdb_address['street2']. '<br />';
		$output .= $expertsdb_address['city']. ', ';
		$output .= $expertsdb_address['state']. ' ';
		$output .= $expertsdb_address['state_alternate']. ' ';
		$output .= $expertsdb_address['zip'];
		$output .= '<br />';
	}
	else {
		$output = '';
		asort($field['field_order']);
		foreach ($field['field_order'] as $field2 => $order) {
			switch ($field2) {//TODO create more elaborate output based on $order; not I'm only now using it for display of other, assuming it will either be first or last
				case 'street1':
					if ($field['fielddisplay']['field_display_street1'] === 'field_display_street1' && isset($expertsdb_address['street1']) && $expertsdb_address['street1'] != '') {
						$output .= $expertsdb_address['street1'] .' ';
					}
					break;
				case 'street2':
					if ($field['fielddisplay']['field_display_street2'] === 'field_display_street2' && isset($expertsdb_address['street2']) && $expertsdb_address['street2'] != '') {
						$output .= '<br />' . $expertsdb_address['street2'];
					}
					break;
				case 'apt':
					if ($field['fielddisplay']['field_display_apt'] === 'field_display_apt' && isset($expertsdb_address['apt']) && $expertsdb_address['apt'] != '') {
						$output .= '#'. $expertsdb_address['apt'];
					}
					break;
				case 'zip':
					if ($field['fielddisplay']['field_display_zip'] === 'field_display_zip' && isset($expertsdb_address['zip']) && $expertsdb_address['zip'] != '') {
						$output .= '<br />' . $expertsdb_address['zip'] . ' ';
					}
					break;
				case 'city':
					if ($field['fielddisplay']['field_display_city'] === 'field_display_city' && isset($expertsdb_address['city']) && $expertsdb_address['city'] != '') {
						$output .= $expertsdb_address['city'] . '<br />';
					}
					break;
				case 'state':
					if ($field['fielddisplay']['field_display_state'] === 'field_display_state' && isset($expertsdb_address['state']) && $expertsdb_address['state'] != '') {
						$output .= ', ' . $expertsdb_address['state'] .' ';
					}
					break;
				case 'country':
					if ($field['fielddisplay']['field_display_country'] === 'field_display_country' && isset($expertsdb_address['country']) && $expertsdb_address['country'] != '') {
						$output .= ' '. $expertsdb_address['country'];
					}
					break;
				case 'other':
					if ($field['fielddisplay']['field_display_other'] !== 0 && isset($expertsdb_address['other']) && $expertsdb_address['other'] != '') {
						if ($order > 1) {
							$output .= '<br />'. $expertsdb_address['other'] .'<br />';
						}
						else {
							$output .= $expertsdb_address['other'] .'<br />';
						}
					}
					break;
			}
		}
	}
	return $output;
} // function theme_expertsdb_address()
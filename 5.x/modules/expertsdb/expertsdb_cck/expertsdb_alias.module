<?php

/**
 * @file
 * Defines simple expertsdb_alias field types.
 */

/*
 * Definition of privacy levels
 */
define('PRIVACY_CONTACT_PRIVATE', 'ContactPrivate');
define('PRIVACY_PRIVATE', 'Private');
define('PRIVACY_PUBLIC', 'Public');

/**
 * Implementation of hook_perm()
 *
 * Valid permissions for this module
 * @return array An array of valid permissions for the portfolio module
 */
function expertsdb_alias_perm() {
	return array(
    	'view private expertsdb_alias fields',
	//TODO which else permission are required?
	);
}

/**
 * Implementation of hook_help().
 *
 * @param unknown_type $section
 * @return unknown
 */
function expertsdb_alias_help($section) {
	switch ($section) {
		case 'admin/modules#description':
			return t('Defines a text field type for multiple name aliases. Data will be integrated as serialized array into the according content type database. <em>Note: Requires content.module.</em>');
	}
}

/**
 * Implementation of hook_menu().
 */
function expertsdb_alias_menu($may_cache) {
	$items = array();
	if ($may_cache) {
		$items[] = array(
      'path' => 'expertsdb_alias/widget/js',
      'callback' => 'expertsdb_alias_widget_js',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
		);
	}
	return $items;
}

/**
 * Implementation of hook_field_info().
 */
function expertsdb_alias_field_info() {
	return array(
    'expertsdb_alias' => array('label' => 'Expertsdb Name Alias'),
	);
}

/**
 * Implementation of hook_field_settings().
 */
function expertsdb_alias_field_settings($op, $field) {
	switch ($op) {
		case 'form':
			$form = array(
        '#theme' => 'expertsdb_alias_field_settings',
			);

			// disable multiple and
			$form['multiple'] = array('#type' => 'hidden','#value' => '0');

			return $form;

		case 'validate':
			/*if ($field['title'] == 'value' && empty($field['title_value'])) {
				form_set_error('title_value', t('A default title must be provided if the title is a static value'));
				}*/
			break;

		case 'save':
			// return array('attributes', 'display', 'title', 'title_value', 'enable_tokens');
			break;

		case 'database columns':
			$columns = array(
        'expertsdb_alias' => array('type' => 'mediumtext', 'not null' => FALSE),
			);
			return $columns;

		case 'filters':
			return;
			/*			return array(
			 'default' => array(
			 'name' => t('URL'),
			 'operator' => 'views_handler_operator_like',
			 'handler' => 'views_handler_operator_like',
			 ),
			 'title' => array(
			 'name' => t('Title'),
			 'operator' => 'views_handler_operator_like',
			 'handler' => 'views_handler_operator_like',
			 ),
			 'protocol' => array(
			 'name' => t('Protocol'),
			 'list' => drupal_map_assoc(variable_get('filter_allowed_protocols', array('http', 'https', 'ftp', 'news', 'nntp', 'telnet', 'mailto', 'irc', 'ssh', 'sftp', 'webcal'))),
			 'operator' => 'views_handler_operator_or',
			 'handler' => 'expertsdb_alias_views_protocol_filter_handler',
			 ),
			 );*/

		case 'arguments':
			return;
			/*      return array(
			 'content: '. $field['field_name'] .'_url' => array(
			 'name' => t('Link URL') .': '. t($field['widget']['label']) .' ('. $field['field_name'] .')',
			 'handler' => 'expertsdb_alias_views_argument_handler',
			 ),
			 'content: '. $field['field_name'] .'_title' => array(
			 'name' => t('Link Title') .': '. t($field['widget']['label']) .' ('. $field['field_name'] .')',
			 'handler' => 'expertsdb_alias_views_argument_handler',
			 ),
			 'content: '. $field['field_name'] .'_target' => array(
			 'name' => t('Link Target') .': '. t($field['widget']['label']) .' ('. $field['field_name'] .')',
			 'handler' => 'expertsdb_alias_views_argument_handler',

			 ),
			 );*/

		case 'callbacks'://pairs up with cck_fullname_field::view
			return array(
        'view' => CONTENT_CALLBACK_CUSTOM,
			);

	}
}

/**
 * Implemantation of hook_field()
 *
 * @param unknown_type $op
 * @param unknown_type $node
 * @param unknown_type $field
 * @param unknown_type $items
 * @param unknown_type $teaser
 * @param unknown_type $page
 * @return unknown
 */
function expertsdb_alias_field($op, &$node, $field, &$items, $teaser, $page) {
	switch ($op) {

		case 'view':
			$context = $teaser ? 'teaser' : 'full';
			$formatter = isset($field['display_settings'][$context]['format']) ? $field['display_settings'][$context]['format'] : 'default';
			$items = content_format($field, $items, $formatter, $node);
			if(!empty($items) && is_array($items) && count($items) > 0){
				return theme('expertsdb_alias_container', $node, $field, $items, $teaser, $page);
			}
			return;
	}
}

/**
 * Implementation of hook_widget_info().
 */
function expertsdb_alias_widget_info() {
	return array(
    'expertsdb_alias' => array(
      'label' => 'Text Fields for Name Aliases',
      'field types' => array('expertsdb_alias'),
	),
	);
}

/**
 * Implementation of hook_widget().
 */
function expertsdb_alias_widget($op, &$node, $field, &$node_field) {
	switch ($op) {
		case 'prepare form values':
			// unserialize and prepare data
			_expertsdb_alias_widget_prepare($node_field);

			// get posted values in both node edit and profile edit mode
			if ($_POST[$field['field_name']] || $_POST[$field['type_name'].'_node_form'][$field['field_name']]) {
				$node_field = ($_POST['form_id'] == 'user_edit') ?  $_POST[$field['type_name'].'_node_form'][$field['field_name']] : $_POST[$field['field_name']];
				unset($node_field['count'], $node_field['more-url'], $node_field['more']);
			}
			return;

		case 'form':
			$form = array();
			$form[$field['field_name']] = array(
        '#tree' => TRUE,
        '#theme' => 'expertsdb_alias_widget_form',
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#title' => t($field['widget']['label']),
        '#description' => t($field['widget']['description']),
			);

			drupal_add_js(drupal_get_path('module', 'expertsdb_alias') .'/expertsdb_alias.js');

			$delta = 0;
			// Render name alias fields for all the entered values
			foreach ($node_field as $data) {
				if (is_array($data) && $data['alias']) {
					_expertsdb_alias_widget_form($form[$field['field_name']][$delta], $field, $data, $delta);
					$delta++;
				}
			}
			// Render one additional new alias field
			_expertsdb_alias_widget_form($form[$field['field_name']][$delta], $field, array(), $delta);

			// Create a wrapper for additional fields
			$form[$field['field_name']]['wrapper'] = array(
          '#type' => 'markup',
          '#value' => '<div id="' . str_replace('_', '-', $field['field_name']) . '-wrapper" class="clear-block"></div>',
			);

			// Add 'More' Javascript Callback
			$form[$field['field_name']]['more-url'] = array(
          '#type' => 'hidden',
          '#value' => url('expertsdb_alias/widget/js/' . $field['type_name'] . '/' . $field['field_name'], NULL, NULL, TRUE),
          '#attributes' => array('class' => 'more-aliases'),
          '#id' => str_replace('_', '-', $field['field_name']) . '-more-url',
			);

			// Add Current Field Count
			$form[$field['field_name']]['count'] = array(
          '#type' => 'hidden',
          '#value' => $delta,
          '#id' => str_replace('_', '-', $field['field_name']) . '-count',
			);

			// Add More Button
			$form[$field['field_name']]['more'] = array(
        '#name' => 'more',
        '#id' => str_replace('_', '-', $field['field_name']) . '-more',
        '#weight' => 10,
				'#type' => 'views_imagebutton',
				'#title' => t('More Aliases'),
    		'#image' => drupal_get_path('module','expertsdb_email') . '/images/button_add_element.png',  // provide the path to your image here
    		'#default_value' => t('More emails'), // original value of button text
			);

			if (isset($tokens_form)) {
				$form[$field['field_name']]['tokens'] = $tokens_form;
			}

			return $form;

		case 'validate':
			_expertsdb_alias_cleanup($node_field);

			foreach($node_field as $delta => $value) {
				/*			if ($value['alias'] && !(isset($field['widget']['default_value'][$delta]['alias']) && $value['alias'] == $field['widget']['default_value'][$delta]['alias'] && !$field['required'])) {
					// Validate the link
					if (expertsdb_alias_validate_url(trim($value['alias'])) == FALSE) {
					form_set_error($field['field_name'] .']['. $delta. '][alias', t('Not a valid alias.'));
					}
					// Require a title for the link if necessary
					elseif ($field['title'] == 'required' && strlen(trim($value['title'])) == 0) {
					form_set_error($field['field_name'] .']['. $delta. '][title', t('Titles are required for all links.'));
					}
					}
					// Require a link if we have a title
					elseif (strlen($value['title']) > 0 && strlen(trim($value['alias'])) == 0) {
					form_set_error($field['field_name'] .']['. $delta. '][alias', t('You cannot enter a title without a link.'));
					}*/
			}
			return;

		case 'process form values':
			// run a cleanup cycle
			if(!strstr($node_field[0]['expertsdb_alias'],':{')){
				_expertsdb_alias_cleanup($node_field);
			}
			// apply some trimming
			_expertsdb_alias_widget_process($node_field);

			return;

		case 'submit':
			// do not save empty values and bring preferred email to the top
			_expertsdb_alias_cleanup($node_field);
			// apply some trimming
			_expertsdb_alias_widget_process($node_field);
			// serialize data
			_expertsdb_alias_serialize($node_field);
			return;
	}
}

/**
 * AHAH generation of additional form fields
 *
 * @param unknown_type $type_name
 * @param unknown_type $field_name
 */
function expertsdb_alias_widget_js($type_name, $field_name) {
	$field = content_fields($field_name, $type_name);
	$type = content_types($type_name);
	// get the correct delta and field_name depending on being in node_form or user_edit
	// $delta = ($_POST['form_id'] == 'user_edit') ? $_POST[$type['type'].'_node_form'][$field_name]['count']: $_POST[$field_name]['count'];
	$delta = $_POST[$field_name]['count'];
	$form = array();

	_expertsdb_alias_widget_form($form, $field, $node_field, $delta);

	// Assign parents matching the original form
	foreach (element_children($form) as $key) {
		$form[$key]['#parents'] = array($field_name, $delta, $key);
	}

	// Add names, ids, and other form properties
	foreach (module_implements('form_alter') as $module) {
		$function = $module .'_form_alter';
		$function('expertsdb_alias_widget_js', $form);
	}
	$form = form_builder('expertsdb_alias_widget_js', $form);

	// if form is rendered as part of the user profile page, we need to alter name and id of newly generated form elements
/*	if($_POST['form_id'] == 'user_edit'){
		foreach (element_children($form) as $key) {
			$element_name = explode('[',$form[$key]['#name']);
			array_walk($element_name,'_expertsdb_alias_widget_alter_elements');
			$form[$key]['#name'] = $type['type'] . '_node_form' . '[' . implode('][',$element_name).']';
		}
	}*/

	$output = drupal_render($form);

	print drupal_to_js(array('status' => TRUE, 'data' => $output));
	exit;
}


/**
 * Helper function renders the expertsdb_email widget only for multiple values.
 *
 * @param unknown_type $form_item
 * @param unknown_type $field
 * @param unknown_type $node_field
 * @param unknown_type $delta
 */
function _expertsdb_alias_widget_form(&$form_item, $field, $node_field, $delta = 0) {

	$form_item = array(
    '#tree' => TRUE,
    '#theme' => 'expertsdb_alias_widget_form_row',
	);

	$default_alias = "";
	if (isset($field['widget']['default_value'][$delta]['alias'])) {
		$default_alias = $field['widget']['default_value'][$delta]['alias'];
	}

	$form_item['alias'] = array(
    '#type' => 'textfield',
    '#maxlength' => '255',
    '#title' => $delta === 0 ? t('Name Alias') : NULL,
    '#default_value' => ($node_field['alias']) ? $node_field['alias'] : $default_alias,
    '#required' => ($delta === 0) ? $field['required'] : FALSE,
	);
}

function _expertsdb_alias_widget_prepare(&$node_field) {
	// only prepare, if data is actually serialized
	if(strstr($node_field[0]['expertsdb_alias'],':{')){
		$node_field[0] = unserialize($node_field[0]['expertsdb_alias']);
		if(count($node_field) > 0){
			// return content of first array element
			$node_field = $node_field[0];
		}
	}
}

function _expertsdb_alias_serialize(&$node_field){
	$node_field = array(array('expertsdb_alias' => serialize($node_field)));
}

/**
 * Function to remove unwanted elements from the node_field array
 *
 * @param array $node_field
 */
function _expertsdb_alias_cleanup(&$node_field){

	$save_field = array();
	$registered_aliases =array();
	// Remove the JS helper fields
	unset($node_field['count'], $node_field['more-url'], $node_field['more']);
	foreach ($node_field as $delta => $value) {
		if (!empty($value['alias']) || $delta == 0) {
			// skip duplicates emails
			if(in_array($value['alias'], $registered_aliases)){
				continue;
			}
			// register email to avoid duplicates
			array_push($registered_aliases, $value['alias']);

			if (!empty($value['alias']) || $delta == 0) {
				$save_field[] = $node_field[$delta];
			}
		}
	}
	$node_field = $save_field;
}

function _expertsdb_alias_widget_process(&$node_field) {
	foreach($node_field as $delta => $value) {
		if (is_numeric($delta)) {
			// Trim whitespace from alias
			$node_field[$delta]['alias'] = check_plain(trim($node_field[$delta]['alias']));
		}
	}
}

function _expertsdb_alias_widget_alter_elements(&$element){
	$element = preg_replace('@\]@', '', $element);
}


/**
 * Theme the display of the entire link set
 */
function theme_expertsdb_alias_widget_form($element) {
	// pull in the stylesheet
	drupal_add_css(drupal_get_path('module', 'expertsdb_alias') .'/expertsdb_alias_form.css');
	$output = drupal_render($element);

	return $output;
}

/**
 * Theme the display of a single form row
 */
function theme_expertsdb_alias_widget_form_row($element) {
	$output = '';
	$output .= '<div class="expertsdb-alias-field-row clear-block"><div class="expertsdb-alias-field-subrow clear-block">';
	$output .= '<div class="expertsdb-alias-field-alias">' . drupal_render($element['alias']) . '</div>';
	$output .= '</div>';
	$output .= drupal_render($element);
	$output .= '</div>';
	return $output;
}

/**
 * Theme the settings form for the expertsdb_alias field.
 */
function theme_expertsdb_alias_field_settings($form) {
	$title_value = drupal_render($form['title_value']);
	$title_checkbox = drupal_render($form['title']['value']);

	// Set Static Title radio option to include the title_value textfield
	$form['title']['value'] = array('#value' => '<div class="container-inline">'. $title_checkbox . $title_value .'</div>');

	// Reprint the title radio options with the included textfield
	return drupal_render($form);
}

/**
 * Theme to display a complete container with all links in view mode
 *
 * @param unknown_type $node
 * @param unknown_type $field
 * @param unknown_type $items
 * @param unknown_type $teaser
 * @param unknown_type $page
 * @return unknown
 */
function theme_expertsdb_alias_container($node, $field, $items, $teaser, $page){
	// pull in the stylesheet
	drupal_add_css(drupal_get_path('module', 'expertsdb_alias') .'/expertsdb_alias_view.css');
	$output = '';
	$output .= '<div class="expertsdb-link-container">';
	$output .= theme('field', $node, $field, $items, $teaser, $page);
	$output .= '</div>';
	return $output;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function expertsdb_alias_field_formatter_info() {
	return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('expertsdb_alias'),
	),
    'comma separated list' => array(
      'label' => t('Comma separated list'),
      'field types' => array('expertsdb_alias'),
	),
    'comma separated list in brackets' => array(
      'label' => t('Comma separated list, in brackets'),
      'field types' => array('expertsdb_alias'),
	),
	);
}

/**
 * Implementation of hook_field_formatter().
 */
function expertsdb_alias_field_formatter($field, $item, $formatter, $node) {
	// item comes in either as serialized or unserialized value
	if (empty($item[0]['expertsdb_alias']) && empty($item[0]['alias'])) {
		return '';
	}
	if(strstr($item[0]['expertsdb_alias'],':{')){
		$items = unserialize($item[0]['expertsdb_alias']);
	}else{
		unset($item['count'], $item['more-url'], $item['more']);
		$items = $item;
	}

	/*
	 * React on privacy settings
	 */
	if($node->field_privacy){
		global $user;
		$term = taxonomy_get_term($node->field_privacy[0]['tid']);
		switch($term->name){

			case PRIVACY_CONTACT_PRIVATE:
				// allow everybody to view aliases as configured in the field formatter (display field)
				break;

			case PRIVACY_PRIVATE:
				// show information only to roles with access and node author
				if($user->uid != $node->uid && !user_access('view private expertsdb_alias fields',$user)){
					return;
				}
				break;

			case PRIVACY_PUBLIC:
				// allow everybody to view aliases as configured in the field formatter (display field)
				break;


		}
	}

	// check, if we do have any aliases
	$aliases_present = FALSE;
	foreach ($items as $delta => $item){
		if(!empty($item['alias'])){
			$aliases_present = TRUE;
		}
	}
	if (!$aliases_present) return;

	$tmp_items = array();
	foreach ($items as $delta => $item) {

		switch ($formatter) {
			case "comma separated list":
			case "comma separated list in brackets":
				$tmp_items[] = $item['alias'];
				break;

			default:
				$items[$delta]['view'] = '<span class="name-alias">' . $item['alias'] . '</span>';
		}
	}

	if(count($tmp_items) > 0) {
		// clear items
		$items = array();
		$items[0]['alias'] =  implode(", ",$tmp_items);
		$items[0]['view'] = ($formatter == "comma separated list") ? implode(", ",$tmp_items) : '<span class="name-alias">(' . implode(", ",$tmp_items) . ")</span>";
	}

	return $items;
}
<?php
// $Id: softwareTracker.module 2505 2008-05-28 15:47:04Z a.kohlbecker $

/**
 * @file
 * TODO ???
 */


/**
 * Display help and module information
 * @param section which section of the site we're displaying help
 * @return help text for section
 */
function softwareTracker_help($section='') {

    $out = '';
    switch ($section) {
        case "admin/modules#description":
            $out = t("");
            break;
        case 'node/add#portfolio':
            return t("A Software Tracker Page to describe and categorize applications, services etc.");
    }
    return $out;
}


/**
 * Implementation of hook_node_info().
 * Define the node type
 */
function softwareTracker_node_info() {
    return array('softwareTracker' => array(
        'name' => t('Software Tracker Node'),
        'module' => 'softwareTracker'),
        'description' => t("Note Type for a Software Tracker Application. 
							Software (applications, services etc) can be 
							categorized and described by means of this node type.")
        );
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the portfolio module
 */
function softwareTracker_perm() {
    return array(
        'create tracker entry',
        'edit tracker entry',
        'edit own tracker entry',
        'publish tracker entry'
	);
}


function softwareTracker_access($op, &$node) {
    global $user;
    
    
   // drupal_set_message('<pre>'.print_r($node, true).'</pre>');
    if ($op == 'create') {
        return user_access('create tracker entry');
    }
    else if ($op == 'view') {
        return (user_access('access content') && $node->status > 0)
        || (
	        ($user->uid == $node->uid && user_access('edit own tracker entry'))
	        || user_access('edit tracker entry')
	        );
    }
    else if ($op == 'update' ||  $op == 'delete') {
        if(
            ($user->uid == $node->uid && user_access('edit own tracker entry'))
            || user_access('edit tracker entry')
            ) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}


function softwareTracker_menu($may_cache) {
    
   global $user;
    
   if($may_cache){
	    // --- admin items
	    $items[] = array(
		    'path' => 'admin/settings/softwareTracker',
		    'title' => t('Software Tracker'),
		    'description' => t('Configure the SoftwareTracker Module'),
		    'callback' => 'drupal_get_form',
		    'callback arguments' => array('softwareTracker_settings'),
		    'access' => user_access('administer site configuration'),
		    'type' => MENU_NORMAL_ITEM, // optional
	    );
	    
	    // --- software list items
        /*
         * softwareTracker
         * softwareTracker/list
         * softwareTracker/list/all/fadd/{vocab}/{term}
         * softwareTracker/list/all/frem/{vocab}/{term}
         * softwareTracker/list/own
         * softwareTracker/list/unpublished
         * softwareTracker/search
         * softwareTracker/feed/{mode}/{type}/{domain}
         */

        $items[] = array(
        'path' => 'softwareTracker',
        'title' => t('List All'),
        'description' => t('List of all tracker entries'),
        'callback' => 'softwareTracker_filtered_list', 
        'callback arguments' => array('list', 'all'),
        'access' => true,
        'type' => MENU_CALLBACK,
        );
	    
	    $items[] = array(
	    'path' => 'softwareTracker/list',
	    'title' => t('List All'),
	    'description' => t('List of all tracker entries'),
	    'callback' => 'softwareTracker_filtered_list', //'node_page', //softwareTracker_filtered_list',
	    'access' => true,
	    'type' => MENU_CALLBACK, 
	    );
	    
	    $items[] = array(
	    'path' => 'softwareTracker/list/all',
	    'title' => t('All'),
	    'description' => t('List of all tracker entries'),
	    'callback' => 'softwareTracker_filtered_list',
	    'callback arguments' => array('all'),
	    'access' => true,
	    'type' => MENU_DEFAULT_LOCAL_TASK,
	    );
	    
	    $items[] = array(
	    'path' => 'softwareTracker/list/own',
	    'title' => t('Own'),
	    'description' => t('List of own tracker entries'),
	    'callback' => 'softwareTracker_filtered_list',
	    'callback arguments' => array('own'),
	    'access' => $user->uid != 0, // anonymous has uid 0
	    'type' => MENU_LOCAL_TASK,
	    );
	    
	    $items[] = array(
	    'path' => 'softwareTracker/list/unpublished',
	    'title' => t('Unpublished'),
	    'description' => t('List of unpublished tracker entries'),
	    'callback' => 'softwareTracker_filtered_list',
	    'callback arguments' => array('unpublished'),
	    'access' => $user->uid != 0, // anonymous has uid 0
	    'type' => MENU_LOCAL_TASK,
	    );
	    
	    $items[] = array(
	    'path' => 'softwareTracker/feed',
	    //'title' => t('RSS'),
	    //'description' => t('RSS feed of tracker entries'),
	    'callback' => 'softwareTracker_feed',
	    'type' => MENU_CALLBACK,
	    );
	    
	    
   } else {
       // Add the CSS for this module
       // We put this in !$may_cache so it's only added once per request
       drupal_add_css(drupal_get_path('module', 'softwareTracker') .'/softwareTracker.css');
   }
    return $items;

}


// ====================== Admin & Edit Forms ===================== //
 
function softwareTracker_settings() {
    
    $form = array();
    
    $vocabs = taxonomy_get_vocabularies('softwareTracker');
    $options = array();
    $options[''] = "-- please select --";
    foreach($vocabs as $voc){
        $options["$voc->vid"] = $voc->name;
    }
    /*  
    $form['softwareTracker_debug'] = array(
    '#type' => 'markup', 
    '#value' =>'<pre style="font-size:80%">'.print_r($vocabs, true).'</pre>'
	);
    */
    
    $form['softwareTracker_vocab_os_platform'] = array(
    '#type'		=> 'select',
    '#title'		=> t('Operation System Vocabulary'),
    '#default_value'	=> variable_get('softwareTracker_vocab_os_platform', 'none'),
    '#options' => $options,
    '#description'	=> t('The vocabulary containing operation system terms'),
    '#required'	=> true,
    '#weight'		=> -10
    );
    
    $form['softwareTracker_vocab_type'] = array(
    '#type'		=> 'select',
    '#title'		=> t('Software Type Vocabulary'),
    '#default_value'	=> variable_get('softwareTracker_vocab_type', 'none'),
    '#options' => $options,
    '#required'	=> true,
    '#weight'		=> -9
    );
    
    $form['softwareTracker_vocab_domain'] = array(
    '#type'		=> 'select',
    '#title'		=> t('Software Domain'),
    '#default_value'	=> variable_get('softwareTracker_vocab_domain', 'none'),
    '#options' => $options,
    '#required'	=> true,
    '#weight'		=> -8
    );

    return system_settings_form($form);
}

function softwareTracker_form(&$node, &$param) {

    $form = array();
    $form['#attributes'] = array('enctype' => 'multipart/form-data');
     
    if(user_access('publish tracker entry')){
        $form['publish_tracker_entry'] = array(
        '#type'=>'checkbox',
        '#title' => t('Publish this tracker entry'),
        '#default_value' => $node->status,
        '#weight'        => -6
        );
    }

    $form['title'] = array(
    '#type' => 'textfield',
    '#title'         => t('Title'),
    '#default_value' => $node->title,
    '#description'   => t('The name of the application, service etc.'),
    '#required'      => TRUE,
    '#weight'        => -5
    );
    
    $form['certified'] = array(
    '#type' => 'checkbox',
    '#title'         => t('Edit Certification'),
    '#default_value' => $node->certified != 0 ? 1 : 0,
    '#description'   => t('Check this box if software is certified by <a href="http://www.e-taxonomy.eu/">EDIT</a>.'.ord($node->certified)),
    '#required'      => false,
    '#weight'        => -4
    );
    

    // --------- icon fieldset ---------
    $form['icon'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('Icon'),
	    '#collapsible' => TRUE,
	    '#collapsed' => !$node->icon,
	    '#weight'        => -2
    );
    
    $form['icon']['icon_file'] = array(
	    '#type' => 'file',
	    '#title'         => t('Icon'),
	    '#required'      => FALSE,
    );
    
    if ($node->icon) {
        $form['icon']['#description'] = t('An icon already exists ['.$node->icon.'], if you upload another one the current file will be replaced.');

        $form['icon']['icon_drop'] = array(
	    '#type' => 'checkbox',
	    '#title'         => t('Drop Icon'),
	    '#description'   => t('Check this to drop <i>'.$node->icon.'</i>'),
	    '#required'      => FALSE
	    );
    }
    
    $form['icon']['icon_in_store'] = array(
	    '#type' => 'hidden',
	    '#default_value' => $node->icon
	);
    
    // --------- END icon fieldset ---------

    $form['characterization'] = array(
    '#type' => 'textarea',
    '#title'         => t('Description'),
    '#default_value' => $node->characterization,
    '#required'      => FALSE,
    '#rows' => 8,
    '#weight'        => 1
    );
    
    $form['review'] = array(
    '#type' => 'textarea',
    '#title'         => t('Review'),
    '#default_value' => $node->review,
    '#required'      => FALSE,
    '#rows' => 8,
    '#weight'        => 2
    );
    
    $form['version'] = array(
    '#type' => 'textfield',
    '#title'         => t('Version'),
    '#description'   => t('The software version'),
    '#default_value' => $node->version,
    '#required'      => FALSE,
    '#weight'        => 4
    );

    // !!!!!!!!!!!!!!!!!!!!! ('#weight'        => 5) is reserved by drupal !!

    $form['software_author'] = array(
    '#type' => 'textfield',
    '#title'         => t('Author'),
    '#description'   => t('The author (person, institution, company etc.) of the software.'),
    '#default_value' => $node->software_author,
    '#required'      => FALSE,
    '#weight'        => 6
    );
    
    $form['home_url'] = array(
    '#type' => 'textfield',
    '#title'         => t('Homepage URL'),
    '#description'   => t('The homepage of the software. You must not forget to add the leading http://'),
    '#default_value' => ($node->home_url ? $node->home_url : 'http://'),
    '#required'      => FALSE,
    '#weight'        => 7
    );
    
    $form['download_url'] = array(
    '#type' => 'textfield',
    '#title'         => t('Download URL'),
    '#description'   => t('URL for direct download or to the page from where the software can be downloaded, ordered etc. You must not forget to add the leading http://'),
    '#default_value' => ($node->download_url ? $node->download_url : 'http://'),
    '#required'      => FALSE,
    '#weight'        => 8
    );
    
    $form['license'] = array(
    '#type' => 'select',
    '#title'         => t('License Type'),
    '#default_value' => isset($node->license) ? $node->license : 'unknown',
    //TODO a vocabulary should be used for license type
    '#options' => array('unknown'=>'unknown', 'open source'=>'open source', 'freeware'=>'freeware', 'shareware'=>'shareware', 'commercial'=>'commercial' ),
    '#weight'        => 9
    );
    
    $form['price'] = array(
    '#type' => 'textfield',
    '#title'         => t('Price'),
    '#default_value' => $node->price,
    '#required'      => FALSE,
    '#weight'        => 10
    );
    
    $form['system_requirements'] = array(
    '#type' => 'textarea',
    '#title'         => t('System Requirements'),
    //'#description'   => t('The software version'),
    '#default_value' => $node->system_requirements,
    '#required'      => FALSE,
    '#rows' => 8,
    '#weight'        => 12
    );
    
    $form['interface'] = array(
    '#type' => 'textarea',
    '#title'         => t('Interfaces & Data Standards'),
    //'#description'   => t('The software version'),
    '#default_value' => $node->interface,
    '#required'      => FALSE,
    '#rows' => 8,
    '#weight'        => 13
    );
    
    
    // --------- screenshot fieldset ---------
    $form['screenshot'] = array(
    '#type' => 'fieldset',
    '#title' => t('Screenshot'),
    '#collapsible' => TRUE,
    '#collapsed'   => !$node->screenshot,
    '#weight'        => 14
    );

    $form['screenshot']['screenshot_file'] = array(
    '#type' => 'file',
    '#title'         => t('Screenshot'),
    '#required'      => FALSE,
    );
    
    if ($node->screenshot) {
        $form['screenshot']['#description'] = t('A screenshot already exists ['.$node->screenshot.'], if you upload another screenshot the current one will be replaced.');

        $form['screenshot']['screenshot_drop'] = array(
	    '#type' => 'checkbox',
	    '#title'         => t('Drop screenshot'),
	    '#description'   => t('Check this to drop <i>'.$node->screenshot.'</i>'),
	    '#required'      => FALSE,
	    );
    }
    
    $form['screenshot']['screenshot_in_store'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->screenshot
    );
    
    // --------- END screenshot fieldset ---------
    
    return $form;
}


// ================== Data & Submission Handling ================= //

function softwareTracker_submit(&$node) {
    if(isset($node->publish_tracker_entry)){
        $node->status = $node->publish_tracker_entry;
    }

    _softwareTracker_store_upload($node, 'screenshot');
    _softwareTracker_store_upload($node, 'icon');
}

function _softwareTracker_files_dir(){
    /** dir path must end with '/' **/
    $dir_path = file_directory_path().'/softwareTracker/';
    file_check_directory($dir_path, true);
    return $dir_path;
}


/**
 * //TODO 2 Strategies of dublicate handling:
 * 		upload:
 * 			- overwrite existing if for same node
 * 			- rename newly uploaded if same name exists
 * //TODO simplify messages
 * 
 * @param unknown_type $node
 * @param unknown_type $elementName
 */
function _softwareTracker_store_upload(&$node, $elementName){

    /*
     * File object :
     * 	$file->filename   original name of the file which was uploaded
     * 	$file->filepath   path to the temp file
     * 	$file->source     form element name
     * 	$file->filemime   the mimetype
     * 	$file->filesize   the size of the file
     */
    $node_vars = (array)$node;

    $key_file = $elementName.'_file';
    $key_drop = $elementName.'_drop';
    $key_in_store = $elementName.'_in_store';

    if($node_vars[$key_drop]){
        $imagepath = $node_vars[$key_in_store];
        drupal_set_message('deleting: <pre style="font-size:90%">'.$key_file.' = '.$imagepath.'</pre>');
        $sql_check = "SELECT COUNT(*) AS cnt FROM {software_tracker_node} WHERE ".$elementName." = '%s'";
        $res = db_fetch_array(db_query($sql_check, $imagepath));
        drupal_set_message($sql_check.' ; '.$imagepath.' : '.print_r($res, true) );
        if($res['cnt'] < 2){ // only used in current page){ // only used in current page
            // image in not used by another portfolio page, so it can be deleted
            if(file_delete($imagepath)){
                watchdog('content', 'deleted '.$imagepath, WATCHDOG_NOTICE);
            } else {
                watchdog('content', 'error deleting '.$imagepath, WATCHDOG_ERROR);
            }
        } else {
            watchdog('content', 'not deleting <i>'. $imagepath . '</i> since it is still used in '.( $res['cnt'] ).' other pages', WATCHDOG_WARNING);
        }
    } else 	if ($image = file_check_upload($key_file)) {
        drupal_set_message('uploading <pre style="font-size:90%">'.$key_file.' = '.print_r($image, true).'</pre>');
        $basepath = _softwareTracker_files_dir();
        if(file_exists($basepath.'/'.$image->filename)){
            if(!file_delete($basepath.'/'.$image->filename)){
                watchdog('content', 'error deleting '.$basepath.'/'.$image->filename, WATCHDOG_ERROR);
            } else {
                watchdog('content', 'deleted '.$basepath.'/'.$image->filename, WATCHDOG_ERROR);
            }
        } else {
            watchdog('content', $basepath.'/'.$image->filename. ' not jet existing', WATCHDOG_NOTICE);
        }

        $uploaded_image = file_save_upload($key_file, $basepath, true);

        $evalStr = "\$node->$key_file = \$uploaded_image ;";
        eval($evalStr);

        if($uploaded_image)
        drupal_set_message('saving upload <i>'.$image->filename.'</i> to <i>'.$uploaded_image->filepath.'</i>');
        else
        drupal_set_message ('error uploading <i>'.$image->filename.'</i> to <i>'.$uploaded_image->filepath.'</i>', 'error');
    }
}

function softwareTracker_load(&$node) {
    $additions = db_fetch_object(db_query('SELECT * FROM {software_tracker_node} '.
    'WHERE nid = %d', $node->nid));
    
    // hide the default title for softwareTracker content
    //$additions->title = '';
    
    return $additions;
}


function softwareTracker_insert($node) {
    global $user;
    
    $sql = "INSERT INTO {software_tracker_node} (
			nid, software_author, home_url, download_url, 
			version, license, price, screenshot, icon, characterization,
			review, review_authors,
			system_requirements, interface) ".
    "VALUES (%d, '%s', '%s', '%s', 
		   	'%s', '%s', '%s', '%s', '%s', '%s',
			'%s', '%s', 
		    '%s', '%s')";
    db_query($sql,
    $node->nid, $node->software_author, $node->home_url, $node->download_url,
    $node->version, $node->license, $node->price, $node->screenshot_file->filepath, $node->icon_file->filepath,  $node->characterization,
    $node->review, $user->uid,
    $node->system_requirements, $node->interface 
	);
	if($error = db_error()){
	    watchdog('content', 'Software Tracker Node - (nid: '.$node->nid.'):'.$error.'<pre>'.$sql.'</pre>', WATCHDOG_ERROR);
	} else {
	    watchdog('content', 'Software Tracker Node - Inserted(nid: '.$node->nid.')', WATCHDOG_NOTICE);
	}

}


function softwareTracker_update($node) {
    global $user;
    
    $auth_ids = split(',',$node->review_authors);
    if(!array_search($user->uid, $auth_ids)){
	    $auth_ids[] = $user->uid;
	}
	$review_authors = implode(',', $auth_ids);
    
    $sql = "UPDATE {software_tracker_node} SET 
			software_author='%s', home_url='%s', download_url='%s', 
			version='%s', license='%s', price='%s',  characterization='%s',
			review='%s', review_authors='%s',
			system_requirements='%s', interface='%s', certified=%s";
    $args = array(
    $node->software_author, $node->home_url, $node->download_url,
    $node->version, $node->license, $node->price,  $node->characterization,
    $node->review, $review_authors,
    $node->system_requirements, $node->interface, $node->certified);
        
    if( !empty($node->icon_file) || $node->icon_drop){
        $sql .= ", icon='%s'";
        $args[] = $node->icon_file->filepath;
    }
    if( !empty($node->screenshot_file) || $node->screenshot_drop){
        $sql .= ", screenshot='%s'";
        $args[] = $node->screenshot_file->filepath;
    }
    $sql .= " WHERE nid = %d";
    $args[] = $node->nid;
    
    db_query($sql, $args);
    if($error = db_error()){
        watchdog('content', 'Software Tracker Node - (nid: '.$node->nid.'):'.$error.'<pre>'.$sql.'</pre>', WATCHDOG_ERROR);
    } else {
        watchdog('content', 'Software Tracker Node - Updated (nid: '.$node->nid.')', WATCHDOG_NOTICE);    
    }
}

function softwareTracker_delete($node) {
    db_query("DELETE FROM {software_tracker_node} WHERE nid = %d", $node->nid);
    watchdog('content', 'Software Tracker Node - Deleted', WATCHDOG_NOTICE);
}


function _softwareTracker_init_session(){
    $_SESSION['softwareTracker'] = array('type'=>false, 'domain'=>false);
}
/**
 * gets the softwareTracker related session array and retuns it by reference
 *
 * @return array by reference
 */
function & _softwareTracker_get_session(){
    if(!isset($_SESSION['softwareTracker'])){
        _softwareTracker_init_session();
    }
    return $_SESSION['softwareTracker'];
}

function  _softwareTracker_set_session(&$vals){
    if(!isset($_SESSION['softwareTracker'])){
        _softwareTracker_init_session();
    }
    return $_SESSION['softwareTracker'] = $vals;
}

function _softwareTracker_set_search_params($list_mode, $vocab, $tid = false){
    
    // array of session values by reference
    $sessvals = _softwareTracker_get_session();
    $sessvals['mode'] = $list_mode;
    if($vocab){
        $sessvals[$vocab] = ($tid == 'all' ? false : array($tid));
        _softwareTracker_set_session($sessvals);
    }
}

function softwareTracker_search($mode, $vtids, $days = false){
    global $user;
    
    // --- prepare array of comma sperated termID strings to be used in sql IN (1,2,3) statements
    $tid_strings = array();
    
    foreach(array_keys($vtids) as $vid){
        if($vtids[$vid] && is_array($vtids[$vid])){
            $terms = $vtids[$vid];
        } else {
            $term_instances = taxonomy_get_tree($vid);
            $terms = array();
            foreach($term_instances as $t){
                $terms[] = $t->tid;
            }
        }
        $tid_str = '';
		foreach($terms as $t){
		    $tid_str .= (strlen($tid_str) > 0?',':'').$t;
		}
		$tid_strings[] = $tid_str;
    }

    // --- build inner select
    $sql_where = '';
    $cnt = 0;
    while($tid_str = array_pop($tid_strings)){
        $is_last_token = count($tid_strings) == 0;
        if($is_last_token){
            $sql_where_tmp = " tid IN (".$tid_str.")";
        } else {
            $sql_where_tmp = "SELECT nid from {term_node} WHERE tid IN (".$tid_str.")";
        }
        if($cnt == 0){
            $sql_where = $sql_where_tmp;
        } else {
            $sql_where = $sql_where_tmp.' AND tn.nid IN('.$sql_where.')';
        }
		++$cnt;
    }
    
    switch($mode){
        case 'all':
            break;
        case 'own':
            $sql_where = ' n.uid='.$user->uid.' AND '.$sql_where;
            break;
        case 'unpublished':
            $sql_where = ' n.status=0 AND '.$sql_where;
    }
    
    $sql_orderby = 'n.title'; //  n.title, n.changed, n.created
    
    if($days){
	    $oneDay = 60 * 60 * 24;
	    $now = time();
	    $sql_where .= ' AND '.$now.' - n.changed < '.($oneDay * $days);
    }
 
    $sql = 'SELECT n.* from {term_node} AS tn inner join  {node} as n on n.nid = tn.nid
		WHERE 1=1 AND '.$sql_where.' GROUP BY nid ORDER BY '.$sql_orderby;
    //drupal_set_message(db_prefix_tables($sql));
    $res =  db_query($sql);
    $nodes = array();
    while(db_num_rows($res) > 0 && $row =  db_fetch_array($res)) {
        $node = node_load($row['nid']);
        $nodes[] = $node;
    }
    /* drupal_set_message($sql);
    $res =  db_query($sql);
    while (db_num_rows($res) > 0 && $node =  db_fetch_object($res)) {
        $nodes[] = $node;
    }
	*/
      
    return $nodes;
}


// ====================== Output Generation ====================== //

/*
 * @param a3
 *       For "view", passes in the $teaser parameter from node_view().
 *       For "validate", passes in the $form parameter from node_validate().

 * @param a4 
 *       For "view", passes in the $page parameter from node_view().
 * 
 * @return This varies depending on the operation.
 *      The "submit", "insert", "update", "delete", "print' and "view" operations have no return value.
 *      The "load" operation should return an array containing pairs of fields => values to be merged into the node object.
*/

/* 
 function softwareTracker_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
     drupal_set_message('nodeapi op='.$op.' node->title:'.$node->title);
    switch($op){
        case 'load':
            $node->title = 'Search Results';
            return array('title'=>'Search Results');
            
            break;
        case 'view': 
            $node->title = 'Search Results';
            $teaserForm = $a3;
            form_set_value($teaserForm['title'], 'Search Results');
            $pageForm = $a4;
            form_set_value($pageForm['title'], 'Search Results');
            drupal_set_message('nodeapi #2');
        break;
            
    }
}
*/

function softwareTracker_uids_to_names($uidsStr){
    $uids = explode(',', $uidsStr);
    $user_str = '';
    $sepatator = '; ';
    $sep = '';
    foreach($uids as $uid){
        if(strlen($user_str) > 0){
            $sep = $sepatator;        }
        $user = user_load(array('uid'=>$uid));
        if($user){
            $user_str .= $sep.$user->name;
        } else {
            $user_str .= $sep.'missing user: ['.$uid.']';
        }
    }
    return $user_str;
}

function softwareTracker_block($op = 'list', $delta = 'domain', $edit = array()) {
    if ($op == 'list') {
        /*
        $blocks['type'] =
        array('info' => t('Software Type Preselection (Lists terms of the software type vocabulary)'),
        /  *'weight' => 0, 'enabled' => 1, 'region' => 'left'*  /);
        $blocks['domain'] =
        array('info' => t('Software Domain Preselection (Lists terms of the software domain vocabulary)'),
        /  *'weight' => 1, 'enabled' => 1, 'region' => 'left'*  /);
        *
        */
        $blocks[0] = array('info' => t('Software Tracker Search Box'));
        return $blocks;
    }
    else if ($op == 'view') {
        $content = _softwareTracker_block_content('type');
        $content .= "<br/>";
        $content .= _softwareTracker_block_content('domain');
    } else {
        $content .= 'ERROR: software tracker '.$delta.' vocabulary not properly setup please edit the '.l('settings', 'admin/settings/softwareTracker');
    }
    $block = array(
    'subject' => 'Browse Software',
    'content' => $content);

    return $block;
}


function _softwareTracker_block_content($delta){
   
    $content = '';
    switch($delta) {
        case 'type':
            $vid = variable_get('softwareTracker_vocab_type', 'none');
            $default_option = t('All Types');
            break;
        case 'domain':
            $vid = variable_get('softwareTracker_vocab_domain', 'none');
            $default_option = t('All Categories');
            break;
    }
    if($vid !== 'none'){
        $terms = taxonomy_get_tree($vid);
        $sessvals = _softwareTracker_get_session();
        if(isset($sessvals[$delta])){
            $vocvals = $sessvals[$delta];
        } else {
            $vocvals = false;
        }
        
        $sessvals = _softwareTracker_get_session();
        //drupal_set_message('<pre>'.print_r($sessvals, true).'<pre>');
        $list_mode = (isset($sessvals['mode']) ? $sessvals['mode'] : 'all');
        
        //$content .= '<pre style="font-size:80%">'.print_r($terms, true).'</pre>';
        $content .= '<ul class="softwareTracker">'.chr(10);
        $content .= '<li class="default'.($vocvals === false?' active':'').'">'
			.l('<span>'.$default_option.'</span>', 
            'softwareTracker/list/'.$list_mode.'/'.$delta.'/all',  array(), null, null, false, true)
            .'</li>'.chr(10);


        foreach($terms as $t){
            $is_active = $vocvals && in_array($t->tid, $vocvals);
            
            $content .= '<li '.($is_active? 'class="active"':'').'>'
			.l('<span>'.$t->name.'</span>', 
            'softwareTracker/list/'.$list_mode.'/'.$delta.'/'.$t->tid,  array(), null, null, false, true)
            .'</li>'.chr(10);
        }
         
        $content .= "</ul>\n";
        
    }
    return $content;
}

function _softwareTracker_version_title(&$node){
    $version = trim(strtolower($node->version));
    if($version){
	    $version = str_replace('version', '', $version);
	    $version = str_replace('v.', '', $version);
	    $version = str_replace('v', '', $version);
	    $version = t('v').$version;
    }
    return $node->title.' '.$version;
}

function _softwareTracker_module_image($filename){
    
    $source = base_path().drupal_get_path('module', 'softwareTracker').'/images/'.$filename;
    return $source;
}


function softwareTracker_view(&$node, $teaser = FALSE, $page = FALSE) {
    
	$node = node_prepare($node, $teaser);
    if($teaser){
   
        $node->content['softwareTracker_teaser'] = array(
        '#value' => theme('softwareTracker_teaser', $node),
        '#weight' => 1
        );
      
    } else {
        
	    $node->content['softwareTracker_page'] = array(
	        '#value' => theme('softwareTracker_page', $node),
		    '#weight' => 1
        );
    }
    return $node;
}

function theme_softwareTracker_teaser($node){
    /**
     * $node->nid,
     * $node->title, $node->software_author, $node->home_url, $node->download_url,
     * $node->lastReviewed,
     * $node->version, $node->licence, $node->price, $node->screenshot->filepath,
     * $node->icon->filepath,  $node->characterization,
     * $node->review, $node->review_authors,
     * $node->system_requirements, $node->interface
     */
    $modulePath = drupal_get_path('module','softwareTracker'); //cache this value somewhere
    
    $out  = '<div class="'.($node->status?'':'node-unpublished').'">';
    $out  .= '<h2 class="software_title">'.($node->icon ? '<img class="icon" src="'.base_path().$node->icon.'"/>': '').l(_softwareTracker_version_title($node), 'node/'.$node->nid);
    if($node->certified == 1){
        $out .= '&nbsp<img src="'._softwareTracker_module_image('EDIT_icon.gif').'" class="certification" alt="software is certified by EDIT" title="software is certified by EDIT" />'.chr(10);

    }
    $out .= ' <span class="reviewed_when">'.format_date($node->changed).'</span></h2>'.chr(10);
    
    $out .= '<p>'.$node->characterization.'</p>'.chr(10).'</div>'.chr(10);
    return $out;
}


function theme_softwareTracker_page($node){
    /**
     * $node->nid, 
     * $node->title, $node->software_author, $node->home_url, $node->download_url,  
     * $node->lastReviewed, 
     * $node->version, $node->licence, $node->price, $node->screenshot->filepath, 
     * $node->icon->filepath,  $node->characterization,
     * $node->system_requirements, $node->interface
     */
 
    // 1.) alter breadcrumbs
    
	$breadcrumbs = array('softwareTracker');
	if($node->characterization) $breadcrumbs[] = l(t('Description'), $_GET['q'], array(), null, 'description');
	if($node->review) $breadcrumbs[] = l(t('Review'), $_GET['q'], array(), null, 'review');
	if($node->system_requirements) $breadcrumbs[] = l(t('System Requirements'), $_GET['q'], array(), null, 'requirements');
	if($node->interface) $breadcrumbs[] = l(t('Interfaces & Data Standarts'), $_GET['q'], array(), null, 'interface');
	$breadcrumbs[] = l('Comments', $_GET['q'], array(), null, 'comments');
	drupal_set_breadcrumb($breadcrumbs);
    
    // 2.) render node content
    $out  = '<!-- BEGIN theme_softwareTracker_page() -->'
	.chr(10)
    .'<h2 class="software_title">'.($node->icon ? '<img class="icon" src="'.base_path().$node->icon.'"/>': '').l(_softwareTracker_version_title($node), 'node/'.$node->nid);
    if($node->certified == 1){
        $out .= '&nbsp<img src="'._softwareTracker_module_image('EDIT_icon.gif').'" class="certification" alt="software is certified by EDIT" title="software is certified by EDIT" />'.chr(10);

    }
    $out .= ' <span class="reviewed_when" title="Date of last change">'.format_date($node->changed).'<span></h2>'.chr(10);
    
    
    $out .= '<table class="softwareTracker">'.chr(10);
    $out .= '<tr><td>'.t('Author').':</td><td>'.$node->software_author.'</td></tr>'.chr(10);
    $out .= '<tr><td>'.t('Version').':</td><td>'.$node->version.'</td></tr>'.chr(10);
    $out .= '<tr><td>'.t('Home').':</td><td><a href="'.$node->home_url.'" target="_blank">'.$node->home_url.'</a></td></tr>'.chr(10);
    $out .= '<tr><td>'.t('Licence').':</td><td>'.$node->license.'</td></tr>'.chr(10);
    $out .= '<tr><td>'.t('Price').':</td><td>'.$node->price.'</td></tr>'.chr(10);
    $out .= '<tr><td>'.t('Download').':</td><td><a href="'.$node->download_url.'" target="_blank">'.$node->download_url.'</a></td></tr>'.chr(10);
    $out .= '</table>'.chr(10);
    
    if($node->characterization){
        $out .= '<a name="description" /></a><h2>'.t('Description').'</h2>'.chr(10);
	    $out .= '<p>'.$node->characterization.'</p>'.chr(10);
    }
    if($node->review || $node->review_authors){
        $out .= '<a name="review" /></a><h2>'.t('Review').'</h2>'.chr(10);
        if($node->review_authors){
            $out .= '<div class="review_authors">Edited by '.softwareTracker_uids_to_names($node->review_authors).'</div>';
        }
        $out .= '<p>'.( $node->review ? $node->review : t('--- No Review --')).'</p>'.chr(10);
    }
    if($node->system_requirements){
        $out .= '<a name="requirements"></a><h2>'.t('System Requirements').'</h2>'.chr(10);
	    $out .= '<p>'.$node->system_requirements.'</p>'.chr(10);
    }
    if($node->interface){
        $out .= '<a name="interface" /></a><h2>'.t('Interfaces & Data Standarts').'</h2>'.chr(10);
	    $out .= '<p>'.$node->interface.'</p>'.chr(10);
    }
    
    if($node->screenshot){
        $out .= '<img id="screenshot" src="'.base_path().$node->screenshot.'"/>';
    }
    $out .= '<table>'.chr(10);
    $out .= '<tr><td>'.t('Created').':</td><td>'.format_date($node->created).'</td></tr>'.chr(10);
    $out .= '<tr><td>'.t('Last Reviewed').':</td><td>'.format_date($node->changed).'</td></tr>'.chr(10);
    $out .= '</table>'.chr(10);
    $out .= '<a name="comment" />'.chr(10).'<!-- END theme_softwareTracker_page() -->';
    return $out;
}


function _page_tite($typeIds, $domainIds){
    $title = '';
    if($typeIds){
        $term = taxonomy_get_term($typeIds[0]);
        $title = $term->name.' & ';
    } else {
        $title = t('All Types').' & ';
    }
    if($domainIds){
        $term = taxonomy_get_term($domainIds[0]);
        $title .= $term->name;
    } else {
        $title .= t('All Categories');
    }
    return $title;
}
/**
 * @param string $list_mode of 'all', 'own', 'unpublished'
 * @param string $op 'tadd' or 'tdel'
 * @param string $vocab
 * @param int $tid termid
 */
function softwareTracker_filtered_list($list_mode, $vocab= false, $tid = false){

    //drupal_set_message('$list_mode:'.$list_mode.', $op:'.$op.', $vocab:'.$vocab.', $tid:'.$tid);

    _softwareTracker_set_search_params($list_mode, $vocab, $tid);
    $sessvals = _softwareTracker_get_session();
 
    //drupal_set_message('<pre>'.print_r(_softwareTracker_get_session(), true).'<pre>');

    drupal_set_title(_page_tite($sessvals['type'], $sessvals['domain']));

    $out = '';
    
    $type_vid = variable_get('softwareTracker_vocab_type', false);
    $domain_vid = variable_get('softwareTracker_vocab_domain', false);

    if($type_vid && $domain_vid){
        $nodes = softwareTracker_search($list_mode, array($type_vid=>$sessvals['type'], $domain_vid=>$sessvals['domain']));
        $out .= theme('softwareTracker_list', $nodes);
    } else {
        drupal_set_message('vocabularies not properly setup, please edit the '.l('settings', 'admin/settings/softwareTracker'), 'error');
    }
    
    // add rss feed to this page
    $typeIds = ($sessvals['type'] ? join(',', $sessvals['type']) : 'all');
    $domainIds = ($sessvals['domain'] ? join(',', $sessvals['domain']) : 'all');
    drupal_add_feed(url('softwareTracker/feed/'.$typeIds.'/'.$domainIds), 'RSS - '. $title);
    //$out =  $vocab.', '.$tid.', '.$op.'<br>'.print_r($sessvals, true).$out;
    return $out;
}

/**
 * 
 */
function softwareTracker_feed($typeId_str = 'all', $domainId_str = 'all', $days = 7){
    
    if($typeId_str == 'all'){
        $typeIds = false;
    } else {
        $typeIds = explode(',', $typeId_str);
    }
    if($typeId_str == 'all'){
        $domainIds = false;
    } else {
        $domainIds = explode(',', $domainId_str);
    }
   
    $title = _page_tite($typeIds, $domainIds);
    
    $type_vid = variable_get('softwareTracker_vocab_type', false);
    $domain_vid = variable_get('softwareTracker_vocab_domain', false);

    $now = getdate();
 
    $channel = array(
    'version'     => '2.0',
    'title'       => variable_get('site_name', 'Drupal - SoftwareTracker'),
    'link'        => url('softwareTracker/feed/'. $typeId_str .'/'. $domainId_str, NULL, NULL, TRUE),
    'description' => 'Changes in '._page_tite($typeIds, $domainIds).' of the last '.$days.' days.',
    'language'    => ($locale ? $locale : 'en')
    );

    $nodes = softwareTracker_search($list_mode, array($type_vid=>$typeIds, $domain_vid=>$domainIds), $days);
   
    $items = '';
    foreach($nodes AS $node){
        $link = url("node/$node->nid", NULL, NULL, 1);
        $items .= format_rss_item($node->title, $link, $node->characterization);
    }
    
    $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
    $output .= "<rss version=\"". $channel["version"] ."\" xml:base=\"". $base_url ."\" ". implode(' ', $namespaces) .">\n";
    $output .= format_rss_channel($channel['title'], $channel['link'], $channel['description'], $items, $channel['language']);
    $output .= "</rss>\n";

    drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');
    print $output;
}





function theme_softwareTracker_list($nodes){
    $out = '';
    $entryCnt = 0; 
    if(count($nodes) > 0){
        $out .= '<ol>'.chr(10);
        foreach($nodes as $node){
            if(softwareTracker_access('view', $node)){
                $entryCnt++;
                $out .= '<li>'.theme('softwareTracker_teaser', $node).'</li>'.chr(10);
            }
        }
        $out .= '<ol>'.chr(10);
    } 
    if($entryCnt == 0){
        $out .= '<h3>'.t('No entries in this section.').'</h2>'.chr(10);
    }
    return $out;
}


/* ############################################################### 
 * TODO put code below in separate module ?
 * ############################################################### */


<?php
// $Id: taxon_experts.module 2466 2008-05-27 15:51:07Z a.kohlbecker $

// include the module specific template extention for this module
require_once('template.taxon_experts.php');

/**
 * @file
 * A online information service on taxonomic experts, their expertise
 * and ongoing and planned taxonomic research projects.
 * This module is brought to you by the European Distributed Institute of Taxonomy - EDIT
 *
 * @author Berlin, BGBM, Andreas Kohlbecker 2007 - http://www.bgbm.org/BioDivInf/default.htm
 *
 * Copyright (C) 2007 EDIT
 * European Distributed Institute of Taxonomy
 * http://www.e-taxonomy.eu
 *
 */

/**
 * Implementation of hook_user().
 * used to update all nodes from one user, thus updating there autonodetitles
 * this function will invoke, when a user edits his user profile page
 */
function taxon_experts_user($op, &$edit, &$account, $category = NULL) {

	switch ($op) {
		case 'update':

			// only invoke update, if user updated his account manually
			if($category != 'expertsdb_person') return;

			// load all nodes from this user
			if($uid = $account->uid){

				// find content types to update
				// search through them for matching user ids and load those nodes
				$types = content_types();
				$types_to_update = array(
				'expertsdb_instmembership',
				'expertsdb_interest',
				);

				// Find nodes of the given types by this user and update the autonodetitle
				$search_tables = array();
				foreach ($types as $type_name => $type) {
					// Only add tables where the expertsdb_field is present
					if (in_array($type_name, $types_to_update)) {
						$search_tables['content_type_'.$type_name] = $type_name;
					}
				}

				foreach($search_tables as $table => $type){
					$ids = db_query(db_rewrite_sql("SELECT DISTINCT(n.nid) FROM {node} n LEFT JOIN {" . $table . "} f ON n.vid = f.vid WHERE n.uid=" . $account->uid . " AND n.type='" . $type . "' AND n.status = 1"));
					while ($data = db_fetch_object($ids)) {
						// load the node
						$node = node_load($data->nid);

						// invoke autonodetitle
						auto_nodetitle_set_title($node);

						// just resave the node
						node_save($node);
					}
				}
			}
	}
}

/**
 * Implementation of hook_nodeapi().
 *
 * this fixes issue with autonodetitle not being able to fetch node titles of referenced nodes
 */
function taxon_experts_nodeapi(&$node, $op, $form = NULL, $a4 = NULL) {
	$types_to_update = array(
		'expertsdb_instmembership',
	);

	if ($op == 'alter' && variable_get('ant_'. $node->type, 0) && in_array($node->type,$types_to_update)) {

		switch($node->type){
			case 'expertsdb_instmembership':

				// invoke autonodetitle
				auto_nodetitle_set_title($node);

				break;
		}

	}
}

/**
 * @param $display_options: e.g.: array(
 *    12 => array('term_path'=> true, 'notes'=>'$node->field_taxon_notes'),
 *    10 => array('term_path'=> true, 'notes'=>'$node->field_geo_notes',))
 */
function theme_expertdb_interest_categories($taxonomies, $display_options = array(), $table = true, $profile_node = FALSE){
	
	static $vocab_labels = array(
    'Taxonomy' => 'Field of Expertise',
    'Georegion' => 'Geographic Region',
    'Environment' => 'Environment',
    'Activity' => 'Taxonomic Activity',
    'Methods' => 'Methodology',
	);

	$terms = array();
	foreach($taxonomies as $tid => $term){
		$terms[$term->vid][] = $term;
	}
	if($table){
		$rows = array();
		foreach($terms as $vid => $term_items){
			$temp_cell = FALSE;
			$vocab = taxonomy_get_vocabulary($vid);

			$header_cell = array('data'=>t($vocab_labels[$vocab->name]).':', 'header'=>true, 'class'=>'category');
			$terms_cell = array('data'=>'', 'class'=>'term');

			$show_term_path = isset($display_options[$vid]['term_path']);

			foreach($term_items as $t){
				// calculate path from root term to $t if desired
				if($show_term_path){
					$p_terms = taxonomy_get_parents_all($t->tid);
				} else {
					$p_terms = array($t);
				}
				$term_path = '';
				while($item = array_pop($p_terms)){
					$term_path .= $item->name.(count($p_terms) ? ' Â» ':'');
				}
				// create table cell
				$temp_cell['data'][] = '<span class="term" title="'.$t->description.'">'.$term_path.'</span>';
			}
			$terms_cell['data'] = count($temp_cell['data']) > 1 ? implode('<br /> ',$temp_cell['data']) : implode('',$temp_cell['data']);

			// append notes
			if($display_options[$vid]['notes']){
				$terms_cell['data'] .= '<span class="notes">'.$display_options[$vid]['notes'].'</span>';
			}

			$rows[] = array($header_cell, $terms_cell);
		}
		return theme('table', null, $rows, array('class'=>'interest_data'));

	} else {
		$output = '';
		foreach($terms as $vid => $term_items){
			$vocab = taxonomy_get_vocabulary($vid);
			$output .= '<div class="field taxonomy">';
			$output .= '<div class="field-label field-label-category">'.t($vocab_labels[$vocab->name]).'</div>';
			$output .= '<div class="field-items field-items-terms">';
			foreach($term_items as $t){
				$output .= '<span class="field-item field-item-term" title="'.$t->description.'">'.$t->name.'</span>';
			}
			$output .= '</div></div>';
		}
		return $output;
	}
}

/**
 * Display the nodes of a view as a table and add an edit & delete links to each row.
 * An additional add link will be added as last row to the table.
 * see theme_views_view_list for a definition of $type
 */
function theme_views_view_optable($view, $nodes, $type, $add_op_link = null, $operations = array()) {

	$rows[] = array();
	$fields = _views_get_fields();

	foreach ($nodes as $node) {
		$row = array();
		foreach ($view->field as $field) {
			$cell['data'] = views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view);
			$cell['class'] = "view-field view-field-$field[queryname]";
			$row[] = $cell;
		}
		if( count($operations) || $add_op_link ){
			// add links for the edit & delete operations
			$cell['data'] = '';
			if(in_array('view', $operations)){
				$cell['data'] .= l(t('View'), "node/$node->nid").'&nbsp;';
			}
			if(in_array('edit', $operations)){
				$cell['data'] .= l(t('Edit'), "node/$node->nid/edit", null, drupal_get_destination()).'&nbsp;';
			}
			if(in_array('delete', $operations)){
				$cell['data'] .= l(t('Delete'), "node/$node->nid/delete", null, drupal_get_destination());
			}
			$cell['class'] = "view-field view-field-operations";
			$row[] = $cell;
		}
		$rows[] = $row;
	}


	if($add_op_link){
		// fill empty fields
		$row = array();
		foreach ($view->field as $field) {
			$cell['data'] = '';
			$cell['class'] = "view-field view-field-empty";
			$row[] = $cell;
		}
		// append add link as last cell
		$cell['data'] = $add_op_link;
		$cell['class'] = "view-field view-field-operations";
		$row[] = $cell;

		$rows[] = $row;
	}

	$header = $view->table_header;
	if(count($operations)){
		$header[] = array('data'=>t('Actions'));
	}

	return theme('table', $header, $rows);
}


/*
 * lifespan theming is done by expertsdb_timespan.module field formatters
 */
/*function theme_date_lifespan($field, $dates, $node = NULL) {

$date1 = $dates['value']['formatted'];
$date2 = $dates['value2']['formatted'];
if (empty($date1) && empty($date2)) {
return '';
}
elseif ($date1 == $date2 || empty($date2)) {
return '<div class="date_lifespan">*<span class="date-display-single">'. $date1 .'</span></div>';
}
else {
return '<div class="date_lifespan">*<span class="date-display-single">'. $date1 .'</span>'
.'<span class="date-display-separator"> - </span>'
.'&dagger;<span class="date-display-end">'. $date2 .'</span></div>';
}
}*/


/**
 * Enter description here...
 *
 * @param unknown_type $rows
 * @param unknown_type $cell array e.g:
 * 			$cell = array(
 *               'empty' =>  array(
 * 					'data'  => '',
 * 					'class' => 'view-field view-field-operations'),
 *               'addcell' =>  array(
 * 					'data'  => $add_op_link,
 * 					'class' => 'view-field view-field-operations'));
 *
 * @param integer $position in which column to put the cell in,
 * 			defaults to the last cell,
 * 			if $position > last column the cell will be put into the last column
 *
 * Usage example:
 *     if($add_op_link){
 $lastrow_cells = array(
 'empty' =>  array(
 'data'  => '',
 'class' => 'view-field view-field-empty'),
 'addcell' =>  array(
 'data'  => $add_op_link,
 'class' => 'view-field view-field-operations')
 );
 _add_as_last_row($rows, $lastrow_cells);
 }
 */
function _add_as_last_row(&$rows, $cells, $position = false){

	$row = array();
	foreach ($rows[0] as $idx => $field) {
		$row[] = $cell['empty'];
	}

	if($position){
		// put cell in position
		$row[$position] = $cells['addcell'];
	} else {
		// append add link as last cell
		$row[count($row)-1] = $cells['addcell'];
	}
	$rows[] = $row;
}


/*function _autotitle_expertsdb_address(&$node){
 $contact_nid = $node->field_parent_contact[0]['nid'];
 $contact_node = node_load($contact_nid);
 print 'Address for '.$contact_node->title;
 }*/

/**
 * Alternative link rendering to point to the user account of the node author
 * instead of pointing to the node itself
 *
 * used for view search_person
 */
function taxon_experts_handler_user_link($fieldinfo, $fielddata, $value, $data){
	if ($fielddata['options'] == 'nolink') {
		return check_plain($value);
	}
	$node = node_load($data->nid);
	return l($value, "user/$node->uid");
}

function taxon_experts_handler_user_interest_link($fieldinfo, $fielddata, $value, $data){
	if ($fielddata['label'] != 'Interest') {
		return check_plain($value);
	}
	$node = node_load($data->nid);
	$image = theme('image', drupal_get_path('module', 'taxon_experts') . '/images/go_to_interest.png', t('Go to this interest'));
	return l($image, "node/$data->nid",array('title' => t('Go to this interest: '.$node->title)),NULL,NULL,NULL,TRUE);
}

function taxon_experts_handler_expert_link($fieldinfo, $fielddata, $value, $data){
	if ($fielddata['options'] == 'nolink') {
		return check_plain($value);
	}
	$node = node_load($data->nid);
	$name = _taxon_expert_get_expert_name($value);
	return l($name, "user/$node->uid");
}


function _taxon_experts_get_profile_nid($type){
	if(arg(0) == 'user'){
		$profile_node = node_load(array('type'=>$type, 'uid'=>arg(1)));
		return $profile_node->nid;
	} else {
		return arg(1);
	}
}

function _taxon_expert_get_expert_name($nid = false){
	if(!$nid) return;
	$node = node_load($nid);
	return $node->title;
}
/*
 * find out, if the current user is the owner of the current node
 */
function _taxon_experts_user_is_owner(){
	global $user;
	if(arg(0) == 'user' && arg(1) == $user->uid){
		return TRUE;
	}
	if(arg(0) == 'node' && is_numeric(arg(1))){
		$node = node_load(arg(1));
		if($node->uid == $user->uid){
			return TRUE;
		}
	}
}

function _taxon_experts_menu_custom($nid = false, $uid = false){
	global $user;
	if(!$uid || !$nid || $user->uid == $uid || !user_access('edit expertsdb_person content')) return;
	$output = "<ul class=\"tabs primary\">\n";
	$output .= '<li>'. l(t('Edit'),'/node/' . $nid . '/edit') ."</li>\n";
	$output .= "</ul>\n";
    $output .= '<div class="clear-block"> </div>';;
	return $output;
}
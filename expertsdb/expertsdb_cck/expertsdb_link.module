<?php

/**
 * @file
 * Defines simple expertsdb_link field types.
 */

define('LINK_EXTERNAL', 'external');
define('LINK_INTERNAL', 'internal');
define('LINK_FRONT', 'front');
define('LINK_EMAIL', 'email');
define('LINK_DOMAINS', 'aero|arpa|biz|com|cat|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel|mobi');

/*
 * Definition of privacy levels
 */
define('PRIVACY_CONTACT_PRIVATE', 'ContactPrivate');
define('PRIVACY_PRIVATE', 'Private');
define('PRIVACY_PUBLIC', 'Public');

/**
 * Implementation of hook_perm()
 *
 * Valid permissions for this module
 * @return array An array of valid permissions for the portfolio module
 */
function expertsdb_link_perm() {
	return array(
    	'view private expertsdb_link fields',
	//TODO which else permission are required?
	);
}

/**
 * Implementation of hook_help().
 *
 * @param unknown_type $section
 * @return unknown
 */
function expertsdb_link_help($section) {
	switch ($section) {
		case 'admin/modules#description':
			return t('Defines a field type for links with optional title. Data will be integrated as serialized array into the according content type database. <em>Note: Requires content.module.</em>');
	}
}

/**
 * Implementation of hook_menu().
 */
function expertsdb_link_menu($may_cache) {
	$items = array();
	if ($may_cache) {
		$items[] = array(
      'path' => 'expertsdb_link/widget/js',
      'callback' => 'expertsdb_link_widget_js',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
		);
	}
	return $items;
}

/**
 * Implementation of hook_field_info().
 */
function expertsdb_link_field_info() {
	return array(
    'expertsdb_link' => array('label' => 'Expertsdb Link'),
	);
}

/**
 * Implementation of hook_field_settings().
 */
function expertsdb_link_field_settings($op, $field) {
	switch ($op) {
		case 'form':
			$form = array(
        '#theme' => 'expertsdb_link_field_settings',
			);

			$title_options = array(
        'optional' => t('Optional Title'),
        'required' => t('Required Title'),
        'value' => t('Static Title: '),
        'none' => t('No Title'),
			);

			$form['title'] = array(
        '#type' => 'radios',
        '#title' => t('Link Title'),
        '#default_value' => isset($field['title']) ? $field['title'] : 'optional',
        '#options' => $title_options,
        '#description' => t('If the link title is optional or required, a field will be displayed to the end user. If the link title is static, the link will always use the same title. If <a href="http://drupal.org/project/token">token module</a> is installed, the static title value may use any other node field as its value.'),
			);

			$form['title_value'] = array(
        '#type' => 'textfield',
        '#default_value' => $field['title_value'],
        '#size' => '46',
			);

			// Add token module replacements if available
			if (module_exists('token')) {
				$form['tokens'] = array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#title' => t('Placeholder tokens'),
          '#description' => t("The following placeholder tokens can be used in both paths and titles. When used in a path or title, they will be replaced with the appropriate values."),
				);
				$form['tokens']['help'] = array(
          '#value' => theme('token_help', 'node'),
				);

				$form['enable_tokens'] = array(
          '#type' => 'checkbox',
          '#title' => t('Allow tokens'),
          '#default_value' => isset($field['enable_tokens']) ? $field['enable_tokens'] : 1,
          '#description' => t('Checking will allow users to enter tokens in URLs and Titles on the node edit form. This does not affect the field settings on this page.'),
				);
			}

			$form['display'] = array(
        '#tree' => true,
			);
			$form['display']['url_cutoff'] = array(
        '#type' => 'textfield',
        '#title' => t('URL Display Cutoff'),
        '#default_value' => $field['display']['url_cutoff'] ? $field['display']['url_cutoff'] : '80',
        '#description' => t('If the user does not include a title for this link, the URL will be used as the title. When should the link title be trimmed and finished with an elipsis (&hellip;)? Leave blank for no limit.'),
        '#maxlength' => 3,
        '#size' => 3,
			);

			$target_options = array(
        'default' => t('Default (no target attribute)'),
        '_top' => t('Open link in window root'),
        '_blank' => t('Open link in new window'),
        'user' => t('Allow the user to choose'),
			);
			$form['attributes'] = array(
        '#tree' => true,
			);
			$form['attributes']['target'] = array(
        '#type' => 'radios',
        '#title' => t('Link Target'),
        '#default_value' => $field['attributes']['target'] ? $field['attributes']['target'] : 'default',
        '#options' => $target_options,
			);
			$form['attributes']['rel'] = array(
        '#type' => 'textfield',
        '#title' => t('Rel Attribute'),
        '#description' => t('When output, this link will have this rel attribute. The most common usage is <a href="http://en.wikipedia.org/wiki/Nofollow">rel=&quot;nofollow&quot;</a> which prevents some search engines from spidering entered links.'),
        '#default_value' => $field['attributes']['rel'] ? $field['attributes']['rel'] : '',
			);
			$form['attributes']['class'] = array(
        '#type' => 'textfield',
        '#title' => t('Additional CSS Class'),
        '#description' => t('When output, this link will have have this class attribute. Multiple classes should be seperated by spaces.'),
        '#default_value' => isset($field['attributes']['class']) ? $field['attributes']['class'] : '',
			);

			// disable multiple and
			$form['multiple'] = array('#type' => 'hidden','#value' => '0');

			return $form;

		case 'validate':
			if ($field['title'] == 'value' && empty($field['title_value'])) {
				form_set_error('title_value', t('A default title must be provided if the title is a static value'));
			}
			break;

		case 'save':
			return array('attributes', 'display', 'title', 'title_value', 'enable_tokens');

		case 'database columns':
			$columns = array(
        'expertsdb_link' => array('type' => 'mediumtext', 'not null' => FALSE),
			);
			return $columns;

		case 'filters':
			/*			return array(
			 'default' => array(
			 'name' => t('URL'),
			 'operator' => 'views_handler_operator_like',
			 'handler' => 'views_handler_operator_like',
			 ),
			 'title' => array(
			 'name' => t('Title'),
			 'operator' => 'views_handler_operator_like',
			 'handler' => 'views_handler_operator_like',
			 ),
			 'protocol' => array(
			 'name' => t('Protocol'),
			 'list' => drupal_map_assoc(variable_get('filter_allowed_protocols', array('http', 'https', 'ftp', 'news', 'nntp', 'telnet', 'mailto', 'irc', 'ssh', 'sftp', 'webcal'))),
			 'operator' => 'views_handler_operator_or',
			 'handler' => 'expertsdb_link_views_protocol_filter_handler',
			 ),
			 );*/
			return;

		case 'arguments':
			/*      return array(
			 'content: '. $field['field_name'] .'_url' => array(
			 'name' => t('Link URL') .': '. t($field['widget']['label']) .' ('. $field['field_name'] .')',
			 'handler' => 'expertsdb_link_views_argument_handler',
			 ),
			 'content: '. $field['field_name'] .'_title' => array(
			 'name' => t('Link Title') .': '. t($field['widget']['label']) .' ('. $field['field_name'] .')',
			 'handler' => 'expertsdb_link_views_argument_handler',
			 ),
			 'content: '. $field['field_name'] .'_target' => array(
			 'name' => t('Link Target') .': '. t($field['widget']['label']) .' ('. $field['field_name'] .')',
			 'handler' => 'expertsdb_link_views_argument_handler',

			 ),
			 );*/
			return;

		case 'callbacks'://pairs up with cck_fullname_field::view
			return array(
        'view' => CONTENT_CALLBACK_CUSTOM,
			);

	}
}

/**
 * Implemantation of hook_field()
 *
 * @param unknown_type $op
 * @param unknown_type $node
 * @param unknown_type $field
 * @param unknown_type $items
 * @param unknown_type $teaser
 * @param unknown_type $page
 * @return unknown
 */
function expertsdb_link_field($op, &$node, $field, &$items, $teaser, $page) {
	switch ($op) {

		case 'view':
			$context = $teaser ? 'teaser' : 'full';
			$formatter = isset($field['display_settings'][$context]['format']) ? $field['display_settings'][$context]['format'] : 'default';
			$items = content_format($field, $items, $formatter, $node);
			if(!empty($items) && is_array($items) && count($items) > 0){
				return theme('expertsdb_link_container', $node, $field, $items, $teaser, $page);
			}
			return;
	}
}

/**
 * Implementation of hook_widget_info().
 */
function expertsdb_link_widget_info() {
	return array(
    'expertsdb_link' => array(
      'label' => 'Text Fields for Title and URL',
      'field types' => array('expertsdb_link'),
	),
	);
}

/**
 * Implementation of hook_widget().
 */
function expertsdb_link_widget($op, &$node, $field, &$node_field) {
	switch ($op) {
		case 'prepare form values':
			// unserialize and prepare data
			_expertsdb_link_widget_prepare($node_field);

			// get posted values in both node edit and profile edit mode
			if ($_POST[$field['field_name']] || $_POST[$field['type_name'].'_node_form'][$field['field_name']]) {
				$node_field = ($_POST['form_id'] == 'user_edit') ?  $_POST[$field['type_name'].'_node_form'][$field['field_name']] : $_POST[$field['field_name']];
				unset($node_field['count'], $node_field['more-url'], $node_field['more']);
			}
			break;

		case 'form':
			$form = array();
			$form[$field['field_name']] = array(
        '#tree' => TRUE,
        '#theme' => 'expertsdb_link_widget_form',
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#title' => t($field['widget']['label']),
        '#description' => t($field['widget']['description']),
			);

			// Add token module replacements if available
			if (module_exists('token') && $field['enable_tokens']) {
				$tokens_form = array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#title' => t('Placeholder tokens'),
          '#description' => t("The following placeholder tokens can be used in both titles and URLs. When used in a URL or title, they will be replaced with the appropriate values."),
          '#weight' => 2,
				);
				$tokens_form['help'] = array(
          '#value' => theme('token_help', 'node'),
				);
			}

			drupal_add_js(drupal_get_path('module', 'expertsdb_link') .'/expertsdb_link.js');

			$delta = 0;
			// Render link fields for all the entered values
			foreach ($node_field as $data) {
				if (is_array($data) && $data['url']) {
					_expertsdb_link_widget_form($form[$field['field_name']][$delta], $field, $data, $delta);
					$delta++;
				}
			}
			// Render one additional new link fields
			_expertsdb_link_widget_form($form[$field['field_name']][$delta], $field, array(), $delta);

			// Create a wrapper for additional fields
			$form[$field['field_name']]['wrapper'] = array(
          '#type' => 'markup',
          '#value' => '<div id="' . str_replace('_', '-', $field['field_name']) . '-wrapper" class="clear-block"></div>',
			);

			// Add 'More' Javascript Callback
			$form[$field['field_name']]['more-url'] = array(
          '#type' => 'hidden',
          '#value' => url('expertsdb_link/widget/js/' . $field['type_name'] . '/' . $field['field_name'], NULL, NULL, TRUE),
          '#attributes' => array('class' => 'more-links'),
          '#id' => str_replace('_', '-', $field['field_name']) . '-more-url',
			);

			// Add Current Field Count
			$form[$field['field_name']]['count'] = array(
          '#type' => 'hidden',
          '#value' => $delta,
          '#id' => str_replace('_', '-', $field['field_name']) . '-count',
			);

			// Add More Button
			$form[$field['field_name']]['more'] = array(
        '#name' => 'more',
        '#id' => str_replace('_', '-', $field['field_name']) . '-more',
        '#weight' => 10,
				'#type' => 'views_imagebutton',
				'#title' => t('More Links'),
    		'#image' => drupal_get_path('module','expertsdb_email') . '/images/button_add_element.png',  // provide the path to your image here
    		'#default_value' => t('More emails'), // original value of button text
			);

			if (isset($tokens_form)) {
				$form[$field['field_name']]['tokens'] = $tokens_form;
			}

			return $form;

		case 'validate':
			_expertsdb_link_cleanup($node_field);

			foreach($node_field as $delta => $value) {
				if ($value['url'] && !(isset($field['widget']['default_value'][$delta]['url']) && $value['url'] == $field['widget']['default_value'][$delta]['url'] && !$field['required'])) {
					// Validate the link
					if (expertsdb_link_validate_url(trim($value['url'])) == FALSE) {
						form_set_error($field['field_name'] .']['. $delta. '][url', t('Not a valid URL.'));
					}
					// Require a title for the link if necessary
					elseif ($field['title'] == 'required' && strlen(trim($value['title'])) == 0) {
						form_set_error($field['field_name'] .']['. $delta. '][title', t('Titles are required for all links.'));
					}
				}
				// Require a link if we have a title
				elseif (strlen($value['title']) > 0 && strlen(trim($value['url'])) == 0) {
					form_set_error($field['field_name'] .']['. $delta. '][url', t('You cannot enter a title without a link.'));
				}
			}
			return;

		case 'process form values':
			// run a cleanup cycle
			if(!strstr($node_field[0]['expertsdb_link'],':{')){
				_expertsdb_link_cleanup($node_field);
			}
			// apply some checks and trims
			_expertsdb_link_widget_process($node_field);
			return;

		case 'submit':
			// do not save empty values and bring preferred email to the top
			_expertsdb_link_cleanup($node_field);
			// apply some checks and trims
			_expertsdb_link_widget_process($node_field);
			// serialize data
			_expertsdb_link_serialize($node_field);
			return;
	}
}

/**
 * AHAH generation of additional form fields
 *
 * @param unknown_type $type_name
 * @param unknown_type $field_name
 */
function expertsdb_link_widget_js($type_name, $field_name) {
	$field = content_fields($field_name, $type_name);
	$type = content_types($type_name);
	// get the correct delta and field_name depending on being in node_form or user_edit
	// $delta = ($_POST['form_id'] == 'user_edit') ? $_POST[$type['type'].'_node_form'][$field_name]['count']: $_POST[$field_name]['count'];
	$delta = $_POST[$field_name]['count'];
	$form = array();

	$node_field = array();

	_expertsdb_link_widget_form($form, $field, $node_field, $delta);

	// Assign parents matching the original form
	foreach (element_children($form) as $key) {
		$form[$key]['#parents'] = array($field_name, $delta, $key);
	}

	// Add names, ids, and other form properties
	foreach (module_implements('form_alter') as $module) {
		$function = $module .'_form_alter';
		$function('expertsdb_link_widget_js', $form);
	}
	$form = form_builder('expertsdb_link_widget_js', $form);

	// if form is rendered as part of the user profile page, we need to alter name and id of newly generated form elements
/*	if($_POST['form_id'] == 'user_edit'){
		foreach (element_children($form) as $key) {
			$element_name = explode('[',$form[$key]['#name']);
			array_walk($element_name,'_expertsdb_link_widget_alter_elements');
			$form[$key]['#name'] = $type['type'] . '_node_form' . '[' . implode('][',$element_name).']';
		}
	}*/

	$output = drupal_render($form);

	print drupal_to_js(array('status' => TRUE, 'data' => $output));
	exit;
}

function _expertsdb_link_widget_alter_elements(&$element){
	$element = preg_replace('@\]@', '', $element);
}

/**
 * Helper function renders the expertsdb_email widget only for multiple values.
 *
 * @param unknown_type $form_item
 * @param unknown_type $field
 * @param unknown_type $node_field
 * @param unknown_type $delta
 */
function _expertsdb_link_widget_form(&$form_item, $field, $node_field, $delta = 0) {

	$form_item = array(
    '#tree' => TRUE,
    '#theme' => 'expertsdb_link_widget_form_row',
	);

	$default_url = "";
	if (isset($field['widget']['default_value'][$delta]['url'])) {
		$default_url = $field['widget']['default_value'][$delta]['url'];
	}

	$form_item['url'] = array(
    '#type' => 'textfield',
    '#maxlength' => '255',
    '#title' => $delta === 0 ? t('URL') : NULL,
    '#default_value' => ($node_field['url']) ? $node_field['url'] : $default_url,
    '#required' => ($delta === 0) ? $field['required'] : FALSE,
	);
	if ($field['title'] == 'optional' || $field['title'] == 'required') {
		$default_title = "";
		if (isset($field['widget']['default_value'][$delta]['title'])) {
			$default_title = $field['widget']['default_value'][$delta]['title'];
		}
		$form_item['title'] = array(
      '#type' => 'textfield',
      '#maxlength' => '255',
      '#title' => $delta === 0 ? t('Title') : NULL,
      '#default_value' => ($node_field['title']) ? $node_field['title'] : $default_title,
      '#required' => ($delta === 0 && $field['title'] == 'required') ? $field['required'] : FALSE,
		);
	}
	if ($field['attributes']['target'] == 'user') {
		$form_item['attributes']['target'] = array(
      '#type' => 'checkbox',
      '#title' => t('Open URL in a New Window'),
      '#default_value' => $node_field['attributes']['target'],
      '#return_value' => "_blank",
		);
	}
}

function _expertsdb_link_widget_prepare(&$node_field) {
	// only prepare, if data is actually serialized
	if(strstr($node_field[0]['expertsdb_link'],':{')){
		$node_field[0] = unserialize($node_field[0]['expertsdb_link']);
		if(count($node_field) > 0){
			// return content of first array element
			$node_field = $node_field[0];
		}
	}
}

function _expertsdb_link_serialize(&$node_field){
	$node_field = array(array('expertsdb_link' => serialize($node_field)));
}

/**
 * Function to remove unwanted elements from the node_field array
 *
 * @param array $node_field
 */
function _expertsdb_link_cleanup(&$node_field){
	$save_field = array();
	$registered_urls =array();
	// Remove the JS helper fields
	unset($node_field['count'], $node_field['more-url'], $node_field['more']);
	foreach ($node_field as $delta => $value) {
		if (!empty($value['url']) || $delta == 0) {
			// skip duplicates emails
			if(in_array($value['url'], $registered_urls)){
				continue;
			}
			// register email to avoid duplicates
			array_push($registered_urls, $value['url']);

			if (!empty($value['url']) || $delta == 0) {
				$save_field[] = $node_field[$delta];
			}
		}
	}
	$node_field = $save_field;
}

function _expertsdb_link_widget_process(&$node_field) {
	foreach($node_field as $delta => $value) {
		if (is_numeric($delta)) {
			// Remove the target attribute if not selected
			if (!$node_field[$delta]['attributes']['target'] || $node_field[$delta]['attributes']['target'] == "default") {
				unset($node_field[$delta]['attributes']['target']);
			}
			// Trim whitespace and remove code
			$node_field[$delta]['url'] = check_url(trim($node_field[$delta]['url']));
			$node_field[$delta]['title'] = check_plain(trim($node_field[$delta]['title']));

			//don't save an invalid default value (e.g. 'http://')
			if ((isset($field['widget']['default_value'][$delta]['url']) && $node_field[$delta]['url'] == $field['widget']['default_value'][$delta]['url']) && is_object($node)) {
				if (!expertsdb_link_validate_url($node_field[$delta]['url'])) {
					unset($node_field[$delta]['url']);
				}
			}
		}
	}
}


/**
 * Theme the display of the entire link set
 */
function theme_expertsdb_link_widget_form($element) {
	// pull in the stylesheet
	drupal_add_css(drupal_get_path('module', 'expertsdb_link') .'/expertsdb_link_form.css');
	$output = drupal_render($element);

	return $output;
}

/**
 * Theme the display of a single form row
 */
function theme_expertsdb_link_widget_form_row($element) {
	$output = '';
	$output .= '<div class="expertsdb-link-field-row clear-block"><div class="expertsdb-link-field-subrow clear-block">';
	if ($element['title']) {
		$output .= '<div class="expertsdb-link-field-title expertsdb-title-field-column">' . drupal_render($element['title']) . '</div>';
	}
	$output .= '<div class="expertsdb-link-field-url' . ($element['title'] ? ' expertsdb-link-field-column' : '') . '">' . drupal_render($element['url']) . '</div>';
	$output .= '</div>';
	if ($element['attributes']) {
		$output .= '<div class="expertsdb-link-attributes">' . drupal_render($element['attributes']) . '</div>';
	}
	$output .= drupal_render($element);
	$output .= '</div>';
	return $output;
}

/**
 * Theme the settings form for the expertsdb_link field.
 */
function theme_expertsdb_link_field_settings($form) {
	$title_value = drupal_render($form['title_value']);
	$title_checkbox = drupal_render($form['title']['value']);

	// Set Static Title radio option to include the title_value textfield
	$form['title']['value'] = array('#value' => '<div class="container-inline">'. $title_checkbox . $title_value .'</div>');

	// Reprint the title radio options with the included textfield
	return drupal_render($form);
}

/**
 * Theme to display a complete container with all links in view mode
 *
 * @param unknown_type $node
 * @param unknown_type $field
 * @param unknown_type $items
 * @param unknown_type $teaser
 * @param unknown_type $page
 * @return unknown
 */
function theme_expertsdb_link_container($node, $field, $items, $teaser, $page){
	// pull in the stylesheet
	drupal_add_css(drupal_get_path('module', 'expertsdb_link') .'/expertsdb_link_view.css');
	$output = '';
	$output .= '<div class="expertsdb-link-container">';
	$output .= theme('field', $node, $field, $items, $teaser, $page);
	$output .= '</div>';
	return $output;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function expertsdb_link_field_formatter_info() {
	return array(
    'default' => array(
      'label' => t('Default, as link with title'),
      'field types' => array('expertsdb_link'),
	),
    'plain' => array(
      'label' => t('Plain, as the text URL'),
      'field types' => array('expertsdb_link'),
	),
    'short' => array(
      'label' => t('Short, as link with title "Link"'),
      'field types' => array('expertsdb_link'),
	),
    'title as prefix' => array(
      'label' => t('Title as prefix, as Title: Link'),
      'field types' => array('expertsdb_link'),
	),
    'label' => array(
      'label' => t('Label, as link with label as title'),
      'field types' => array('expertsdb_link'),
	),
	);
}

/**
 * Implementation of hook_field_formatter().
 */
function expertsdb_link_field_formatter($field, $item, $formatter, $node) {
	// item comes in either as serialized or unserialized value
	if (empty($item[0]['expertsdb_link']) && empty($item[0]['url'])) {
		return '';
	}
	if(strstr($item[0]['expertsdb_link'],':{')){
		$items = unserialize($item[0]['expertsdb_link']);
	}else{
		unset($item['count'], $item['more-url'], $item['more']);
		$items = $item;
	}

	// check, if we do have any urls
	$urls_present = FALSE;
	foreach ($items as $delta => $item){
		if(!empty($item['url'])){
			$urls_present = TRUE;
		}
	}
	if (!$urls_present) return;

	/*
	 * React on privacy settings
	 */

	if($node->field_privacy){
		global $user;
		$term = taxonomy_get_term($node->field_privacy[0]['tid']);
		switch($term->name){

			case PRIVACY_CONTACT_PRIVATE:
			case PRIVACY_PRIVATE:
				// show information only to roles with access and node author
				if($user->uid != $node->uid && !user_access('view private expertsdb_link fields',$user)){
					return;
				}
				break;

			case PRIVACY_PUBLIC:
				// allow everybody to view aliases as configured in the field formatter (display field)
				break;

		}
	}

	foreach ($items as $delta => $item) {
		if ($formatter == 'plain') {
			return check_plain($item['url']);
		}

		$attributes = array();
		$item['attributes'] = $item['attributes'];
		// Add attributes defined at the widget level
		if (is_array($item['attributes'])) {
			foreach($item['attributes'] as $attribute => $attbvalue) {
				if (isset($item['attributes'][$attribute]) && $field['attributes'][$attribute] == 'user') {
					$attributes[$attribute] = $attbvalue;
				}
			}
		}
		// Add attributes defined at the field level
		if (is_array($field['attributes'])) {
			foreach($field['attributes'] as $attribute => $attbvalue) {
				if (!empty($attbvalue) && $attbvalue != 'default' && $attbvalue != 'user') {
					$attributes[$attribute] = $attbvalue;
				}
			}
		}

		// Replace URL tokens
		if (module_exists('token') && $field['enable_tokens']) {
			$item['url'] = token_replace($item['url'], 'node', $node);
		}

		$type = expertsdb_link_validate_url($item['url']);
		$url = expertsdb_link_cleanup_url($item['url']);

		// Seperate out the anchor if any
		if (strpos($url, '#') !== FALSE) {
			$fragment = substr($url, strpos($url, '#') + 1);
			$url = substr($url, 0, strpos($url, '#'));
		}
		// Seperate out the query string if any
		if (strpos($url, '?') !== FALSE) {
			$query = substr($url, strpos($url, '?') + 1);
			$url = substr($url, 0, strpos($url, '?'));
		}

		// Give the link the title 'Link'
		if ($formatter == 'short') {
			$items[$delta]['view'] = l(t('Link'), $url, $attributes, $query, $fragment);
		}
		// Build the link using the widget label
		elseif ($formatter == 'label') {
			$items[$delta]['view'] = l(t($field['widget']['label']), $url, $attributes, $query, $fragment);
		}
		// Build the link as Title: URL
		elseif ($formatter == 'title as prefix') {
			$display_url = $type == LINK_EMAIL ? str_replace('mailto:', '', $url) : url($url, $query, $fragment, TRUE);
			if ($field['display']['url_cutoff'] && strlen($display_url) > $field['display']['url_cutoff']) {
				$display_url = substr($display_url, 0, $field['display']['url_cutoff']) . "...";
			}
			// Use the title defined at the field level
			if ($field['title'] == 'value' && strlen(trim($field['title_value']))) {
				$title = $field['title_value'];
			}
			// Use the title defined by the user at the widget level
			else {
				$title = ($item['title']) ? $item['title'] : '&nbsp;' ;
			}
			// Replace tokens
			if (module_exists('token') && ($field['title'] == 'value' || $field['enable_tokens'])) {
				$title = token_replace($title, 'node', $node);
			}
			$items[$delta]['view'] = '<div class="item-label label-column">' . $title . '</div> ' . l($display_url, $url, $attributes, $query, $fragment);
		}
		// Build the link with a title
		elseif (strlen(trim($item['title'])) || ($field['title'] == 'value' && strlen(trim($field['title_value'])))) {
			// Use the title defined at the field level
			if ($field['title'] == 'value' && strlen(trim($field['title_value']))) {
				$title = $field['title_value'];
			}
			// Use the title defined by the user at the widget level
			else {
				$title = $item['title'];
			}
			// Replace tokens
			if (module_exists('token') && ($field['title'] == 'value' || $field['enable_tokens'])) {
				$title = token_replace($title, 'node', $node);
			}
			$items[$delta]['view'] = l($title, $url, $attributes, $query, $fragment);
		}

		// Build the link with the URL or email address as the title (max 80 characters)
		else {
			$display_url = $type == LINK_EMAIL ? str_replace('mailto:', '', $url) : url($url, $query, $fragment, TRUE);
			if ($field['display']['url_cutoff'] && strlen($display_url) > $field['display']['url_cutoff']) {
				$display_url = substr($display_url, 0, $field['display']['url_cutoff']) . "...";
			}
			$items[$delta]['view'] = l($display_url, $url, $attributes, $query, $fragment);
		}
	}
	return $items;
}

/**
 * Views module argument handler for expertsdb_link fields
 */
function expertsdb_link_views_argument_handler($op, &$query, $argtype, $arg = '') {
	if ($op == 'filter') {
		$field_name = substr($argtype['type'], 9, strrpos($argtype['type'], '_') - 9);
		$column = substr($argtype['type'], strrpos($argtype['type'], '_') + 1);
	}
	else {
		$field_name = substr($argtype, 9, strrpos($argtype, '_') - 9);
		$column = substr($argtype, strrpos($argtype, '_') + 1);
	}

	// Right now the only attribute we support in views in 'target', but
	// other attributes of the href tag could be added later
	if ($column == 'target') {
		$attribute = $column;
		$column = 'attributes';
	}

	$field = content_fields($field_name);
	$db_info = content_database_info($field);
	$main_column = $db_info['columns'][$column];

	// The table name used here is the Views alias for the table, not the actual
	// table name.
	$table = 'node_data_'. $field['field_name'];

	switch ($op) {
		case 'summary':
			$query->ensure_table($table);
			$query->add_field($main_column['column'], $table);
			return array('field' => $table .'.'. $main_column['column']);
			break;

		case 'filter':
			$query->ensure_table($table);
			if ($column == 'attributes') {
				// Because attributes are stored serialized, our only option is to also
				// serialize the data we're searching for and use LIKE to find similar data
				$query->add_where($table .'.'. $main_column['column'] ." LIKE '%%%s%'", serialize($attribute) . serialize($arg));
			}
			else {
				$query->add_where($table .'.'. $main_column['column'] ." = '%s'", $arg);
			}
			break;

		case 'expertsdb_link':
			$item = array();
			foreach ($db_info['columns'] as $column => $attributes) {
				$view_column_name = $attributes['column'];
				$item[$column] = $query->$view_column_name;
			}

			return l(content_format($field, $item, 'plain'), $arg .'/'. $query->$main_column['column'], array(), NULL, NULL, FALSE, TRUE);

		case 'sort':
			break;

		case 'title':
			$item = array(key($db_info['columns']) => $query);
			return content_format($field, $item);
			break;
	}
}

/**
 * Views modules filter handler for link protocol filtering
 */
function expertsdb_link_views_protocol_filter_handler($op, $filter, $filterinfo, &$query) {
	global $db_type;

	$protocols = $filter['value'];
	$field = $filterinfo['field'];
	// $table is not the real table name but the views alias
	$table = 'node_data_'. $filterinfo['content_field']['field_name'];

	foreach ($protocols as $protocol) {
		// Simple case, the URL begins with the specified protocol
		$condition = $table .'.'. $field .' LIKE \''. $protocol .'%\'';

		// More complex case, no protocol specified but is automatically cleaned up
		// by expertsdb_link_cleanup_url(). RegEx is required for this search operation.
		if ($protocol == 'http') {
			if ($db_type == 'pgsql') {
				// PostGreSQL code has NOT been tested. Please report any problems to the link issue queue.
				// pgSQL requires all slashes to be double escaped in regular expressions.
				// See http://www.postgresql.org/docs/8.1/static/functions-matching.html#FUNCTIONS-POSIX-REGEXP
				$condition .= ' OR '. $table .'.'. $field .' ~* \''. '^(([a-z0-9]([a-z0-9\\-_]*\\.)+)('. LINK_DOMAINS .'|[a-z][a-z]))' .'\'';
			}
			else {
				// mySQL requires backslashes to be double (triple?) escaped within character classes.
				// See http://dev.mysql.com/doc/refman/5.0/en/string-comparison-functions.html#operator_regexp
				$condition .= ' OR '. $table .'.'. $field .' REGEXP \''. '^(([a-z0-9]([a-z0-9\\\-_]*\.)+)('. LINK_DOMAINS .'|[a-z][a-z]))' .'\'';
			}
		}

		$where_conditions[] = $condition;
	}

	$query->ensure_table($table);
	$query->add_where(implode(' '. $filter['operator'] .' ', $where_conditions));
}

/**
 * Forms a valid URL if possible from an entered address.
 * Trims whitespace and automatically adds an http:// to addresses without a protocol specified
 *
 * @param string $url
 * @param string $protocol The protocol to be prepended to the url if one is not specified
 */
function expertsdb_link_cleanup_url($url, $protocol = "http") {
	$url = trim($url);
	$type = expertsdb_link_validate_url($url);

	if ($type == LINK_EXTERNAL) {
		// Check if there is no protocol specified
		$protocol_match = preg_match("/^([a-z0-9][a-z0-9\.\-_]*:\/\/)/i",$url);
		if (empty($protocol_match)) {
			// But should there be? Add an automatic http:// if it starts with a domain name
			$domain_match = preg_match('/^(([a-z0-9]([a-z0-9\-_]*\.)+)('. LINK_DOMAINS .'|[a-z]{2}))/i',$url);
			if (!empty($domain_match)) {
				$url = $protocol."://".$url;
			}
		}
	}

	return $url;
}

/**
 * A lenient verification for URLs. Accepts all URLs following RFC 1738 standard
 * for URL formation and all email addresses following the RFC 2368 standard for
 * mailto address formation.
 *
 * @param string $text
 * @return mixed Returns boolean FALSE if the URL is not valid. On success, returns an object with
 * the following attributes: protocol, hostname, ip, and port.
 */
function expertsdb_link_validate_url($text) {

	$allowed_protocols = variable_get('filter_allowed_protocols', array('http', 'https', 'ftp', 'news', 'nntp', 'telnet', 'mailto', 'irc', 'ssh', 'sftp', 'webcal'));

	$protocol = '((' . implode("|", $allowed_protocols) . '):\/\/)';
	$authentication = '([a-z0-9]+(:[a-z0-9]+)?@)';
	$domain = '(([a-z0-9]([a-z0-9\-_\[\]]*\.)+)('. LINK_DOMAINS .'|[a-z]{2}))';
	$ipv4 = '([0-9]{1,3}(\.[0-9]{1,3}){3})';
	$ipv6 = '([0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7})';
	$port = '(:([0-9]{1,5}))';

	// Pattern specific to eternal links
	$external_pattern = '/^' . $protocol . '?'. $authentication . '?' . '(' . $domain . '|' . $ipv4 . '|' . $ipv6 . ' |localhost)' . $port . '?';

	// Pattern specific to internal links
	$internal_pattern = "/^([a-z0-9_\-+\[\]]+)";

	$directories = "(\/[a-z0-9_\-\.~+%=&,$'():;*@\[\]]*)*";
	$query = "(\/?[?a-z0-9+_\-\.\/%=&,$'():;*@\[\]]*)";
	$anchor = "(#[a-z0-9_\-\.~+%=&,$'():;*@\[\]]*)";

	// the rest of the path for a standard URL
	$end = $directories . '?' . $query . '?' .  $anchor . '?' . '$/i';

	$user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\'\[\]]+';
	$email_pattern = '/^mailto:' . $user . '@' . '(' . $domain . '|' . $ipv4 .'|'. $ipv6 . '|localhost)' . $query . '$/';

	if (preg_match($external_pattern . $end, $text)) {
		return LINK_EXTERNAL;
	}
	elseif (preg_match($internal_pattern . $end, $text)) {
		return LINK_INTERNAL;
	}
	elseif (in_array('mailto', $allowed_protocols) && preg_match($email_pattern, $text)) {
		return LINK_EMAIL;
	}
	elseif (strpos($text, '<front>') === 0) {
		return LINK_FRONT;
	}
	return FALSE;
}
